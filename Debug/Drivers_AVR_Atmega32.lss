
Drivers_AVR_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cc4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002cc4  00002d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000336c  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001d59  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00007e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00007f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000080b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000abed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b99c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000bafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000bd89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <main>
      7a:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_init>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			IN: direction : the direction of the pin INPUT/OUTPUT.
 */
stdReturnType_t DIO_init(portX_t PortName, pinX_t pinNum, pinDir_t direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_init+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_init+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <DIO_init+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
     b48:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO: Validation of input */

	switch(PortName)
     b4e:	8a 81       	ldd	r24, Y+2	; 0x02
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	3e 83       	std	Y+6, r19	; 0x06
     b56:	2d 83       	std	Y+5, r18	; 0x05
     b58:	8d 81       	ldd	r24, Y+5	; 0x05
     b5a:	9e 81       	ldd	r25, Y+6	; 0x06
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	91 05       	cpc	r25, r1
     b60:	09 f4       	brne	.+2      	; 0xb64 <DIO_init+0x2e>
     b62:	4b c0       	rjmp	.+150    	; 0xbfa <DIO_init+0xc4>
     b64:	2d 81       	ldd	r18, Y+5	; 0x05
     b66:	3e 81       	ldd	r19, Y+6	; 0x06
     b68:	22 30       	cpi	r18, 0x02	; 2
     b6a:	31 05       	cpc	r19, r1
     b6c:	2c f4       	brge	.+10     	; 0xb78 <DIO_init+0x42>
     b6e:	8d 81       	ldd	r24, Y+5	; 0x05
     b70:	9e 81       	ldd	r25, Y+6	; 0x06
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	71 f0       	breq	.+28     	; 0xb92 <DIO_init+0x5c>
     b76:	dd c0       	rjmp	.+442    	; 0xd32 <DIO_init+0x1fc>
     b78:	2d 81       	ldd	r18, Y+5	; 0x05
     b7a:	3e 81       	ldd	r19, Y+6	; 0x06
     b7c:	22 30       	cpi	r18, 0x02	; 2
     b7e:	31 05       	cpc	r19, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <DIO_init+0x4e>
     b82:	a3 c0       	rjmp	.+326    	; 0xcca <DIO_init+0x194>
     b84:	8d 81       	ldd	r24, Y+5	; 0x05
     b86:	9e 81       	ldd	r25, Y+6	; 0x06
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	91 05       	cpc	r25, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <DIO_init+0x5a>
     b8e:	69 c0       	rjmp	.+210    	; 0xc62 <DIO_init+0x12c>
     b90:	d0 c0       	rjmp	.+416    	; 0xd32 <DIO_init+0x1fc>
	{
		case PORT_A:
			if(INPUT == direction)
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	88 23       	and	r24, r24
     b96:	b1 f4       	brne	.+44     	; 0xbc4 <DIO_init+0x8e>
			{
				CLR_BIT(DDRA, pinNum);
     b98:	aa e3       	ldi	r26, 0x3A	; 58
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	ea e3       	ldi	r30, 0x3A	; 58
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	48 2f       	mov	r20, r24
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	02 2e       	mov	r0, r18
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_init+0x80>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	0a 94       	dec	r0
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_init+0x7c>
     bba:	80 95       	com	r24
     bbc:	84 23       	and	r24, r20
     bbe:	8c 93       	st	X, r24
				status = SUCCESS;
     bc0:	19 82       	std	Y+1, r1	; 0x01
     bc2:	b9 c0       	rjmp	.+370    	; 0xd36 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	a9 f4       	brne	.+42     	; 0xbf4 <DIO_init+0xbe>
			{
				SET_BIT(DDRA, pinNum);
     bca:	aa e3       	ldi	r26, 0x3A	; 58
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ea e3       	ldi	r30, 0x3A	; 58
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	48 2f       	mov	r20, r24
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	02 2e       	mov	r0, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <DIO_init+0xb2>
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	0a 94       	dec	r0
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <DIO_init+0xae>
     bec:	84 2b       	or	r24, r20
     bee:	8c 93       	st	X, r24
				status = SUCCESS;
     bf0:	19 82       	std	Y+1, r1	; 0x01
     bf2:	a1 c0       	rjmp	.+322    	; 0xd36 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	89 83       	std	Y+1, r24	; 0x01
     bf8:	9e c0       	rjmp	.+316    	; 0xd36 <DIO_init+0x200>
			}
			break;

		case PORT_B:
			if(INPUT == direction)
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	88 23       	and	r24, r24
     bfe:	b1 f4       	brne	.+44     	; 0xc2c <DIO_init+0xf6>
			{
				CLR_BIT(DDRB, pinNum);
     c00:	a7 e3       	ldi	r26, 0x37	; 55
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e7 e3       	ldi	r30, 0x37	; 55
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 2e       	mov	r0, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_init+0xe8>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <DIO_init+0xe4>
     c22:	80 95       	com	r24
     c24:	84 23       	and	r24, r20
     c26:	8c 93       	st	X, r24
				status = SUCCESS;
     c28:	19 82       	std	Y+1, r1	; 0x01
     c2a:	85 c0       	rjmp	.+266    	; 0xd36 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
     c2c:	8c 81       	ldd	r24, Y+4	; 0x04
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	a9 f4       	brne	.+42     	; 0xc5c <DIO_init+0x126>
			{
				SET_BIT(DDRB, pinNum);
     c32:	a7 e3       	ldi	r26, 0x37	; 55
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e3       	ldi	r30, 0x37	; 55
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_init+0x11a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_init+0x116>
     c54:	84 2b       	or	r24, r20
     c56:	8c 93       	st	X, r24
				status = SUCCESS;
     c58:	19 82       	std	Y+1, r1	; 0x01
     c5a:	6d c0       	rjmp	.+218    	; 0xd36 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	6a c0       	rjmp	.+212    	; 0xd36 <DIO_init+0x200>
			}
			break;

		case PORT_C:
			if(INPUT == direction)
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	88 23       	and	r24, r24
     c66:	b1 f4       	brne	.+44     	; 0xc94 <DIO_init+0x15e>
			{
				CLR_BIT(DDRC, pinNum);
     c68:	a4 e3       	ldi	r26, 0x34	; 52
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e4 e3       	ldi	r30, 0x34	; 52
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_init+0x150>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_init+0x14c>
     c8a:	80 95       	com	r24
     c8c:	84 23       	and	r24, r20
     c8e:	8c 93       	st	X, r24
				status = SUCCESS;
     c90:	19 82       	std	Y+1, r1	; 0x01
     c92:	51 c0       	rjmp	.+162    	; 0xd36 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
     c94:	8c 81       	ldd	r24, Y+4	; 0x04
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	a9 f4       	brne	.+42     	; 0xcc4 <DIO_init+0x18e>
			{
				SET_BIT(DDRC, pinNum);
     c9a:	a4 e3       	ldi	r26, 0x34	; 52
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e4 e3       	ldi	r30, 0x34	; 52
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_init+0x182>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_init+0x17e>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
				status = SUCCESS;
     cc0:	19 82       	std	Y+1, r1	; 0x01
     cc2:	39 c0       	rjmp	.+114    	; 0xd36 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	36 c0       	rjmp	.+108    	; 0xd36 <DIO_init+0x200>
			}
			break;

		case PORT_D:
			if(INPUT == direction)
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	88 23       	and	r24, r24
     cce:	b1 f4       	brne	.+44     	; 0xcfc <DIO_init+0x1c6>
			{
				CLR_BIT(DDRD, pinNum);
     cd0:	a1 e3       	ldi	r26, 0x31	; 49
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e1 e3       	ldi	r30, 0x31	; 49
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	48 2f       	mov	r20, r24
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_init+0x1b8>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_init+0x1b4>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
				status = SUCCESS;
     cf8:	19 82       	std	Y+1, r1	; 0x01
     cfa:	1d c0       	rjmp	.+58     	; 0xd36 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	a9 f4       	brne	.+42     	; 0xd2c <DIO_init+0x1f6>
			{
				SET_BIT(DDRD, pinNum);
     d02:	a1 e3       	ldi	r26, 0x31	; 49
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e1 e3       	ldi	r30, 0x31	; 49
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_init+0x1ea>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_init+0x1e6>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
				status = SUCCESS;
     d28:	19 82       	std	Y+1, r1	; 0x01
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_init+0x200>
			}
			break;

		default:
		status = ERROR;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	89 83       	std	Y+1, r24	; 0x01
	}


	return status;
     d36:	89 81       	ldd	r24, Y+1	; 0x01

}
     d38:	26 96       	adiw	r28, 0x06	; 6
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <DIO_read>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			OUT: ppinState : pointer to the direction of the pin HIGH/LOW.
 */
stdReturnType_t DIO_read(portX_t PortName, pinX_t pinNum, pinState_t * ppinState)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	27 97       	sbiw	r28, 0x07	; 7
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	8a 83       	std	Y+2, r24	; 0x02
     d60:	6b 83       	std	Y+3, r22	; 0x03
     d62:	5d 83       	std	Y+5, r21	; 0x05
     d64:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01

    /*@TODO: Validation of input */
	if(NULL != ppinState)
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	9d 81       	ldd	r25, Y+5	; 0x05
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	09 f4       	brne	.+2      	; 0xd74 <DIO_read+0x2a>
     d72:	78 c0       	rjmp	.+240    	; 0xe64 <DIO_read+0x11a>
	{

		switch(PortName)
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	3f 83       	std	Y+7, r19	; 0x07
     d7c:	2e 83       	std	Y+6, r18	; 0x06
     d7e:	4e 81       	ldd	r20, Y+6	; 0x06
     d80:	5f 81       	ldd	r21, Y+7	; 0x07
     d82:	41 30       	cpi	r20, 0x01	; 1
     d84:	51 05       	cpc	r21, r1
     d86:	61 f1       	breq	.+88     	; 0xde0 <DIO_read+0x96>
     d88:	8e 81       	ldd	r24, Y+6	; 0x06
     d8a:	9f 81       	ldd	r25, Y+7	; 0x07
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	91 05       	cpc	r25, r1
     d90:	34 f4       	brge	.+12     	; 0xd9e <DIO_read+0x54>
     d92:	2e 81       	ldd	r18, Y+6	; 0x06
     d94:	3f 81       	ldd	r19, Y+7	; 0x07
     d96:	21 15       	cp	r18, r1
     d98:	31 05       	cpc	r19, r1
     d9a:	69 f0       	breq	.+26     	; 0xdb6 <DIO_read+0x6c>
     d9c:	60 c0       	rjmp	.+192    	; 0xe5e <DIO_read+0x114>
     d9e:	4e 81       	ldd	r20, Y+6	; 0x06
     da0:	5f 81       	ldd	r21, Y+7	; 0x07
     da2:	42 30       	cpi	r20, 0x02	; 2
     da4:	51 05       	cpc	r21, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <DIO_read+0x60>
     da8:	45 c0       	rjmp	.+138    	; 0xe34 <DIO_read+0xea>
     daa:	8e 81       	ldd	r24, Y+6	; 0x06
     dac:	9f 81       	ldd	r25, Y+7	; 0x07
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	91 05       	cpc	r25, r1
     db2:	59 f1       	breq	.+86     	; 0xe0a <DIO_read+0xc0>
     db4:	54 c0       	rjmp	.+168    	; 0xe5e <DIO_read+0x114>
		{
			case PORT_A:
				{
					*ppinState = (pinState_t) GET_BIT(PINA, pinNum);
     db6:	e9 e3       	ldi	r30, 0x39	; 57
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a9 01       	movw	r20, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_read+0x84>
     dca:	55 95       	asr	r21
     dcc:	47 95       	ror	r20
     dce:	8a 95       	dec	r24
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_read+0x80>
     dd2:	ca 01       	movw	r24, r20
     dd4:	81 70       	andi	r24, 0x01	; 1
     dd6:	ec 81       	ldd	r30, Y+4	; 0x04
     dd8:	fd 81       	ldd	r31, Y+5	; 0x05
     dda:	80 83       	st	Z, r24
					status = SUCCESS;
     ddc:	19 82       	std	Y+1, r1	; 0x01
     dde:	44 c0       	rjmp	.+136    	; 0xe68 <DIO_read+0x11e>
					break;
				}

			case PORT_B:
				{
					*ppinState = (pinState_t) GET_BIT(PINB, pinNum);
     de0:	e6 e3       	ldi	r30, 0x36	; 54
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_read+0xae>
     df4:	55 95       	asr	r21
     df6:	47 95       	ror	r20
     df8:	8a 95       	dec	r24
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_read+0xaa>
     dfc:	ca 01       	movw	r24, r20
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	ec 81       	ldd	r30, Y+4	; 0x04
     e02:	fd 81       	ldd	r31, Y+5	; 0x05
     e04:	80 83       	st	Z, r24
					status = SUCCESS;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	2f c0       	rjmp	.+94     	; 0xe68 <DIO_read+0x11e>
					break;
				}

			case PORT_C:
				{
					*ppinState = (pinState_t) GET_BIT(PINC, pinNum);
     e0a:	e3 e3       	ldi	r30, 0x33	; 51
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_read+0xd8>
     e1e:	55 95       	asr	r21
     e20:	47 95       	ror	r20
     e22:	8a 95       	dec	r24
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_read+0xd4>
     e26:	ca 01       	movw	r24, r20
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	ec 81       	ldd	r30, Y+4	; 0x04
     e2c:	fd 81       	ldd	r31, Y+5	; 0x05
     e2e:	80 83       	st	Z, r24
					status = SUCCESS;
     e30:	19 82       	std	Y+1, r1	; 0x01
     e32:	1a c0       	rjmp	.+52     	; 0xe68 <DIO_read+0x11e>
				}
				break;

			case PORT_D:
				{
					*ppinState = (pinState_t) GET_BIT(PIND, pinNum);
     e34:	e0 e3       	ldi	r30, 0x30	; 48
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_read+0x102>
     e48:	55 95       	asr	r21
     e4a:	47 95       	ror	r20
     e4c:	8a 95       	dec	r24
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_read+0xfe>
     e50:	ca 01       	movw	r24, r20
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	ec 81       	ldd	r30, Y+4	; 0x04
     e56:	fd 81       	ldd	r31, Y+5	; 0x05
     e58:	80 83       	st	Z, r24
					status = SUCCESS;
     e5a:	19 82       	std	Y+1, r1	; 0x01
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <DIO_read+0x11e>
					break;
				}

			default:
			status = ERROR;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_read+0x11e>
		}
	}
	else
	{
		status = ERROR;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
	}


		return status;
     e68:	89 81       	ldd	r24, Y+1	; 0x01

}
     e6a:	27 96       	adiw	r28, 0x07	; 7
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <DIO_write>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			IN: pinState : the value of the pin.
 */
stdReturnType_t DIO_write(portX_t portName, pinX_t pinNum, pinState_t pinState)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_write+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <DIO_write+0x8>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <DIO_write+0xa>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	8a 83       	std	Y+2, r24	; 0x02
     e8c:	6b 83       	std	Y+3, r22	; 0x03
     e8e:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO: Validation of input */

	switch(portName)
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	3e 83       	std	Y+6, r19	; 0x06
     e9c:	2d 83       	std	Y+5, r18	; 0x05
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <DIO_write+0x2e>
     ea8:	4b c0       	rjmp	.+150    	; 0xf40 <DIO_write+0xc4>
     eaa:	2d 81       	ldd	r18, Y+5	; 0x05
     eac:	3e 81       	ldd	r19, Y+6	; 0x06
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	2c f4       	brge	.+10     	; 0xebe <DIO_write+0x42>
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	71 f0       	breq	.+28     	; 0xed8 <DIO_write+0x5c>
     ebc:	dd c0       	rjmp	.+442    	; 0x1078 <DIO_write+0x1fc>
     ebe:	2d 81       	ldd	r18, Y+5	; 0x05
     ec0:	3e 81       	ldd	r19, Y+6	; 0x06
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <DIO_write+0x4e>
     ec8:	a3 c0       	rjmp	.+326    	; 0x1010 <DIO_write+0x194>
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <DIO_write+0x5a>
     ed4:	69 c0       	rjmp	.+210    	; 0xfa8 <DIO_write+0x12c>
     ed6:	d0 c0       	rjmp	.+416    	; 0x1078 <DIO_write+0x1fc>
	{
		case PORT_A:
			if(PIN_IS_LOW == pinState)
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	88 23       	and	r24, r24
     edc:	b1 f4       	brne	.+44     	; 0xf0a <DIO_write+0x8e>
			{
				CLR_BIT(PORTA, pinNum);
     ede:	ab e3       	ldi	r26, 0x3B	; 59
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	eb e3       	ldi	r30, 0x3B	; 59
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_write+0x80>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_write+0x7c>
     f00:	80 95       	com	r24
     f02:	84 23       	and	r24, r20
     f04:	8c 93       	st	X, r24
				status = SUCCESS;
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	b9 c0       	rjmp	.+370    	; 0x107c <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a9 f4       	brne	.+42     	; 0xf3a <DIO_write+0xbe>
			{
				SET_BIT(PORTA, pinNum);
     f10:	ab e3       	ldi	r26, 0x3B	; 59
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	eb e3       	ldi	r30, 0x3B	; 59
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_write+0xb2>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_write+0xae>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
				status = SUCCESS;
     f36:	19 82       	std	Y+1, r1	; 0x01
     f38:	a1 c0       	rjmp	.+322    	; 0x107c <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	9e c0       	rjmp	.+316    	; 0x107c <DIO_write+0x200>
			}
			break;

		case PORT_B:
			if(PIN_IS_LOW == pinState)
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	88 23       	and	r24, r24
     f44:	b1 f4       	brne	.+44     	; 0xf72 <DIO_write+0xf6>
			{
				CLR_BIT(PORTB, pinNum);
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_write+0xe8>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_write+0xe4>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
				status = SUCCESS;
     f6e:	19 82       	std	Y+1, r1	; 0x01
     f70:	85 c0       	rjmp	.+266    	; 0x107c <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	a9 f4       	brne	.+42     	; 0xfa2 <DIO_write+0x126>
			{
				SET_BIT(PORTB, pinNum);
     f78:	a8 e3       	ldi	r26, 0x38	; 56
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_write+0x11a>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_write+0x116>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
				status = SUCCESS;
     f9e:	19 82       	std	Y+1, r1	; 0x01
     fa0:	6d c0       	rjmp	.+218    	; 0x107c <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	6a c0       	rjmp	.+212    	; 0x107c <DIO_write+0x200>
			}
			break;

		case PORT_C:
			if(PIN_IS_LOW == pinState)
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	88 23       	and	r24, r24
     fac:	b1 f4       	brne	.+44     	; 0xfda <DIO_write+0x15e>
			{
				CLR_BIT(PORTC, pinNum);
     fae:	a5 e3       	ldi	r26, 0x35	; 53
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e3       	ldi	r30, 0x35	; 53
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_write+0x150>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_write+0x14c>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
				status = SUCCESS;
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	51 c0       	rjmp	.+162    	; 0x107c <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	a9 f4       	brne	.+42     	; 0x100a <DIO_write+0x18e>
			{
				SET_BIT(PORTC, pinNum);
     fe0:	a5 e3       	ldi	r26, 0x35	; 53
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e5 e3       	ldi	r30, 0x35	; 53
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_write+0x182>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_write+0x17e>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
				status = SUCCESS;
    1006:	19 82       	std	Y+1, r1	; 0x01
    1008:	39 c0       	rjmp	.+114    	; 0x107c <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	36 c0       	rjmp	.+108    	; 0x107c <DIO_write+0x200>
			}
			break;

		case PORT_D:
			if(PIN_IS_LOW == pinState)
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	88 23       	and	r24, r24
    1014:	b1 f4       	brne	.+44     	; 0x1042 <DIO_write+0x1c6>
			{
				CLR_BIT(PORTD, pinNum);
    1016:	a2 e3       	ldi	r26, 0x32	; 50
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e2 e3       	ldi	r30, 0x32	; 50
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_write+0x1b8>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_write+0x1b4>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
				status = SUCCESS;
    103e:	19 82       	std	Y+1, r1	; 0x01
    1040:	1d c0       	rjmp	.+58     	; 0x107c <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	a9 f4       	brne	.+42     	; 0x1072 <DIO_write+0x1f6>
			{
				SET_BIT(PORTD, pinNum);
    1048:	a2 e3       	ldi	r26, 0x32	; 50
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e2 e3       	ldi	r30, 0x32	; 50
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_write+0x1ea>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_write+0x1e6>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
				status = SUCCESS;
    106e:	19 82       	std	Y+1, r1	; 0x01
    1070:	05 c0       	rjmp	.+10     	; 0x107c <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_write+0x200>
			}
			break;

		default:
		status = ERROR;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01
	}

return status;
    107c:	89 81       	ldd	r24, Y+1	; 0x01

}
    107e:	26 96       	adiw	r28, 0x06	; 6
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <initSevenSegment>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t initSevenSegment(segments_t segmentID)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <initSevenSegment+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <initSevenSegment+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01

	switch(segmentID)
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3c 83       	std	Y+4, r19	; 0x04
    10aa:	2b 83       	std	Y+3, r18	; 0x03
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	31 f0       	breq	.+12     	; 0x10c0 <initSevenSegment+0x30>
    10b4:	2b 81       	ldd	r18, Y+3	; 0x03
    10b6:	3c 81       	ldd	r19, Y+4	; 0x04
    10b8:	21 30       	cpi	r18, 0x01	; 1
    10ba:	31 05       	cpc	r19, r1
    10bc:	a9 f1       	breq	.+106    	; 0x1128 <initSevenSegment+0x98>
    10be:	68 c0       	rjmp	.+208    	; 0x1190 <initSevenSegment+0x100>
	{
		case SEVEN_SEGMENT0:
			retStatus = DIO_init(SEVEN_SEG0_ENABLE_PORT, SEVEN_SEG0_ENABLE_PIN, OUTPUT);
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	41 e0       	ldi	r20, 0x01	; 1
    10c6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    10ca:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINA_PORT, SEVEN_SEG0_PINA_PIN, OUTPUT);
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	64 e0       	ldi	r22, 0x04	; 4
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    10d6:	98 2f       	mov	r25, r24
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	89 2b       	or	r24, r25
    10dc:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINB_PORT, SEVEN_SEG0_PINB_PIN, OUTPUT);
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	65 e0       	ldi	r22, 0x05	; 5
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    10e8:	98 2f       	mov	r25, r24
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	89 2b       	or	r24, r25
    10ee:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINC_PORT, SEVEN_SEG0_PINC_PIN, OUTPUT);
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	66 e0       	ldi	r22, 0x06	; 6
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    10fa:	98 2f       	mov	r25, r24
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	89 2b       	or	r24, r25
    1100:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PIND_PORT, SEVEN_SEG0_PIND_PIN, OUTPUT);
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	67 e0       	ldi	r22, 0x07	; 7
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    110c:	98 2f       	mov	r25, r24
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	89 2b       	or	r24, r25
    1112:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_DB_PORT, SEVEN_SEG0_DB_PIN, OUTPUT);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	41 e0       	ldi	r20, 0x01	; 1
    111a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    111e:	98 2f       	mov	r25, r24
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	89 2b       	or	r24, r25
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	36 c0       	rjmp	.+108    	; 0x1194 <initSevenSegment+0x104>
			break;

		case SEVEN_SEGMENT1:
			retStatus = DIO_init(SEVEN_SEG1_ENABLE_PORT, SEVEN_SEG1_ENABLE_PIN, OUTPUT);
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	63 e0       	ldi	r22, 0x03	; 3
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    1132:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINA_PORT, SEVEN_SEG1_PINA_PIN, OUTPUT);
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	64 e0       	ldi	r22, 0x04	; 4
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    113e:	98 2f       	mov	r25, r24
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	89 2b       	or	r24, r25
    1144:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINB_PORT, SEVEN_SEG1_PINB_PIN, OUTPUT);
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	65 e0       	ldi	r22, 0x05	; 5
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    1150:	98 2f       	mov	r25, r24
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	89 2b       	or	r24, r25
    1156:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINC_PORT, SEVEN_SEG1_PINC_PIN, OUTPUT);
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	66 e0       	ldi	r22, 0x06	; 6
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    1162:	98 2f       	mov	r25, r24
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	89 2b       	or	r24, r25
    1168:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PIND_PORT, SEVEN_SEG1_PIND_PIN, OUTPUT);
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	67 e0       	ldi	r22, 0x07	; 7
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    1174:	98 2f       	mov	r25, r24
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	89 2b       	or	r24, r25
    117a:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_DB_PORT, SEVEN_SEG1_DB_PIN, OUTPUT);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	41 e0       	ldi	r20, 0x01	; 1
    1182:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    1186:	98 2f       	mov	r25, r24
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	89 2b       	or	r24, r25
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <initSevenSegment+0x104>
			break;

		default:
			/* invalid segment ID*/
			retStatus = ERROR;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <controlSevenSegment>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: state : the state of seven segments ENABLED/DISABLED.
 *
 */
stdReturnType_t controlSevenSegment(segments_t segmentID, segmentState_t state)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <controlSevenSegment+0x6>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <controlSevenSegment+0x8>
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	8a 83       	std	Y+2, r24	; 0x02
    11b4:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus;

	switch(segmentID)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3d 83       	std	Y+5, r19	; 0x05
    11be:	2c 83       	std	Y+4, r18	; 0x04
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <controlSevenSegment+0x30>
    11c8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ca:	3d 81       	ldd	r19, Y+5	; 0x05
    11cc:	21 30       	cpi	r18, 0x01	; 1
    11ce:	31 05       	cpc	r19, r1
    11d0:	41 f0       	breq	.+16     	; 0x11e2 <controlSevenSegment+0x3e>
    11d2:	0e c0       	rjmp	.+28     	; 0x11f0 <controlSevenSegment+0x4c>
	{
		case SEVEN_SEGMENT0:
			DIO_write(SEVEN_SEG0_ENABLE_PORT, SEVEN_SEG0_ENABLE_PIN, (pinState_t)state);
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	4b 81       	ldd	r20, Y+3	; 0x03
    11da:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
			retStatus = SUCCESS;
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <controlSevenSegment+0x50>
			break;

		case SEVEN_SEGMENT1:
			DIO_write(SEVEN_SEG1_ENABLE_PORT, SEVEN_SEG1_ENABLE_PIN, (pinState_t)state);
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	63 e0       	ldi	r22, 0x03	; 3
    11e6:	4b 81       	ldd	r20, Y+3	; 0x03
    11e8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
			retStatus = SUCCESS;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <controlSevenSegment+0x50>
			break;

		default:
			retStatus = ERROR;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return retStatus;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <writeToSevenSegment>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: num : the num to write and should be [0:9].
 *
 */
stdReturnType_t writeToSevenSegment(segments_t segmentID, SegmentNumbers_t num)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <writeToSevenSegment+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <writeToSevenSegment+0x8>
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	6b 83       	std	Y+3, r22	; 0x03
 stdReturnType_t retStatus = ERROR;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01

	switch(segmentID)
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	3d 83       	std	Y+5, r19	; 0x05
    1224:	2c 83       	std	Y+4, r18	; 0x04
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	31 f0       	breq	.+12     	; 0x123a <writeToSevenSegment+0x34>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	21 30       	cpi	r18, 0x01	; 1
    1234:	31 05       	cpc	r19, r1
    1236:	a9 f1       	breq	.+106    	; 0x12a2 <writeToSevenSegment+0x9c>
    1238:	68 c0       	rjmp	.+208    	; 0x130a <writeToSevenSegment+0x104>
	{
		case SEVEN_SEGMENT0:
			retStatus  = DIO_write(SEVEN_SEG0_PINA_PORT, SEVEN_SEG0_PINA_PIN, GET_PIN_VAL(num, 0));
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	98 2f       	mov	r25, r24
    123e:	91 70       	andi	r25, 0x01	; 1
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	64 e0       	ldi	r22, 0x04	; 4
    1244:	49 2f       	mov	r20, r25
    1246:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    124a:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PINB_PORT, SEVEN_SEG0_PINB_PIN, GET_PIN_VAL(num, 1));
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	86 95       	lsr	r24
    1250:	98 2f       	mov	r25, r24
    1252:	91 70       	andi	r25, 0x01	; 1
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	65 e0       	ldi	r22, 0x05	; 5
    1258:	49 2f       	mov	r20, r25
    125a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    125e:	98 2f       	mov	r25, r24
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	89 2b       	or	r24, r25
    1264:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PINC_PORT, SEVEN_SEG0_PINC_PIN, GET_PIN_VAL(num, 2));
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	86 95       	lsr	r24
    126a:	86 95       	lsr	r24
    126c:	98 2f       	mov	r25, r24
    126e:	91 70       	andi	r25, 0x01	; 1
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	66 e0       	ldi	r22, 0x06	; 6
    1274:	49 2f       	mov	r20, r25
    1276:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    127a:	98 2f       	mov	r25, r24
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	89 2b       	or	r24, r25
    1280:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PIND_PORT, SEVEN_SEG0_PIND_PIN, GET_PIN_VAL(num, 3));
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	86 95       	lsr	r24
    1286:	86 95       	lsr	r24
    1288:	86 95       	lsr	r24
    128a:	98 2f       	mov	r25, r24
    128c:	91 70       	andi	r25, 0x01	; 1
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	67 e0       	ldi	r22, 0x07	; 7
    1292:	49 2f       	mov	r20, r25
    1294:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1298:	98 2f       	mov	r25, r24
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	89 2b       	or	r24, r25
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	36 c0       	rjmp	.+108    	; 0x130e <writeToSevenSegment+0x108>
			break;

		case SEVEN_SEGMENT1:
			retStatus  = DIO_write(SEVEN_SEG1_PINA_PORT, SEVEN_SEG1_PINA_PIN, GET_PIN_VAL(num, 0));
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	98 2f       	mov	r25, r24
    12a6:	91 70       	andi	r25, 0x01	; 1
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	64 e0       	ldi	r22, 0x04	; 4
    12ac:	49 2f       	mov	r20, r25
    12ae:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    12b2:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PINB_PORT, SEVEN_SEG1_PINB_PIN, GET_PIN_VAL(num, 1));
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	86 95       	lsr	r24
    12b8:	98 2f       	mov	r25, r24
    12ba:	91 70       	andi	r25, 0x01	; 1
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	65 e0       	ldi	r22, 0x05	; 5
    12c0:	49 2f       	mov	r20, r25
    12c2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    12c6:	98 2f       	mov	r25, r24
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	89 2b       	or	r24, r25
    12cc:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PINC_PORT, SEVEN_SEG1_PINC_PIN, GET_PIN_VAL(num, 2));
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	86 95       	lsr	r24
    12d2:	86 95       	lsr	r24
    12d4:	98 2f       	mov	r25, r24
    12d6:	91 70       	andi	r25, 0x01	; 1
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	66 e0       	ldi	r22, 0x06	; 6
    12dc:	49 2f       	mov	r20, r25
    12de:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    12e2:	98 2f       	mov	r25, r24
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	89 2b       	or	r24, r25
    12e8:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PIND_PORT, SEVEN_SEG1_PIND_PIN, GET_PIN_VAL(num, 3));
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	86 95       	lsr	r24
    12ee:	86 95       	lsr	r24
    12f0:	86 95       	lsr	r24
    12f2:	98 2f       	mov	r25, r24
    12f4:	91 70       	andi	r25, 0x01	; 1
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	67 e0       	ldi	r22, 0x07	; 7
    12fa:	49 2f       	mov	r20, r25
    12fc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1300:	98 2f       	mov	r25, r24
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	89 2b       	or	r24, r25
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	02 c0       	rjmp	.+4      	; 0x130e <writeToSevenSegment+0x108>
			break;

		default:
			retStatus = ERROR;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

 return retStatus;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <writeDecimalPoint>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: state : the state of decimal point.
 *
 */
static stdReturnType_t writeDecimalPoint(segments_t segmentID, segmentState_t state)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <writeDecimalPoint+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <writeDecimalPoint+0x8>
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01

		switch(segmentID)
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3d 83       	std	Y+5, r19	; 0x05
    133e:	2c 83       	std	Y+4, r18	; 0x04
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <writeDecimalPoint+0x34>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	21 30       	cpi	r18, 0x01	; 1
    134e:	31 05       	cpc	r19, r1
    1350:	41 f0       	breq	.+16     	; 0x1362 <writeDecimalPoint+0x42>
    1352:	0e c0       	rjmp	.+28     	; 0x1370 <writeDecimalPoint+0x50>
		{
			case SEVEN_SEGMENT0:
				retStatus  = DIO_write(SEVEN_SEG0_DB_PORT, SEVEN_SEG0_DB_PIN, state);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	4b 81       	ldd	r20, Y+3	; 0x03
    135a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <writeDecimalPoint+0x54>
				break;

			case SEVEN_SEGMENT1:
				retStatus  = DIO_write(SEVEN_SEG1_DB_PORT, SEVEN_SEG1_DB_PIN, state);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	4b 81       	ldd	r20, Y+3	; 0x03
    1368:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <writeDecimalPoint+0x54>
				break;

			default:
				retStatus = ERROR;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
				break;
		}

	 return retStatus;
    1374:	89 81       	ldd	r24, Y+1	; 0x01
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <TurnOnDecimalPoint>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t TurnOnDecimalPoint(segments_t segmentID)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
	return writeDecimalPoint(segmentID, SEGMENT_ENABLED);
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	0e 94 90 09 	call	0x1320	; 0x1320 <writeDecimalPoint>
}
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <TurnOffDecimalPoint>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t TurnOffDecimalPoint(segments_t segmentID)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	0f 92       	push	r0
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	89 83       	std	Y+1, r24	; 0x01
	return writeDecimalPoint(segmentID, SEGMANT_DISABLED);
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	0e 94 90 09 	call	0x1320	; 0x1320 <writeDecimalPoint>
}
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <initLed>:
 * params:
 * 			IN: ledID : the name of the needed LED.
 *
 */
stdReturnType_t initLed(ledX_t ledID)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <initLed+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <initLed+0x8>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01

	switch(ledID)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3c 83       	std	Y+4, r19	; 0x04
    13d8:	2b 83       	std	Y+3, r18	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	81 f0       	breq	.+32     	; 0x1404 <initLed+0x46>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	91 f0       	breq	.+36     	; 0x1412 <initLed+0x54>
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	a9 f4       	brne	.+42     	; 0x1420 <initLed+0x62>
	{
		case LED0:
			retStatus = DIO_init(LED0_PORT, LED0_PIN, OUTPUT);
    13f6:	82 e0       	ldi	r24, 0x02	; 2
    13f8:	65 e0       	ldi	r22, 0x05	; 5
    13fa:	41 e0       	ldi	r20, 0x01	; 1
    13fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	10 c0       	rjmp	.+32     	; 0x1424 <initLed+0x66>
			break;

		case LED1:
			retStatus = DIO_init(LED1_PORT, LED1_PIN, OUTPUT);
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	66 e0       	ldi	r22, 0x06	; 6
    1408:	41 e0       	ldi	r20, 0x01	; 1
    140a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <initLed+0x66>
			break;

		case LED2:
			retStatus = DIO_init(LED2_PORT, LED2_PIN, OUTPUT);
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	67 e0       	ldi	r22, 0x07	; 7
    1416:	41 e0       	ldi	r20, 0x01	; 1
    1418:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <initLed+0x66>
			break;

		default:
			/* ERROR given ledID is not supported */
			retStatus = ERROR;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <changeLedState>:
 * params:
 * 			IN: ledID : the name of the needed LED.
 * 			IN: pinState : the value of the pin HIGH/LOW.
 */
static stdReturnType_t changeLedState(ledX_t ledID, pinState_t pinState)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	00 d0       	rcall	.+0      	; 0x143a <changeLedState+0x6>
    143a:	00 d0       	rcall	.+0      	; 0x143c <changeLedState+0x8>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO : check pinState */

	switch(ledID)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3d 83       	std	Y+5, r19	; 0x05
    1452:	2c 83       	std	Y+4, r18	; 0x04
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	81 f0       	breq	.+32     	; 0x147e <changeLedState+0x4a>
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	91 f0       	breq	.+36     	; 0x148c <changeLedState+0x58>
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	a9 f4       	brne	.+42     	; 0x149a <changeLedState+0x66>
	{
		case LED0:
			retStatus = DIO_write(LED0_PORT, LED0_PIN, pinState);
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	65 e0       	ldi	r22, 0x05	; 5
    1474:	4b 81       	ldd	r20, Y+3	; 0x03
    1476:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	10 c0       	rjmp	.+32     	; 0x149e <changeLedState+0x6a>
			break;

		case LED1:
			retStatus = DIO_write(LED1_PORT, LED1_PIN, pinState);
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	66 e0       	ldi	r22, 0x06	; 6
    1482:	4b 81       	ldd	r20, Y+3	; 0x03
    1484:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	09 c0       	rjmp	.+18     	; 0x149e <changeLedState+0x6a>
			break;

		case LED2:
			retStatus = DIO_write(LED2_PORT, LED2_PIN, pinState);
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	67 e0       	ldi	r22, 0x07	; 7
    1490:	4b 81       	ldd	r20, Y+3	; 0x03
    1492:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	02 c0       	rjmp	.+4      	; 0x149e <changeLedState+0x6a>
			break;

		default:
			/* ERROR given ledID is not supported */
			retStatus = ERROR;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
			break;
	}


	return retStatus;
    149e:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <turnOnLed>:
 * brief: used to turn given LED ON.
 * params:
 * 			IN: ledID : the name of the needed LED.
 */
stdReturnType_t turnOnLed(ledX_t ledID)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	89 83       	std	Y+1, r24	; 0x01
	return changeLedState(ledID, PIN_IS_HIGH);
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <changeLedState>
}
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <turnOffLed>:
 * brief: used to turn given LED OFF.
 * params:
 * 			IN: ledID : the name of the needed LED.
 */
stdReturnType_t turnOffLed(ledX_t ledID)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	89 83       	std	Y+1, r24	; 0x01
	return changeLedState(ledID, PIN_IS_LOW);
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 1a 0a 	call	0x1434	; 0x1434 <changeLedState>
}
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <toogleLed>:

stdReturnType_t toogleLed(ledX_t ledID)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	6e 97       	sbiw	r28, 0x1e	; 30
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	8e 8f       	std	Y+30, r24	; 0x1e
	stdReturnType_t stats = ERROR;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	8d 8f       	std	Y+29, r24	; 0x1d
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e2       	ldi	r26, 0x20	; 32
    1508:	b1 e4       	ldi	r27, 0x41	; 65
    150a:	89 8f       	std	Y+25, r24	; 0x19
    150c:	9a 8f       	std	Y+26, r25	; 0x1a
    150e:	ab 8f       	std	Y+27, r26	; 0x1b
    1510:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1512:	69 8d       	ldd	r22, Y+25	; 0x19
    1514:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1516:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1518:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	4a e7       	ldi	r20, 0x7A	; 122
    1520:	55 e4       	ldi	r21, 0x45	; 69
    1522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8d 8b       	std	Y+21, r24	; 0x15
    152c:	9e 8b       	std	Y+22, r25	; 0x16
    152e:	af 8b       	std	Y+23, r26	; 0x17
    1530:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1532:	6d 89       	ldd	r22, Y+21	; 0x15
    1534:	7e 89       	ldd	r23, Y+22	; 0x16
    1536:	8f 89       	ldd	r24, Y+23	; 0x17
    1538:	98 8d       	ldd	r25, Y+24	; 0x18
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1546:	88 23       	and	r24, r24
    1548:	2c f4       	brge	.+10     	; 0x1554 <toogleLed+0x6c>
		__ticks = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9c 8b       	std	Y+20, r25	; 0x14
    1550:	8b 8b       	std	Y+19, r24	; 0x13
    1552:	3f c0       	rjmp	.+126    	; 0x15d2 <toogleLed+0xea>
	else if (__tmp > 65535)
    1554:	6d 89       	ldd	r22, Y+21	; 0x15
    1556:	7e 89       	ldd	r23, Y+22	; 0x16
    1558:	8f 89       	ldd	r24, Y+23	; 0x17
    155a:	98 8d       	ldd	r25, Y+24	; 0x18
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	57 e4       	ldi	r21, 0x47	; 71
    1564:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1568:	18 16       	cp	r1, r24
    156a:	4c f5       	brge	.+82     	; 0x15be <toogleLed+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156c:	69 8d       	ldd	r22, Y+25	; 0x19
    156e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e2       	ldi	r20, 0x20	; 32
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9c 8b       	std	Y+20, r25	; 0x14
    1592:	8b 8b       	std	Y+19, r24	; 0x13
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <toogleLed+0xcc>
    1596:	80 e9       	ldi	r24, 0x90	; 144
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	9a 8b       	std	Y+18, r25	; 0x12
    159c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    159e:	89 89       	ldd	r24, Y+17	; 0x11
    15a0:	9a 89       	ldd	r25, Y+18	; 0x12
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <toogleLed+0xba>
    15a6:	9a 8b       	std	Y+18, r25	; 0x12
    15a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	8b 89       	ldd	r24, Y+19	; 0x13
    15ac:	9c 89       	ldd	r25, Y+20	; 0x14
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9c 8b       	std	Y+20, r25	; 0x14
    15b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b4:	8b 89       	ldd	r24, Y+19	; 0x13
    15b6:	9c 89       	ldd	r25, Y+20	; 0x14
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f7       	brne	.-38     	; 0x1596 <toogleLed+0xae>
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <toogleLed+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15be:	6d 89       	ldd	r22, Y+21	; 0x15
    15c0:	7e 89       	ldd	r23, Y+22	; 0x16
    15c2:	8f 89       	ldd	r24, Y+23	; 0x17
    15c4:	98 8d       	ldd	r25, Y+24	; 0x18
    15c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9c 8b       	std	Y+20, r25	; 0x14
    15d0:	8b 8b       	std	Y+19, r24	; 0x13
    15d2:	8b 89       	ldd	r24, Y+19	; 0x13
    15d4:	9c 89       	ldd	r25, Y+20	; 0x14
    15d6:	98 8b       	std	Y+16, r25	; 0x10
    15d8:	8f 87       	std	Y+15, r24	; 0x0f
    15da:	8f 85       	ldd	r24, Y+15	; 0x0f
    15dc:	98 89       	ldd	r25, Y+16	; 0x10
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <toogleLed+0xf6>
    15e2:	98 8b       	std	Y+16, r25	; 0x10
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	turnOnLed(ledID);
    15e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15e8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <turnOnLed>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 e2       	ldi	r26, 0x20	; 32
    15f2:	b1 e4       	ldi	r27, 0x41	; 65
    15f4:	8b 87       	std	Y+11, r24	; 0x0b
    15f6:	9c 87       	std	Y+12, r25	; 0x0c
    15f8:	ad 87       	std	Y+13, r26	; 0x0d
    15fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1600:	8d 85       	ldd	r24, Y+13	; 0x0d
    1602:	9e 85       	ldd	r25, Y+14	; 0x0e
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	4a e7       	ldi	r20, 0x7A	; 122
    160a:	55 e4       	ldi	r21, 0x45	; 69
    160c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	8f 83       	std	Y+7, r24	; 0x07
    1616:	98 87       	std	Y+8, r25	; 0x08
    1618:	a9 87       	std	Y+9, r26	; 0x09
    161a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e8       	ldi	r20, 0x80	; 128
    162a:	5f e3       	ldi	r21, 0x3F	; 63
    162c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1630:	88 23       	and	r24, r24
    1632:	2c f4       	brge	.+10     	; 0x163e <toogleLed+0x156>
		__ticks = 1;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9e 83       	std	Y+6, r25	; 0x06
    163a:	8d 83       	std	Y+5, r24	; 0x05
    163c:	3f c0       	rjmp	.+126    	; 0x16bc <toogleLed+0x1d4>
	else if (__tmp > 65535)
    163e:	6f 81       	ldd	r22, Y+7	; 0x07
    1640:	78 85       	ldd	r23, Y+8	; 0x08
    1642:	89 85       	ldd	r24, Y+9	; 0x09
    1644:	9a 85       	ldd	r25, Y+10	; 0x0a
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	3f ef       	ldi	r19, 0xFF	; 255
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	57 e4       	ldi	r21, 0x47	; 71
    164e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1652:	18 16       	cp	r1, r24
    1654:	4c f5       	brge	.+82     	; 0x16a8 <toogleLed+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1656:	6b 85       	ldd	r22, Y+11	; 0x0b
    1658:	7c 85       	ldd	r23, Y+12	; 0x0c
    165a:	8d 85       	ldd	r24, Y+13	; 0x0d
    165c:	9e 85       	ldd	r25, Y+14	; 0x0e
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e2       	ldi	r20, 0x20	; 32
    1664:	51 e4       	ldi	r21, 0x41	; 65
    1666:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	9e 83       	std	Y+6, r25	; 0x06
    167c:	8d 83       	std	Y+5, r24	; 0x05
    167e:	0f c0       	rjmp	.+30     	; 0x169e <toogleLed+0x1b6>
    1680:	80 e9       	ldi	r24, 0x90	; 144
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <toogleLed+0x1a4>
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	69 f7       	brne	.-38     	; 0x1680 <toogleLed+0x198>
    16a6:	14 c0       	rjmp	.+40     	; 0x16d0 <toogleLed+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	9e 83       	std	Y+6, r25	; 0x06
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <toogleLed+0x1e0>
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
  stats|=	turnOffLed(ledID);
    16d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16d2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <turnOffLed>
    16d6:	98 2f       	mov	r25, r24
    16d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16da:	89 2b       	or	r24, r25
    16dc:	8d 8f       	std	Y+29, r24	; 0x1d
	stats = SUCCESS;
    16de:	1d 8e       	std	Y+29, r1	; 0x1d
	return stats;
    16e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    16e2:	6e 96       	adiw	r28, 0x1e	; 30
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <LCD_outToDataLines>:

static stdReturnType_t LCD_sendCommand(u8 command);
static stdReturnType_t LCD_outToDataLines(u8 val);

static stdReturnType_t LCD_outToDataLines(u8 val)
{
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	c4 56       	subi	r28, 0x64	; 100
    1702:	d0 40       	sbci	r29, 0x00	; 0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	fe 01       	movw	r30, r28
    1710:	ec 59       	subi	r30, 0x9C	; 156
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 83       	st	Z, r24
	stdReturnType_t retStatus = ERROR;
    1716:	fe 01       	movw	r30, r28
    1718:	ed 59       	subi	r30, 0x9D	; 157
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	80 83       	st	Z, r24

	/* write data to LCD so RW=0 */
	retStatus = DIO_write(LCD_CTRL_LINES_PORT, LCD_RW_PIN, WRITE_DATA);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    172a:	fe 01       	movw	r30, r28
    172c:	ed 59       	subi	r30, 0x9D	; 157
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 83       	st	Z, r24
    1732:	fe 01       	movw	r30, r28
    1734:	e1 5a       	subi	r30, 0xA1	; 161
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a0 e8       	ldi	r26, 0x80	; 128
    173e:	bf e3       	ldi	r27, 0x3F	; 63
    1740:	80 83       	st	Z, r24
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	a2 83       	std	Z+2, r26	; 0x02
    1746:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1748:	8e 01       	movw	r16, r28
    174a:	05 5a       	subi	r16, 0xA5	; 165
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	fe 01       	movw	r30, r28
    1750:	e1 5a       	subi	r30, 0xA1	; 161
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a e7       	ldi	r20, 0x7A	; 122
    1762:	55 e4       	ldi	r21, 0x45	; 69
    1764:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	f8 01       	movw	r30, r16
    176e:	80 83       	st	Z, r24
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	a2 83       	std	Z+2, r26	; 0x02
    1774:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1776:	fe 01       	movw	r30, r28
    1778:	e5 5a       	subi	r30, 0xA5	; 165
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e8       	ldi	r20, 0x80	; 128
    178a:	5f e3       	ldi	r21, 0x3F	; 63
    178c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1790:	88 23       	and	r24, r24
    1792:	44 f4       	brge	.+16     	; 0x17a4 <LCD_outToDataLines+0xb0>
		__ticks = 1;
    1794:	fe 01       	movw	r30, r28
    1796:	e7 5a       	subi	r30, 0xA7	; 167
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	64 c0       	rjmp	.+200    	; 0x186c <LCD_outToDataLines+0x178>
	else if (__tmp > 65535)
    17a4:	fe 01       	movw	r30, r28
    17a6:	e5 5a       	subi	r30, 0xA5	; 165
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	57 e4       	ldi	r21, 0x47	; 71
    17ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17be:	18 16       	cp	r1, r24
    17c0:	0c f0       	brlt	.+2      	; 0x17c4 <LCD_outToDataLines+0xd0>
    17c2:	43 c0       	rjmp	.+134    	; 0x184a <LCD_outToDataLines+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c4:	fe 01       	movw	r30, r28
    17c6:	e1 5a       	subi	r30, 0xA1	; 161
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	8e 01       	movw	r16, r28
    17e4:	07 5a       	subi	r16, 0xA7	; 167
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	f8 01       	movw	r30, r16
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	1f c0       	rjmp	.+62     	; 0x183a <LCD_outToDataLines+0x146>
    17fc:	fe 01       	movw	r30, r28
    17fe:	e9 5a       	subi	r30, 0xA9	; 169
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	80 e9       	ldi	r24, 0x90	; 144
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
    180a:	fe 01       	movw	r30, r28
    180c:	e9 5a       	subi	r30, 0xA9	; 169
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <LCD_outToDataLines+0x120>
    1818:	fe 01       	movw	r30, r28
    181a:	e9 5a       	subi	r30, 0xA9	; 169
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	de 01       	movw	r26, r28
    1824:	a7 5a       	subi	r26, 0xA7	; 167
    1826:	bf 4f       	sbci	r27, 0xFF	; 255
    1828:	fe 01       	movw	r30, r28
    182a:	e7 5a       	subi	r30, 0xA7	; 167
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	11 96       	adiw	r26, 0x01	; 1
    1836:	9c 93       	st	X, r25
    1838:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	fe 01       	movw	r30, r28
    183c:	e7 5a       	subi	r30, 0xA7	; 167
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	d1 f6       	brne	.-76     	; 0x17fc <LCD_outToDataLines+0x108>
    1848:	27 c0       	rjmp	.+78     	; 0x1898 <LCD_outToDataLines+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	8e 01       	movw	r16, r28
    184c:	07 5a       	subi	r16, 0xA7	; 167
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	fe 01       	movw	r30, r28
    1852:	e5 5a       	subi	r30, 0xA5	; 165
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	f8 01       	movw	r30, r16
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
    186c:	de 01       	movw	r26, r28
    186e:	ab 5a       	subi	r26, 0xAB	; 171
    1870:	bf 4f       	sbci	r27, 0xFF	; 255
    1872:	fe 01       	movw	r30, r28
    1874:	e7 5a       	subi	r30, 0xA7	; 167
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	8d 93       	st	X+, r24
    187e:	9c 93       	st	X, r25
    1880:	fe 01       	movw	r30, r28
    1882:	eb 5a       	subi	r30, 0xAB	; 171
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_outToDataLines+0x196>
    188e:	fe 01       	movw	r30, r28
    1890:	eb 5a       	subi	r30, 0xAB	; 171
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	/* Enable LCD E=1 */
	retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, ENABLE_LCD);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	63 e0       	ldi	r22, 0x03	; 3
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    18a2:	98 2f       	mov	r25, r24
    18a4:	de 01       	movw	r26, r28
    18a6:	ad 59       	subi	r26, 0x9D	; 157
    18a8:	bf 4f       	sbci	r27, 0xFF	; 255
    18aa:	fe 01       	movw	r30, r28
    18ac:	ed 59       	subi	r30, 0x9D	; 157
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 81       	ld	r24, Z
    18b2:	89 2b       	or	r24, r25
    18b4:	8c 93       	st	X, r24
    18b6:	fe 01       	movw	r30, r28
    18b8:	ef 5a       	subi	r30, 0xAF	; 175
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e8       	ldi	r26, 0x80	; 128
    18c2:	bf e3       	ldi	r27, 0x3F	; 63
    18c4:	80 83       	st	Z, r24
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	a2 83       	std	Z+2, r26	; 0x02
    18ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	8e 01       	movw	r16, r28
    18ce:	03 5b       	subi	r16, 0xB3	; 179
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	fe 01       	movw	r30, r28
    18d4:	ef 5a       	subi	r30, 0xAF	; 175
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	4a e7       	ldi	r20, 0x7A	; 122
    18e6:	55 e4       	ldi	r21, 0x45	; 69
    18e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	f8 01       	movw	r30, r16
    18f2:	80 83       	st	Z, r24
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	a2 83       	std	Z+2, r26	; 0x02
    18f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18fa:	fe 01       	movw	r30, r28
    18fc:	e3 5b       	subi	r30, 0xB3	; 179
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	44 f4       	brge	.+16     	; 0x1928 <LCD_outToDataLines+0x234>
		__ticks = 1;
    1918:	fe 01       	movw	r30, r28
    191a:	e5 5b       	subi	r30, 0xB5	; 181
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
    1926:	64 c0       	rjmp	.+200    	; 0x19f0 <LCD_outToDataLines+0x2fc>
	else if (__tmp > 65535)
    1928:	fe 01       	movw	r30, r28
    192a:	e3 5b       	subi	r30, 0xB3	; 179
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1942:	18 16       	cp	r1, r24
    1944:	0c f0       	brlt	.+2      	; 0x1948 <LCD_outToDataLines+0x254>
    1946:	43 c0       	rjmp	.+134    	; 0x19ce <LCD_outToDataLines+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	fe 01       	movw	r30, r28
    194a:	ef 5a       	subi	r30, 0xAF	; 175
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8e 01       	movw	r16, r28
    1968:	05 5b       	subi	r16, 0xB5	; 181
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	f8 01       	movw	r30, r16
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
    197e:	1f c0       	rjmp	.+62     	; 0x19be <LCD_outToDataLines+0x2ca>
    1980:	fe 01       	movw	r30, r28
    1982:	e7 5b       	subi	r30, 0xB7	; 183
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 e9       	ldi	r24, 0x90	; 144
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
    198e:	fe 01       	movw	r30, r28
    1990:	e7 5b       	subi	r30, 0xB7	; 183
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 81       	ld	r24, Z
    1996:	91 81       	ldd	r25, Z+1	; 0x01
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_outToDataLines+0x2a4>
    199c:	fe 01       	movw	r30, r28
    199e:	e7 5b       	subi	r30, 0xB7	; 183
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	de 01       	movw	r26, r28
    19a8:	a5 5b       	subi	r26, 0xB5	; 181
    19aa:	bf 4f       	sbci	r27, 0xFF	; 255
    19ac:	fe 01       	movw	r30, r28
    19ae:	e5 5b       	subi	r30, 0xB5	; 181
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	11 96       	adiw	r26, 0x01	; 1
    19ba:	9c 93       	st	X, r25
    19bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	fe 01       	movw	r30, r28
    19c0:	e5 5b       	subi	r30, 0xB5	; 181
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	d1 f6       	brne	.-76     	; 0x1980 <LCD_outToDataLines+0x28c>
    19cc:	27 c0       	rjmp	.+78     	; 0x1a1c <LCD_outToDataLines+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	8e 01       	movw	r16, r28
    19d0:	05 5b       	subi	r16, 0xB5	; 181
    19d2:	1f 4f       	sbci	r17, 0xFF	; 255
    19d4:	fe 01       	movw	r30, r28
    19d6:	e3 5b       	subi	r30, 0xB3	; 179
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	f8 01       	movw	r30, r16
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	de 01       	movw	r26, r28
    19f2:	a9 5b       	subi	r26, 0xB9	; 185
    19f4:	bf 4f       	sbci	r27, 0xFF	; 255
    19f6:	fe 01       	movw	r30, r28
    19f8:	e5 5b       	subi	r30, 0xB5	; 181
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	8d 93       	st	X+, r24
    1a02:	9c 93       	st	X, r25
    1a04:	fe 01       	movw	r30, r28
    1a06:	e9 5b       	subi	r30, 0xB9	; 185
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_outToDataLines+0x31a>
    1a12:	fe 01       	movw	r30, r28
    1a14:	e9 5b       	subi	r30, 0xB9	; 185
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	 #if (LCD_DATA_BITS_MODE == 4)
		/* First output the highest 4 bits of the required command to the data bus D4:D7 */
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB4_PIN, (pinState_t)GET_BIT(val,4));
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ec 59       	subi	r30, 0x9C	; 156
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	82 95       	swap	r24
    1a26:	8f 70       	andi	r24, 0x0F	; 15
    1a28:	98 2f       	mov	r25, r24
    1a2a:	91 70       	andi	r25, 0x01	; 1
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	64 e0       	ldi	r22, 0x04	; 4
    1a30:	49 2f       	mov	r20, r25
    1a32:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1a36:	98 2f       	mov	r25, r24
    1a38:	de 01       	movw	r26, r28
    1a3a:	ad 59       	subi	r26, 0x9D	; 157
    1a3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ed 59       	subi	r30, 0x9D	; 157
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	80 81       	ld	r24, Z
    1a46:	89 2b       	or	r24, r25
    1a48:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB5_PIN, (pinState_t)GET_BIT(val,5));
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	ec 59       	subi	r30, 0x9C	; 156
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 81       	ld	r24, Z
    1a52:	82 95       	swap	r24
    1a54:	86 95       	lsr	r24
    1a56:	87 70       	andi	r24, 0x07	; 7
    1a58:	98 2f       	mov	r25, r24
    1a5a:	91 70       	andi	r25, 0x01	; 1
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	65 e0       	ldi	r22, 0x05	; 5
    1a60:	49 2f       	mov	r20, r25
    1a62:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1a66:	98 2f       	mov	r25, r24
    1a68:	de 01       	movw	r26, r28
    1a6a:	ad 59       	subi	r26, 0x9D	; 157
    1a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ed 59       	subi	r30, 0x9D	; 157
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 81       	ld	r24, Z
    1a76:	89 2b       	or	r24, r25
    1a78:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB6_PIN, (pinState_t)GET_BIT(val,6));
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	ec 59       	subi	r30, 0x9C	; 156
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	82 95       	swap	r24
    1a84:	86 95       	lsr	r24
    1a86:	86 95       	lsr	r24
    1a88:	83 70       	andi	r24, 0x03	; 3
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	91 70       	andi	r25, 0x01	; 1
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	66 e0       	ldi	r22, 0x06	; 6
    1a92:	49 2f       	mov	r20, r25
    1a94:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1a98:	98 2f       	mov	r25, r24
    1a9a:	de 01       	movw	r26, r28
    1a9c:	ad 59       	subi	r26, 0x9D	; 157
    1a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	ed 59       	subi	r30, 0x9D	; 157
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	89 2b       	or	r24, r25
    1aaa:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB7_PIN, (pinState_t)GET_BIT(val,7));
    1aac:	fe 01       	movw	r30, r28
    1aae:	ec 59       	subi	r30, 0x9C	; 156
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	99 27       	eor	r25, r25
    1aba:	99 1f       	adc	r25, r25
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	67 e0       	ldi	r22, 0x07	; 7
    1ac0:	49 2f       	mov	r20, r25
    1ac2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	de 01       	movw	r26, r28
    1aca:	ad 59       	subi	r26, 0x9D	; 157
    1acc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ed 59       	subi	r30, 0x9D	; 157
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	89 2b       	or	r24, r25
    1ad8:	8c 93       	st	X, r24
    1ada:	fe 01       	movw	r30, r28
    1adc:	ed 5b       	subi	r30, 0xBD	; 189
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e8       	ldi	r26, 0x80	; 128
    1ae6:	bf e3       	ldi	r27, 0x3F	; 63
    1ae8:	80 83       	st	Z, r24
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	a2 83       	std	Z+2, r26	; 0x02
    1aee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	8e 01       	movw	r16, r28
    1af2:	01 5c       	subi	r16, 0xC1	; 193
    1af4:	1f 4f       	sbci	r17, 0xFF	; 255
    1af6:	fe 01       	movw	r30, r28
    1af8:	ed 5b       	subi	r30, 0xBD	; 189
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	60 81       	ld	r22, Z
    1afe:	71 81       	ldd	r23, Z+1	; 0x01
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	93 81       	ldd	r25, Z+3	; 0x03
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a e7       	ldi	r20, 0x7A	; 122
    1b0a:	55 e4       	ldi	r21, 0x45	; 69
    1b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	f8 01       	movw	r30, r16
    1b16:	80 83       	st	Z, r24
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	a2 83       	std	Z+2, r26	; 0x02
    1b1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b1e:	fe 01       	movw	r30, r28
    1b20:	ff 96       	adiw	r30, 0x3f	; 63
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e8       	ldi	r20, 0x80	; 128
    1b30:	5f e3       	ldi	r21, 0x3F	; 63
    1b32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b36:	88 23       	and	r24, r24
    1b38:	2c f4       	brge	.+10     	; 0x1b44 <LCD_outToDataLines+0x450>
		__ticks = 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9e af       	std	Y+62, r25	; 0x3e
    1b40:	8d af       	std	Y+61, r24	; 0x3d
    1b42:	46 c0       	rjmp	.+140    	; 0x1bd0 <LCD_outToDataLines+0x4dc>
	else if (__tmp > 65535)
    1b44:	fe 01       	movw	r30, r28
    1b46:	ff 96       	adiw	r30, 0x3f	; 63
    1b48:	60 81       	ld	r22, Z
    1b4a:	71 81       	ldd	r23, Z+1	; 0x01
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	64 f5       	brge	.+88     	; 0x1bb8 <LCD_outToDataLines+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	fe 01       	movw	r30, r28
    1b62:	ed 5b       	subi	r30, 0xBD	; 189
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9e af       	std	Y+62, r25	; 0x3e
    1b8c:	8d af       	std	Y+61, r24	; 0x3d
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <LCD_outToDataLines+0x4ba>
    1b90:	80 e9       	ldi	r24, 0x90	; 144
    1b92:	91 e0       	ldi	r25, 0x01	; 1
    1b94:	9c af       	std	Y+60, r25	; 0x3c
    1b96:	8b af       	std	Y+59, r24	; 0x3b
    1b98:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b9a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_outToDataLines+0x4a8>
    1ba0:	9c af       	std	Y+60, r25	; 0x3c
    1ba2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	9e af       	std	Y+62, r25	; 0x3e
    1bac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <LCD_outToDataLines+0x49c>
    1bb6:	16 c0       	rjmp	.+44     	; 0x1be4 <LCD_outToDataLines+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ff 96       	adiw	r30, 0x3f	; 63
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9e af       	std	Y+62, r25	; 0x3e
    1bce:	8d af       	std	Y+61, r24	; 0x3d
    1bd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bd4:	9a af       	std	Y+58, r25	; 0x3a
    1bd6:	89 af       	std	Y+57, r24	; 0x39
    1bd8:	89 ad       	ldd	r24, Y+57	; 0x39
    1bda:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_outToDataLines+0x4e8>
    1be0:	9a af       	std	Y+58, r25	; 0x3a
    1be2:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		/* disable LCD E=0 */
		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD);
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	63 e0       	ldi	r22, 0x03	; 3
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1bee:	98 2f       	mov	r25, r24
    1bf0:	de 01       	movw	r26, r28
    1bf2:	ad 59       	subi	r26, 0x9D	; 157
    1bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ed 59       	subi	r30, 0x9D	; 157
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 81       	ld	r24, Z
    1bfe:	89 2b       	or	r24, r25
    1c00:	8c 93       	st	X, r24
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	a0 e2       	ldi	r26, 0x20	; 32
    1c08:	b1 e4       	ldi	r27, 0x41	; 65
    1c0a:	8d ab       	std	Y+53, r24	; 0x35
    1c0c:	9e ab       	std	Y+54, r25	; 0x36
    1c0e:	af ab       	std	Y+55, r26	; 0x37
    1c10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c12:	6d a9       	ldd	r22, Y+53	; 0x35
    1c14:	7e a9       	ldd	r23, Y+54	; 0x36
    1c16:	8f a9       	ldd	r24, Y+55	; 0x37
    1c18:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	4a e7       	ldi	r20, 0x7A	; 122
    1c20:	55 e4       	ldi	r21, 0x45	; 69
    1c22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	89 ab       	std	Y+49, r24	; 0x31
    1c2c:	9a ab       	std	Y+50, r25	; 0x32
    1c2e:	ab ab       	std	Y+51, r26	; 0x33
    1c30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c32:	69 a9       	ldd	r22, Y+49	; 0x31
    1c34:	7a a9       	ldd	r23, Y+50	; 0x32
    1c36:	8b a9       	ldd	r24, Y+51	; 0x33
    1c38:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e8       	ldi	r20, 0x80	; 128
    1c40:	5f e3       	ldi	r21, 0x3F	; 63
    1c42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c46:	88 23       	and	r24, r24
    1c48:	2c f4       	brge	.+10     	; 0x1c54 <LCD_outToDataLines+0x560>
		__ticks = 1;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	98 ab       	std	Y+48, r25	; 0x30
    1c50:	8f a7       	std	Y+47, r24	; 0x2f
    1c52:	3f c0       	rjmp	.+126    	; 0x1cd2 <LCD_outToDataLines+0x5de>
	else if (__tmp > 65535)
    1c54:	69 a9       	ldd	r22, Y+49	; 0x31
    1c56:	7a a9       	ldd	r23, Y+50	; 0x32
    1c58:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	3f ef       	ldi	r19, 0xFF	; 255
    1c60:	4f e7       	ldi	r20, 0x7F	; 127
    1c62:	57 e4       	ldi	r21, 0x47	; 71
    1c64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c68:	18 16       	cp	r1, r24
    1c6a:	4c f5       	brge	.+82     	; 0x1cbe <LCD_outToDataLines+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c70:	8f a9       	ldd	r24, Y+55	; 0x37
    1c72:	98 ad       	ldd	r25, Y+56	; 0x38
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e2       	ldi	r20, 0x20	; 32
    1c7a:	51 e4       	ldi	r21, 0x41	; 65
    1c7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	bc 01       	movw	r22, r24
    1c86:	cd 01       	movw	r24, r26
    1c88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	98 ab       	std	Y+48, r25	; 0x30
    1c92:	8f a7       	std	Y+47, r24	; 0x2f
    1c94:	0f c0       	rjmp	.+30     	; 0x1cb4 <LCD_outToDataLines+0x5c0>
    1c96:	80 e9       	ldi	r24, 0x90	; 144
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	9e a7       	std	Y+46, r25	; 0x2e
    1c9c:	8d a7       	std	Y+45, r24	; 0x2d
    1c9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ca0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_outToDataLines+0x5ae>
    1ca6:	9e a7       	std	Y+46, r25	; 0x2e
    1ca8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1caa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cac:	98 a9       	ldd	r25, Y+48	; 0x30
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	98 ab       	std	Y+48, r25	; 0x30
    1cb2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	69 f7       	brne	.-38     	; 0x1c96 <LCD_outToDataLines+0x5a2>
    1cbc:	14 c0       	rjmp	.+40     	; 0x1ce6 <LCD_outToDataLines+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	98 ab       	std	Y+48, r25	; 0x30
    1cd0:	8f a7       	std	Y+47, r24	; 0x2f
    1cd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd6:	9c a7       	std	Y+44, r25	; 0x2c
    1cd8:	8b a7       	std	Y+43, r24	; 0x2b
    1cda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_outToDataLines+0x5ea>
    1ce2:	9c a7       	std	Y+44, r25	; 0x2c
    1ce4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10); /* delay for processing Th = 13ns */

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, ENABLE_LCD); /* Enable LCD E=1 */
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1cf0:	98 2f       	mov	r25, r24
    1cf2:	de 01       	movw	r26, r28
    1cf4:	ad 59       	subi	r26, 0x9D	; 157
    1cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	ed 59       	subi	r30, 0x9D	; 157
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	89 2b       	or	r24, r25
    1d02:	8c 93       	st	X, r24
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e8       	ldi	r26, 0x80	; 128
    1d0a:	bf e3       	ldi	r27, 0x3F	; 63
    1d0c:	8f a3       	std	Y+39, r24	; 0x27
    1d0e:	98 a7       	std	Y+40, r25	; 0x28
    1d10:	a9 a7       	std	Y+41, r26	; 0x29
    1d12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	6f a1       	ldd	r22, Y+39	; 0x27
    1d16:	78 a5       	ldd	r23, Y+40	; 0x28
    1d18:	89 a5       	ldd	r24, Y+41	; 0x29
    1d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a e7       	ldi	r20, 0x7A	; 122
    1d22:	55 e4       	ldi	r21, 0x45	; 69
    1d24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8b a3       	std	Y+35, r24	; 0x23
    1d2e:	9c a3       	std	Y+36, r25	; 0x24
    1d30:	ad a3       	std	Y+37, r26	; 0x25
    1d32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d34:	6b a1       	ldd	r22, Y+35	; 0x23
    1d36:	7c a1       	ldd	r23, Y+36	; 0x24
    1d38:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <LCD_outToDataLines+0x662>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9a a3       	std	Y+34, r25	; 0x22
    1d52:	89 a3       	std	Y+33, r24	; 0x21
    1d54:	3f c0       	rjmp	.+126    	; 0x1dd4 <LCD_outToDataLines+0x6e0>
	else if (__tmp > 65535)
    1d56:	6b a1       	ldd	r22, Y+35	; 0x23
    1d58:	7c a1       	ldd	r23, Y+36	; 0x24
    1d5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	4c f5       	brge	.+82     	; 0x1dc0 <LCD_outToDataLines+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d70:	78 a5       	ldd	r23, Y+40	; 0x28
    1d72:	89 a5       	ldd	r24, Y+41	; 0x29
    1d74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9a a3       	std	Y+34, r25	; 0x22
    1d94:	89 a3       	std	Y+33, r24	; 0x21
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <LCD_outToDataLines+0x6c2>
    1d98:	80 e9       	ldi	r24, 0x90	; 144
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	98 a3       	std	Y+32, r25	; 0x20
    1d9e:	8f 8f       	std	Y+31, r24	; 0x1f
    1da0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1da2:	98 a1       	ldd	r25, Y+32	; 0x20
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_outToDataLines+0x6b0>
    1da8:	98 a3       	std	Y+32, r25	; 0x20
    1daa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	89 a1       	ldd	r24, Y+33	; 0x21
    1dae:	9a a1       	ldd	r25, Y+34	; 0x22
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	9a a3       	std	Y+34, r25	; 0x22
    1db4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db6:	89 a1       	ldd	r24, Y+33	; 0x21
    1db8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <LCD_outToDataLines+0x6a4>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <LCD_outToDataLines+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9a a3       	std	Y+34, r25	; 0x22
    1dd2:	89 a3       	std	Y+33, r24	; 0x21
    1dd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dda:	8d 8f       	std	Y+29, r24	; 0x1d
    1ddc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_outToDataLines+0x6ec>
    1de4:	9e 8f       	std	Y+30, r25	; 0x1e
    1de6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		/* Secondly output the lowest 4 bits of the required command to the data bus D4:D7 */
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB4_PIN, (pinState_t)GET_BIT(val,0));
    1de8:	fe 01       	movw	r30, r28
    1dea:	ec 59       	subi	r30, 0x9C	; 156
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	98 2f       	mov	r25, r24
    1df2:	91 70       	andi	r25, 0x01	; 1
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	64 e0       	ldi	r22, 0x04	; 4
    1df8:	49 2f       	mov	r20, r25
    1dfa:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1dfe:	98 2f       	mov	r25, r24
    1e00:	de 01       	movw	r26, r28
    1e02:	ad 59       	subi	r26, 0x9D	; 157
    1e04:	bf 4f       	sbci	r27, 0xFF	; 255
    1e06:	fe 01       	movw	r30, r28
    1e08:	ed 59       	subi	r30, 0x9D	; 157
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	89 2b       	or	r24, r25
    1e10:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB5_PIN, (pinState_t)GET_BIT(val,1));
    1e12:	fe 01       	movw	r30, r28
    1e14:	ec 59       	subi	r30, 0x9C	; 156
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	86 95       	lsr	r24
    1e1c:	98 2f       	mov	r25, r24
    1e1e:	91 70       	andi	r25, 0x01	; 1
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	65 e0       	ldi	r22, 0x05	; 5
    1e24:	49 2f       	mov	r20, r25
    1e26:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1e2a:	98 2f       	mov	r25, r24
    1e2c:	de 01       	movw	r26, r28
    1e2e:	ad 59       	subi	r26, 0x9D	; 157
    1e30:	bf 4f       	sbci	r27, 0xFF	; 255
    1e32:	fe 01       	movw	r30, r28
    1e34:	ed 59       	subi	r30, 0x9D	; 157
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	80 81       	ld	r24, Z
    1e3a:	89 2b       	or	r24, r25
    1e3c:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB6_PIN, (pinState_t)GET_BIT(val,2));
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ec 59       	subi	r30, 0x9C	; 156
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	86 95       	lsr	r24
    1e48:	86 95       	lsr	r24
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	91 70       	andi	r25, 0x01	; 1
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	66 e0       	ldi	r22, 0x06	; 6
    1e52:	49 2f       	mov	r20, r25
    1e54:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1e58:	98 2f       	mov	r25, r24
    1e5a:	de 01       	movw	r26, r28
    1e5c:	ad 59       	subi	r26, 0x9D	; 157
    1e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	ed 59       	subi	r30, 0x9D	; 157
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	89 2b       	or	r24, r25
    1e6a:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB7_PIN, (pinState_t)GET_BIT(val,3));
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ec 59       	subi	r30, 0x9C	; 156
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	86 95       	lsr	r24
    1e76:	86 95       	lsr	r24
    1e78:	86 95       	lsr	r24
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	91 70       	andi	r25, 0x01	; 1
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	67 e0       	ldi	r22, 0x07	; 7
    1e82:	49 2f       	mov	r20, r25
    1e84:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1e88:	98 2f       	mov	r25, r24
    1e8a:	de 01       	movw	r26, r28
    1e8c:	ad 59       	subi	r26, 0x9D	; 157
    1e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	ed 59       	subi	r30, 0x9D	; 157
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	89 2b       	or	r24, r25
    1e9a:	8c 93       	st	X, r24
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e8       	ldi	r26, 0x80	; 128
    1ea2:	bf e3       	ldi	r27, 0x3F	; 63
    1ea4:	89 8f       	std	Y+25, r24	; 0x19
    1ea6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ea8:	ab 8f       	std	Y+27, r26	; 0x1b
    1eaa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	69 8d       	ldd	r22, Y+25	; 0x19
    1eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	4a e7       	ldi	r20, 0x7A	; 122
    1eba:	55 e4       	ldi	r21, 0x45	; 69
    1ebc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	8d 8b       	std	Y+21, r24	; 0x15
    1ec6:	9e 8b       	std	Y+22, r25	; 0x16
    1ec8:	af 8b       	std	Y+23, r26	; 0x17
    1eca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ece:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <LCD_outToDataLines+0x7fa>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	8b 8b       	std	Y+19, r24	; 0x13
    1eec:	3f c0       	rjmp	.+126    	; 0x1f6c <LCD_outToDataLines+0x878>
	else if (__tmp > 65535)
    1eee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	4c f5       	brge	.+82     	; 0x1f58 <LCD_outToDataLines+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f06:	69 8d       	ldd	r22, Y+25	; 0x19
    1f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e2       	ldi	r20, 0x20	; 32
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9c 8b       	std	Y+20, r25	; 0x14
    1f2c:	8b 8b       	std	Y+19, r24	; 0x13
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <LCD_outToDataLines+0x85a>
    1f30:	80 e9       	ldi	r24, 0x90	; 144
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	9a 8b       	std	Y+18, r25	; 0x12
    1f36:	89 8b       	std	Y+17, r24	; 0x11
    1f38:	89 89       	ldd	r24, Y+17	; 0x11
    1f3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_outToDataLines+0x848>
    1f40:	9a 8b       	std	Y+18, r25	; 0x12
    1f42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	9c 8b       	std	Y+20, r25	; 0x14
    1f4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f50:	9c 89       	ldd	r25, Y+20	; 0x14
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <LCD_outToDataLines+0x83c>
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <LCD_outToDataLines+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9c 8b       	std	Y+20, r25	; 0x14
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
    1f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f70:	98 8b       	std	Y+16, r25	; 0x10
    1f72:	8f 87       	std	Y+15, r24	; 0x0f
    1f74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f76:	98 89       	ldd	r25, Y+16	; 0x10
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_outToDataLines+0x884>
    1f7c:	98 8b       	std	Y+16, r25	; 0x10
    1f7e:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD); /* disable LCD E=0 */
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	63 e0       	ldi	r22, 0x03	; 3
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	de 01       	movw	r26, r28
    1f8e:	ad 59       	subi	r26, 0x9D	; 157
    1f90:	bf 4f       	sbci	r27, 0xFF	; 255
    1f92:	fe 01       	movw	r30, r28
    1f94:	ed 59       	subi	r30, 0x9D	; 157
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	89 2b       	or	r24, r25
    1f9c:	8c 93       	st	X, r24
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a0 e8       	ldi	r26, 0x80	; 128
    1fa4:	bf e3       	ldi	r27, 0x3F	; 63
    1fa6:	8b 87       	std	Y+11, r24	; 0x0b
    1fa8:	9c 87       	std	Y+12, r25	; 0x0c
    1faa:	ad 87       	std	Y+13, r26	; 0x0d
    1fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a e7       	ldi	r20, 0x7A	; 122
    1fbc:	55 e4       	ldi	r21, 0x45	; 69
    1fbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8f 83       	std	Y+7, r24	; 0x07
    1fc8:	98 87       	std	Y+8, r25	; 0x08
    1fca:	a9 87       	std	Y+9, r26	; 0x09
    1fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <LCD_outToDataLines+0x8fc>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <LCD_outToDataLines+0x97a>
	else if (__tmp > 65535)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <LCD_outToDataLines+0x966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	6b 85       	ldd	r22, Y+11	; 0x0b
    200a:	7c 85       	ldd	r23, Y+12	; 0x0c
    200c:	8d 85       	ldd	r24, Y+13	; 0x0d
    200e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <LCD_outToDataLines+0x95c>
    2032:	80 e9       	ldi	r24, 0x90	; 144
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_outToDataLines+0x94a>
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <LCD_outToDataLines+0x93e>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <LCD_outToDataLines+0x98e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <LCD_outToDataLines+0x986>
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD); /* disable LCD E=0 *//* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif

	return retStatus;
    2082:	fe 01       	movw	r30, r28
    2084:	ed 59       	subi	r30, 0x9D	; 157
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
}
    208a:	cc 59       	subi	r28, 0x9C	; 156
    208c:	df 4f       	sbci	r29, 0xFF	; 255
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <LCD_sendCommand>:

static stdReturnType_t LCD_sendCommand(u8 command)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <LCD_sendCommand+0x6>
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	89 83       	std	Y+1, r24	; 0x01

	/* Sending instruction mode, RS=0 */
	retStatus = DIO_write(LCD_CTRL_LINES_PORT, LCD_RS_PIN, SELECT_INSTRUCTION_REGISTER);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    20bc:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_outToDataLines(command);
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_outToDataLines>
    20c4:	98 2f       	mov	r25, r24
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	89 2b       	or	r24, r25
    20ca:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <LCD_init>:

stdReturnType_t LCD_init(void)
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	0f 92       	push	r0
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
	stdReturnType_t retStatus = ERROR;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	89 83       	std	Y+1, r24	; 0x01

	/* Configure the control pins(E,RS,RW) as output pins */
	retStatus =  DIO_init(LCD_CTRL_LINES_PORT, LCD_E_PIN, OUTPUT);
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	63 e0       	ldi	r22, 0x03	; 3
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    20f0:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_CTRL_LINES_PORT, LCD_RS_PIN, OUTPUT);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    20fc:	98 2f       	mov	r25, r24
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	89 2b       	or	r24, r25
    2102:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_CTRL_LINES_PORT, LCD_RW_PIN, OUTPUT);
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    210e:	98 2f       	mov	r25, r24
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	89 2b       	or	r24, r25
    2114:	89 83       	std	Y+1, r24	; 0x01

	/* Configure the highest 4 data lines as output */
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB4_PIN, OUTPUT);
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	64 e0       	ldi	r22, 0x04	; 4
    211a:	41 e0       	ldi	r20, 0x01	; 1
    211c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2120:	98 2f       	mov	r25, r24
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	89 2b       	or	r24, r25
    2126:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB5_PIN, OUTPUT);
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	65 e0       	ldi	r22, 0x05	; 5
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2132:	98 2f       	mov	r25, r24
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	89 2b       	or	r24, r25
    2138:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB6_PIN, OUTPUT);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	66 e0       	ldi	r22, 0x06	; 6
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2144:	98 2f       	mov	r25, r24
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	89 2b       	or	r24, r25
    214a:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB7_PIN, OUTPUT);
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	67 e0       	ldi	r22, 0x07	; 7
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2156:	98 2f       	mov	r25, r24
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	89 2b       	or	r24, r25
    215c:	89 83       	std	Y+1, r24	; 0x01

	#if (LCD_DATA_BITS_MODE == 4)
	retStatus |= LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    215e:	82 e0       	ldi	r24, 0x02	; 2
    2160:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
    2164:	98 2f       	mov	r25, r24
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	89 2b       	or	r24, r25
    216a:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line LCD + 4-bit Data Mode + 5*7 dot display Mode */
    216c:	88 e2       	ldi	r24, 0x28	; 40
    216e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
    2172:	98 2f       	mov	r25, r24
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	89 2b       	or	r24, r25
    2178:	89 83       	std	Y+1, r24	; 0x01

	/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	retStatus |= LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
	#endif

	retStatus |= LCD_sendCommand(CURSOR_OFF); /* cursor off */
    217a:	8c e0       	ldi	r24, 0x0C	; 12
    217c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
    2180:	98 2f       	mov	r25, r24
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	89 2b       	or	r24, r25
    2186:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
    218e:	98 2f       	mov	r25, r24
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	89 2b       	or	r24, r25
    2194:	89 83       	std	Y+1, r24	; 0x01
	return retStatus;
    2196:	89 81       	ldd	r24, Y+1	; 0x01

}
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <LCD_clearScreen>:

stdReturnType_t LCD_clearScreen(void)
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CLEAR_COMMAND);
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
}
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <LCD_turnOnCursor>:

stdReturnType_t LCD_turnOnCursor(void)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CURSOR_ON);
    21bc:	8e e0       	ldi	r24, 0x0E	; 14
    21be:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
}
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <LCD_turnOffCursor>:

stdReturnType_t LCD_turnOffCursor(void)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CURSOR_OFF);
    21d0:	8c e0       	ldi	r24, 0x0C	; 12
    21d2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
}
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <LCD_displayCharacter>:

stdReturnType_t LCD_displayCharacter(u8 data)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <LCD_displayCharacter+0x6>
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	89 83       	std	Y+1, r24	; 0x01

	/* Sending data mode, RS=1 */
	retStatus  = DIO_write(LCD_CTRL_LINES_PORT, LCD_RS_PIN, SELECT_DATA_REGISTER);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    21f6:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_outToDataLines(data);
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_outToDataLines>
    21fe:	98 2f       	mov	r25, r24
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	89 2b       	or	r24, r25
    2204:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    2206:	89 81       	ldd	r24, Y+1	; 0x01
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LCD_displayString>:

stdReturnType_t LCD_displayString(const char * data)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <LCD_displayString+0x6>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = SUCCESS;
    2222:	19 82       	std	Y+1, r1	; 0x01
    2224:	0e c0       	rjmp	.+28     	; 0x2242 <LCD_displayString+0x30>
//		index++;
//	}

	while( '\0' != (*data) )
		{
			retStatus |= LCD_displayCharacter(*data);
    2226:	ea 81       	ldd	r30, Y+2	; 0x02
    2228:	fb 81       	ldd	r31, Y+3	; 0x03
    222a:	80 81       	ld	r24, Z
    222c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_displayCharacter>
    2230:	98 2f       	mov	r25, r24
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	89 2b       	or	r24, r25
    2236:	89 83       	std	Y+1, r24	; 0x01
			data++;
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	9b 83       	std	Y+3, r25	; 0x03
    2240:	8a 83       	std	Y+2, r24	; 0x02
//	{
//		retStatus |=  LCD_displayCharacter(data[index]);
//		index++;
//	}

	while( '\0' != (*data) )
    2242:	ea 81       	ldd	r30, Y+2	; 0x02
    2244:	fb 81       	ldd	r31, Y+3	; 0x03
    2246:	80 81       	ld	r24, Z
    2248:	88 23       	and	r24, r24
    224a:	69 f7       	brne	.-38     	; 0x2226 <LCD_displayString+0x14>
			retStatus |= LCD_displayCharacter(*data);
			data++;
		}


	return retStatus;
    224c:	89 81       	ldd	r24, Y+1	; 0x01

}
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <LCD_setCursorPos>:

stdReturnType_t  LCD_setCursorPos(u8 row, u8 col)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <LCD_setCursorPos+0x6>
    2260:	00 d0       	rcall	.+0      	; 0x2262 <LCD_setCursorPos+0x8>
    2262:	0f 92       	push	r0
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	8a 83       	std	Y+2, r24	; 0x02
    226a:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	89 83       	std	Y+1, r24	; 0x01

	switch (row)
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	3d 83       	std	Y+5, r19	; 0x05
    2278:	2c 83       	std	Y+4, r18	; 0x04
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	9d 81       	ldd	r25, Y+5	; 0x05
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	31 f0       	breq	.+12     	; 0x228e <LCD_setCursorPos+0x34>
    2282:	2c 81       	ldd	r18, Y+4	; 0x04
    2284:	3d 81       	ldd	r19, Y+5	; 0x05
    2286:	21 30       	cpi	r18, 0x01	; 1
    2288:	31 05       	cpc	r19, r1
    228a:	39 f0       	breq	.+14     	; 0x229a <LCD_setCursorPos+0x40>
    228c:	0c c0       	rjmp	.+24     	; 0x22a6 <LCD_setCursorPos+0x4c>
	{
		case 0:
			retStatus = LCD_sendCommand(SET_CURSOR_LOCATION_L1_START + col);
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	80 58       	subi	r24, 0x80	; 128
    2292:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	08 c0       	rjmp	.+16     	; 0x22aa <LCD_setCursorPos+0x50>
			break;
		case 1:
			retStatus = LCD_sendCommand(SET_CURSOR_LOCATION_L2_START + col);
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	80 54       	subi	r24, 0x40	; 64
    229e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <LCD_setCursorPos+0x50>
			break;
		default:
			retStatus = ERROR;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <LCD_displayString_rowCol>:

stdReturnType_t LCD_displayString_rowCol(const char * data, u8 row, u8 col)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <LCD_displayString_rowCol+0x6>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <LCD_displayString_rowCol+0x8>
    22c4:	0f 92       	push	r0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	9b 83       	std	Y+3, r25	; 0x03
    22cc:	8a 83       	std	Y+2, r24	; 0x02
    22ce:	6c 83       	std	Y+4, r22	; 0x04
    22d0:	4d 83       	std	Y+5, r20	; 0x05
	stdReturnType_t retStatus = ERROR;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	89 83       	std	Y+1, r24	; 0x01

	retStatus = LCD_setCursorPos(row, col);
    22d6:	8c 81       	ldd	r24, Y+4	; 0x04
    22d8:	6d 81       	ldd	r22, Y+5	; 0x05
    22da:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_setCursorPos>
    22de:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_displayString(data);
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	9b 81       	ldd	r25, Y+3	; 0x03
    22e4:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_displayString>
    22e8:	98 2f       	mov	r25, r24
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	89 2b       	or	r24, r25
    22ee:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <LCD_displayInteger>:

stdReturnType_t LCD_displayInteger(u16 val)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	63 97       	sbiw	r28, 0x13	; 19
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	9b 8b       	std	Y+19, r25	; 0x13
    2318:	8a 8b       	std	Y+18, r24	; 0x12
	stdReturnType_t retStatus = ERROR;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	89 83       	std	Y+1, r24	; 0x01

    char AsciiBuff[16]; /* The ASCII result */
    itoa(val, AsciiBuff,10); /* 10 means base 10 i.e. decimal */
    231e:	8a 89       	ldd	r24, Y+18	; 0x12
    2320:	9b 89       	ldd	r25, Y+19	; 0x13
    2322:	9e 01       	movw	r18, r28
    2324:	2e 5f       	subi	r18, 0xFE	; 254
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	b9 01       	movw	r22, r18
    232a:	4a e0       	ldi	r20, 0x0A	; 10
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <itoa>
    retStatus = LCD_displayString(AsciiBuff);
    2332:	ce 01       	movw	r24, r28
    2334:	02 96       	adiw	r24, 0x02	; 2
    2336:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_displayString>
    233a:	89 83       	std	Y+1, r24	; 0x01
// for(j = 0;j<i;j++)
// {
// 	LCD_displayCharacter(arr[i-1-j]+'0');
// }

    return retStatus;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
}
    233e:	63 96       	adiw	r28, 0x13	; 19
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <LCD_writeCustomChar>:

stdReturnType_t LCD_writeCustomChar(u8 * pData, u8 index)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <LCD_writeCustomChar+0x6>
    2356:	00 d0       	rcall	.+0      	; 0x2358 <LCD_writeCustomChar+0x8>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
    2362:	6d 83       	std	Y+5, r22	; 0x05
	stdReturnType_t retStatus = ERROR;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2368:	19 82       	std	Y+1, r1	; 0x01

	/* Set address in CGRAM */
	retStatus = LCD_sendCommand(CUSTOM_CHAR_RANGE_START | (index * 8));
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	88 0f       	add	r24, r24
    2376:	99 1f       	adc	r25, r25
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	80 64       	ori	r24, 0x40	; 64
    237e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_sendCommand>
    2382:	8a 83       	std	Y+2, r24	; 0x02
	/* Write received bytes in CGRAM */
	for(i = 0;i<8;i++)
    2384:	19 82       	std	Y+1, r1	; 0x01
    2386:	11 c0       	rjmp	.+34     	; 0x23aa <LCD_writeCustomChar+0x5a>
	{
		retStatus |= LCD_displayCharacter(*pData);
    2388:	eb 81       	ldd	r30, Y+3	; 0x03
    238a:	fc 81       	ldd	r31, Y+4	; 0x04
    238c:	80 81       	ld	r24, Z
    238e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_displayCharacter>
    2392:	98 2f       	mov	r25, r24
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	89 2b       	or	r24, r25
    2398:	8a 83       	std	Y+2, r24	; 0x02
		pData++;
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	9c 83       	std	Y+4, r25	; 0x04
    23a2:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;

	/* Set address in CGRAM */
	retStatus = LCD_sendCommand(CUSTOM_CHAR_RANGE_START | (index * 8));
	/* Write received bytes in CGRAM */
	for(i = 0;i<8;i++)
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	8f 5f       	subi	r24, 0xFF	; 255
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	88 30       	cpi	r24, 0x08	; 8
    23ae:	60 f3       	brcs	.-40     	; 0x2388 <LCD_writeCustomChar+0x38>
	{
		retStatus |= LCD_displayCharacter(*pData);
		pData++;
	}

	return retStatus;
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <LCD_displayCustomChar>:

stdReturnType_t LCD_displayCustomChar(u8 index,u8 row,u8 col)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <LCD_displayCustomChar+0x6>
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <LCD_displayCustomChar+0x8>
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	8a 83       	std	Y+2, r24	; 0x02
    23d0:	6b 83       	std	Y+3, r22	; 0x03
    23d2:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t retStatus = ERROR;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	89 83       	std	Y+1, r24	; 0x01

	/* Set address in DDRAM */
	retStatus = LCD_setCursorPos(row, col);
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	6c 81       	ldd	r22, Y+4	; 0x04
    23dc:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_setCursorPos>
    23e0:	89 83       	std	Y+1, r24	; 0x01
	/* Write custom character on screen */
	retStatus |= LCD_displayCharacter(index);
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	0e 94 ee 10 	call	0x21dc	; 0x21dc <LCD_displayCharacter>
    23e8:	98 2f       	mov	r25, r24
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	89 2b       	or	r24, r25
    23ee:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <initKeypad>:
		KEYPAD_COL1_PIN,
		KEYPAD_COL2_PIN,
		KEYPAD_COL3_PIN,
};

stdReturnType_t initKeypad(void) {
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	0f 92       	push	r0
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62

	stdReturnType_t status = ERROR;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	89 83       	std	Y+1, r24	; 0x01

	// init column  as input

	status = DIO_init(KEYPAD_PORT, KEYPAD_COL0_PIN, INPUT);
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2418:	89 83       	std	Y+1, r24	; 0x01

	status |= DIO_init(KEYPAD_PORT, KEYPAD_COL1_PIN, INPUT);
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	61 e0       	ldi	r22, 0x01	; 1
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2424:	98 2f       	mov	r25, r24
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	89 2b       	or	r24, r25
    242a:	89 83       	std	Y+1, r24	; 0x01
	status |= DIO_init(KEYPAD_PORT, KEYPAD_COL2_PIN, INPUT);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	62 e0       	ldi	r22, 0x02	; 2
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2436:	98 2f       	mov	r25, r24
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	89 2b       	or	r24, r25
    243c:	89 83       	std	Y+1, r24	; 0x01
    #if (NUM_OF_COL == 4)
		status |= DIO_init(KEYPAD_PORT, KEYPAD_COL3_PIN, INPUT);
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	63 e0       	ldi	r22, 0x03	; 3
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2448:	98 2f       	mov	r25, r24
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	89 2b       	or	r24, r25
    244e:	89 83       	std	Y+1, r24	; 0x01
	#endif
	status = SUCCESS;
    2450:	19 82       	std	Y+1, r1	; 0x01

	//Enable initernal pull up
	DIO_write(KEYPAD_PORT, KEYPAD_COL0_PIN, PIN_IS_HIGH);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_COL1_PIN, PIN_IS_HIGH);
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	61 e0       	ldi	r22, 0x01	; 1
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_COL2_PIN, PIN_IS_HIGH);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
	#if (NUM_OF_COL == 4)
		DIO_write(KEYPAD_PORT, KEYPAD_COL3_PIN, PIN_IS_HIGH);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
	#endif
	status = SUCCESS;
    247a:	19 82       	std	Y+1, r1	; 0x01
	//init row as INPUT
	status = DIO_init(KEYPAD_PORT,KEYPAD_ROW0_PIN,OUTPUT);
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	64 e0       	ldi	r22, 0x04	; 4
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2486:	89 83       	std	Y+1, r24	; 0x01

	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW1_PIN,OUTPUT);
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	65 e0       	ldi	r22, 0x05	; 5
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    2492:	98 2f       	mov	r25, r24
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	89 2b       	or	r24, r25
    2498:	89 83       	std	Y+1, r24	; 0x01
	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW2_PIN,OUTPUT);
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	66 e0       	ldi	r22, 0x06	; 6
    249e:	41 e0       	ldi	r20, 0x01	; 1
    24a0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    24a4:	98 2f       	mov	r25, r24
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	89 2b       	or	r24, r25
    24aa:	89 83       	std	Y+1, r24	; 0x01
	#if(NUM_OF_ROW == 4)
	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW3_PIN,OUTPUT);
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	67 e0       	ldi	r22, 0x07	; 7
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    24b6:	98 2f       	mov	r25, r24
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	89 2b       	or	r24, r25
    24bc:	89 83       	std	Y+1, r24	; 0x01
	#endif
	//Enable initernal pull up
	DIO_write(KEYPAD_PORT, KEYPAD_ROW0_PIN, PIN_IS_HIGH);
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	64 e0       	ldi	r22, 0x04	; 4
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_ROW1_PIN, PIN_IS_HIGH);
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	65 e0       	ldi	r22, 0x05	; 5
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_ROW2_PIN, PIN_IS_HIGH);
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	66 e0       	ldi	r22, 0x06	; 6
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
	#if (NUM_OF_ROW == 4)
		DIO_write(KEYPAD_PORT, KEYPAD_ROW3_PIN, PIN_IS_HIGH);
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	67 e0       	ldi	r22, 0x07	; 7
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
	#endif

	status = SUCCESS;
    24e6:	19 82       	std	Y+1, r1	; 0x01

	return status;
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <GetPressedKey>:


stdReturnType_t GetPressedKey(u8 *ppressed)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	2a 97       	sbiw	r28, 0x0a	; 10
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
	stdReturnType_t retstatus = ERROR;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	8b 83       	std	Y+3, r24	; 0x03

	u8 col = 0;
    250e:	1a 82       	std	Y+2, r1	; 0x02
	u8 row = 0;
    2510:	19 82       	std	Y+1, r1	; 0x01
	pinState_t pinsate;

	*ppressed = 'H';
    2512:	ed 81       	ldd	r30, Y+5	; 0x05
    2514:	fe 81       	ldd	r31, Y+6	; 0x06
    2516:	88 e4       	ldi	r24, 0x48	; 72
    2518:	80 83       	st	Z, r24

	for(row = 0; row < NUM_OF_ROW; row++)
    251a:	19 82       	std	Y+1, r1	; 0x01
    251c:	91 c0       	rjmp	.+290    	; 0x2640 <GetPressedKey+0x14e>
	{
		retstatus = DIO_write(KEYPAD_PORT,KEYPAD_ROW0_PIN,( (1<<row) &1)?0:1);
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	02 2e       	mov	r0, r18
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <GetPressedKey+0x3e>
    252c:	95 95       	asr	r25
    252e:	87 95       	ror	r24
    2530:	0a 94       	dec	r0
    2532:	e2 f7       	brpl	.-8      	; 0x252c <GetPressedKey+0x3a>
    2534:	81 70       	andi	r24, 0x01	; 1
    2536:	90 70       	andi	r25, 0x00	; 0
    2538:	88 23       	and	r24, r24
    253a:	11 f0       	breq	.+4      	; 0x2540 <GetPressedKey+0x4e>
    253c:	1a 86       	std	Y+10, r1	; 0x0a
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <GetPressedKey+0x52>
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	8a 87       	std	Y+10, r24	; 0x0a
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	64 e0       	ldi	r22, 0x04	; 4
    2548:	4a 85       	ldd	r20, Y+10	; 0x0a
    254a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    254e:	8b 83       	std	Y+3, r24	; 0x03

		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW1_PIN,( (1<<row) &2)?0:1);
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <GetPressedKey+0x70>
    255e:	95 95       	asr	r25
    2560:	87 95       	ror	r24
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <GetPressedKey+0x6c>
    2566:	81 70       	andi	r24, 0x01	; 1
    2568:	90 70       	andi	r25, 0x00	; 0
    256a:	88 23       	and	r24, r24
    256c:	11 f0       	breq	.+4      	; 0x2572 <GetPressedKey+0x80>
    256e:	19 86       	std	Y+9, r1	; 0x09
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <GetPressedKey+0x84>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	89 87       	std	Y+9, r24	; 0x09
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	65 e0       	ldi	r22, 0x05	; 5
    257a:	49 85       	ldd	r20, Y+9	; 0x09
    257c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    2580:	98 2f       	mov	r25, r24
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	89 2b       	or	r24, r25
    2586:	8b 83       	std	Y+3, r24	; 0x03
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW2_PIN,( (1<<row) &4)?0:1);
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	84 e0       	ldi	r24, 0x04	; 4
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	02 2e       	mov	r0, r18
    2594:	02 c0       	rjmp	.+4      	; 0x259a <GetPressedKey+0xa8>
    2596:	95 95       	asr	r25
    2598:	87 95       	ror	r24
    259a:	0a 94       	dec	r0
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <GetPressedKey+0xa4>
    259e:	81 70       	andi	r24, 0x01	; 1
    25a0:	90 70       	andi	r25, 0x00	; 0
    25a2:	88 23       	and	r24, r24
    25a4:	11 f0       	breq	.+4      	; 0x25aa <GetPressedKey+0xb8>
    25a6:	18 86       	std	Y+8, r1	; 0x08
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <GetPressedKey+0xbc>
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	88 87       	std	Y+8, r24	; 0x08
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	66 e0       	ldi	r22, 0x06	; 6
    25b2:	48 85       	ldd	r20, Y+8	; 0x08
    25b4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    25b8:	98 2f       	mov	r25, r24
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	89 2b       	or	r24, r25
    25be:	8b 83       	std	Y+3, r24	; 0x03
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW3_PIN,( (1<<row) &8)?0:1);
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	88 e0       	ldi	r24, 0x08	; 8
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 2e       	mov	r0, r18
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <GetPressedKey+0xe0>
    25ce:	95 95       	asr	r25
    25d0:	87 95       	ror	r24
    25d2:	0a 94       	dec	r0
    25d4:	e2 f7       	brpl	.-8      	; 0x25ce <GetPressedKey+0xdc>
    25d6:	81 70       	andi	r24, 0x01	; 1
    25d8:	90 70       	andi	r25, 0x00	; 0
    25da:	88 23       	and	r24, r24
    25dc:	11 f0       	breq	.+4      	; 0x25e2 <GetPressedKey+0xf0>
    25de:	1f 82       	std	Y+7, r1	; 0x07
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <GetPressedKey+0xf4>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	8f 83       	std	Y+7, r24	; 0x07
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	67 e0       	ldi	r22, 0x07	; 7
    25ea:	4f 81       	ldd	r20, Y+7	; 0x07
    25ec:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_write>
    25f0:	9b 81       	ldd	r25, Y+3	; 0x03
    25f2:	89 2b       	or	r24, r25
    25f4:	8b 83       	std	Y+3, r24	; 0x03

		for (col = 0; col < NUM_OF_COL; col ++)
    25f6:	1a 82       	std	Y+2, r1	; 0x02
    25f8:	1d c0       	rjmp	.+58     	; 0x2634 <GetPressedKey+0x142>
		{

			retstatus |= DIO_read(KEYPAD_PORT,colpins[col],&pinsate);
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	88 2f       	mov	r24, r24
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	fc 01       	movw	r30, r24
    2602:	e8 59       	subi	r30, 0x98	; 152
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	90 81       	ld	r25, Z
    2608:	9e 01       	movw	r18, r28
    260a:	2c 5f       	subi	r18, 0xFC	; 252
    260c:	3f 4f       	sbci	r19, 0xFF	; 255
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	69 2f       	mov	r22, r25
    2612:	a9 01       	movw	r20, r18
    2614:	0e 94 a5 06 	call	0xd4a	; 0xd4a <DIO_read>
    2618:	98 2f       	mov	r25, r24
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	89 2b       	or	r24, r25
    261e:	8b 83       	std	Y+3, r24	; 0x03

			if(PIN_IS_LOW == pinsate)
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	88 23       	and	r24, r24
    2624:	21 f4       	brne	.+8      	; 0x262e <GetPressedKey+0x13c>
				//*ppressed = KEyPad_4X4[row][col];
				#elif(NUM_OF_COL == 3)
				//*ppressed = KEyPad_4X3[row][col];
				#endif

				row = NUM_OF_ROW;
    2626:	84 e0       	ldi	r24, 0x04	; 4
    2628:	89 83       	std	Y+1, r24	; 0x01
				col = NUM_OF_COL;
    262a:	84 e0       	ldi	r24, 0x04	; 4
    262c:	8a 83       	std	Y+2, r24	; 0x02

		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW1_PIN,( (1<<row) &2)?0:1);
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW2_PIN,( (1<<row) &4)?0:1);
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW3_PIN,( (1<<row) &8)?0:1);

		for (col = 0; col < NUM_OF_COL; col ++)
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	8a 83       	std	Y+2, r24	; 0x02
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	84 30       	cpi	r24, 0x04	; 4
    2638:	00 f3       	brcs	.-64     	; 0x25fa <GetPressedKey+0x108>
	u8 row = 0;
	pinState_t pinsate;

	*ppressed = 'H';

	for(row = 0; row < NUM_OF_ROW; row++)
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	84 30       	cpi	r24, 0x04	; 4
    2644:	08 f4       	brcc	.+2      	; 0x2648 <GetPressedKey+0x156>
    2646:	6b cf       	rjmp	.-298    	; 0x251e <GetPressedKey+0x2c>
				col = NUM_OF_COL;
			}
		}
	}

	return retstatus;
    2648:	8b 81       	ldd	r24, Y+3	; 0x03

}
    264a:	2a 96       	adiw	r28, 0x0a	; 10
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <initButton>:
 * params:
 * 			IN: buttonID : the name of the needed button.
 *
 */
stdReturnType_t initButton(buttonX_t buttonID)
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	00 d0       	rcall	.+0      	; 0x2662 <initButton+0x6>
    2662:	00 d0       	rcall	.+0      	; 0x2664 <initButton+0x8>
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	89 83       	std	Y+1, r24	; 0x01

	switch(buttonID)
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	3c 83       	std	Y+4, r19	; 0x04
    2676:	2b 83       	std	Y+3, r18	; 0x03
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	91 05       	cpc	r25, r1
    2680:	81 f0       	breq	.+32     	; 0x26a2 <initButton+0x46>
    2682:	2b 81       	ldd	r18, Y+3	; 0x03
    2684:	3c 81       	ldd	r19, Y+4	; 0x04
    2686:	22 30       	cpi	r18, 0x02	; 2
    2688:	31 05       	cpc	r19, r1
    268a:	91 f0       	breq	.+36     	; 0x26b0 <initButton+0x54>
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	a9 f4       	brne	.+42     	; 0x26be <initButton+0x62>
	{
		case BUTTON0:
			retStatus = DIO_init(BUTTON0_PORT, BUTTON0_PIN, INPUT);
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	10 c0       	rjmp	.+32     	; 0x26c2 <initButton+0x66>
			break;

		case BUTTON1:
			retStatus = DIO_init(BUTTON1_PORT, BUTTON1_PIN, INPUT);
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	61 e0       	ldi	r22, 0x01	; 1
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	09 c0       	rjmp	.+18     	; 0x26c2 <initButton+0x66>
			break;

		case BUTTON2:
			retStatus = DIO_init(BUTTON2_PORT, BUTTON2_PIN, INPUT);
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	62 e0       	ldi	r22, 0x02	; 2
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_init>
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <initButton+0x66>
			break;

		default:
			/* ERROR given buttonID is not supported */
			retStatus = ERROR;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return retStatus;
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <getButtonState>:
 * params:
 * 			IN: buttonID : the name of the needed button.
 * 			OUT: pbuttonState : pointer to the button state BUTTON_PRESSED/BUTTON_NOT_PRESSED.
 */
stdReturnType_t getButtonState(buttonX_t buttonID, buttonState_t * pbuttonState)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	e1 97       	sbiw	r28, 0x31	; 49
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	8d a7       	std	Y+45, r24	; 0x2d
    26e8:	7f a7       	std	Y+47, r23	; 0x2f
    26ea:	6e a7       	std	Y+46, r22	; 0x2e
	stdReturnType_t retStatus = ERROR;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	8b a7       	std	Y+43, r24	; 0x2b
	pinState_t pinState;

	/* Read button pin state */
	switch(buttonID)
    26f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	39 ab       	std	Y+49, r19	; 0x31
    26f8:	28 ab       	std	Y+48, r18	; 0x30
    26fa:	88 a9       	ldd	r24, Y+48	; 0x30
    26fc:	99 a9       	ldd	r25, Y+49	; 0x31
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	91 05       	cpc	r25, r1
    2702:	09 f4       	brne	.+2      	; 0x2706 <getButtonState+0x34>
    2704:	94 c0       	rjmp	.+296    	; 0x282e <getButtonState+0x15c>
    2706:	28 a9       	ldd	r18, Y+48	; 0x30
    2708:	39 a9       	ldd	r19, Y+49	; 0x31
    270a:	22 30       	cpi	r18, 0x02	; 2
    270c:	31 05       	cpc	r19, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <getButtonState+0x40>
    2710:	17 c1       	rjmp	.+558    	; 0x2940 <getButtonState+0x26e>
    2712:	88 a9       	ldd	r24, Y+48	; 0x30
    2714:	99 a9       	ldd	r25, Y+49	; 0x31
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	09 f0       	breq	.+2      	; 0x271c <getButtonState+0x4a>
    271a:	9b c1       	rjmp	.+822    	; 0x2a52 <getButtonState+0x380>
	{
		case BUTTON0:
			retStatus = DIO_read(BUTTON0_PORT,BUTTON0,&pinState);
    271c:	9e 01       	movw	r18, r28
    271e:	24 5d       	subi	r18, 0xD4	; 212
    2720:	3f 4f       	sbci	r19, 0xFF	; 255
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	a9 01       	movw	r20, r18
    2728:	0e 94 a5 06 	call	0xd4a	; 0xd4a <DIO_read>
    272c:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    272e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	09 f0       	breq	.+2      	; 0x2736 <getButtonState+0x64>
    2734:	90 c1       	rjmp	.+800    	; 0x2a56 <getButtonState+0x384>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	a0 ef       	ldi	r26, 0xF0	; 240
    273c:	b1 e4       	ldi	r27, 0x41	; 65
    273e:	8f a3       	std	Y+39, r24	; 0x27
    2740:	98 a7       	std	Y+40, r25	; 0x28
    2742:	a9 a7       	std	Y+41, r26	; 0x29
    2744:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	6f a1       	ldd	r22, Y+39	; 0x27
    2748:	78 a5       	ldd	r23, Y+40	; 0x28
    274a:	89 a5       	ldd	r24, Y+41	; 0x29
    274c:	9a a5       	ldd	r25, Y+42	; 0x2a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a e7       	ldi	r20, 0x7A	; 122
    2754:	55 e4       	ldi	r21, 0x45	; 69
    2756:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8b a3       	std	Y+35, r24	; 0x23
    2760:	9c a3       	std	Y+36, r25	; 0x24
    2762:	ad a3       	std	Y+37, r26	; 0x25
    2764:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2766:	6b a1       	ldd	r22, Y+35	; 0x23
    2768:	7c a1       	ldd	r23, Y+36	; 0x24
    276a:	8d a1       	ldd	r24, Y+37	; 0x25
    276c:	9e a1       	ldd	r25, Y+38	; 0x26
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <getButtonState+0xb6>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9a a3       	std	Y+34, r25	; 0x22
    2784:	89 a3       	std	Y+33, r24	; 0x21
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <getButtonState+0x134>
	else if (__tmp > 65535)
    2788:	6b a1       	ldd	r22, Y+35	; 0x23
    278a:	7c a1       	ldd	r23, Y+36	; 0x24
    278c:	8d a1       	ldd	r24, Y+37	; 0x25
    278e:	9e a1       	ldd	r25, Y+38	; 0x26
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <getButtonState+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	6f a1       	ldd	r22, Y+39	; 0x27
    27a2:	78 a5       	ldd	r23, Y+40	; 0x28
    27a4:	89 a5       	ldd	r24, Y+41	; 0x29
    27a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9a a3       	std	Y+34, r25	; 0x22
    27c6:	89 a3       	std	Y+33, r24	; 0x21
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <getButtonState+0x116>
    27ca:	80 e9       	ldi	r24, 0x90	; 144
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	98 a3       	std	Y+32, r25	; 0x20
    27d0:	8f 8f       	std	Y+31, r24	; 0x1f
    27d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27d4:	98 a1       	ldd	r25, Y+32	; 0x20
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <getButtonState+0x104>
    27da:	98 a3       	std	Y+32, r25	; 0x20
    27dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	89 a1       	ldd	r24, Y+33	; 0x21
    27e0:	9a a1       	ldd	r25, Y+34	; 0x22
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9a a3       	std	Y+34, r25	; 0x22
    27e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ea:	9a a1       	ldd	r25, Y+34	; 0x22
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <getButtonState+0xf8>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <getButtonState+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6b a1       	ldd	r22, Y+35	; 0x23
    27f4:	7c a1       	ldd	r23, Y+36	; 0x24
    27f6:	8d a1       	ldd	r24, Y+37	; 0x25
    27f8:	9e a1       	ldd	r25, Y+38	; 0x26
    27fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9a a3       	std	Y+34, r25	; 0x22
    2804:	89 a3       	std	Y+33, r24	; 0x21
    2806:	89 a1       	ldd	r24, Y+33	; 0x21
    2808:	9a a1       	ldd	r25, Y+34	; 0x22
    280a:	9e 8f       	std	Y+30, r25	; 0x1e
    280c:	8d 8f       	std	Y+29, r24	; 0x1d
    280e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2810:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <getButtonState+0x140>
    2816:	9e 8f       	std	Y+30, r25	; 0x1e
    2818:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON0_PORT,BUTTON0,&pinState);
    281a:	9e 01       	movw	r18, r28
    281c:	24 5d       	subi	r18, 0xD4	; 212
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	a9 01       	movw	r20, r18
    2826:	0e 94 a5 06 	call	0xd4a	; 0xd4a <DIO_read>
    282a:	8b a7       	std	Y+43, r24	; 0x2b
    282c:	14 c1       	rjmp	.+552    	; 0x2a56 <getButtonState+0x384>
			}

			break;

		case BUTTON1:
			retStatus = DIO_read(BUTTON1_PORT, BUTTON1_PIN, &pinState);
    282e:	9e 01       	movw	r18, r28
    2830:	24 5d       	subi	r18, 0xD4	; 212
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	a9 01       	movw	r20, r18
    283a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <DIO_read>
    283e:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    2840:	8c a5       	ldd	r24, Y+44	; 0x2c
    2842:	81 30       	cpi	r24, 0x01	; 1
    2844:	09 f0       	breq	.+2      	; 0x2848 <getButtonState+0x176>
    2846:	07 c1       	rjmp	.+526    	; 0x2a56 <getButtonState+0x384>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	a0 ef       	ldi	r26, 0xF0	; 240
    284e:	b1 e4       	ldi	r27, 0x41	; 65
    2850:	89 8f       	std	Y+25, r24	; 0x19
    2852:	9a 8f       	std	Y+26, r25	; 0x1a
    2854:	ab 8f       	std	Y+27, r26	; 0x1b
    2856:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2858:	69 8d       	ldd	r22, Y+25	; 0x19
    285a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4a e7       	ldi	r20, 0x7A	; 122
    2866:	55 e4       	ldi	r21, 0x45	; 69
    2868:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	8d 8b       	std	Y+21, r24	; 0x15
    2872:	9e 8b       	std	Y+22, r25	; 0x16
    2874:	af 8b       	std	Y+23, r26	; 0x17
    2876:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2878:	6d 89       	ldd	r22, Y+21	; 0x15
    287a:	7e 89       	ldd	r23, Y+22	; 0x16
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e8       	ldi	r20, 0x80	; 128
    2886:	5f e3       	ldi	r21, 0x3F	; 63
    2888:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    288c:	88 23       	and	r24, r24
    288e:	2c f4       	brge	.+10     	; 0x289a <getButtonState+0x1c8>
		__ticks = 1;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9c 8b       	std	Y+20, r25	; 0x14
    2896:	8b 8b       	std	Y+19, r24	; 0x13
    2898:	3f c0       	rjmp	.+126    	; 0x2918 <getButtonState+0x246>
	else if (__tmp > 65535)
    289a:	6d 89       	ldd	r22, Y+21	; 0x15
    289c:	7e 89       	ldd	r23, Y+22	; 0x16
    289e:	8f 89       	ldd	r24, Y+23	; 0x17
    28a0:	98 8d       	ldd	r25, Y+24	; 0x18
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	3f ef       	ldi	r19, 0xFF	; 255
    28a6:	4f e7       	ldi	r20, 0x7F	; 127
    28a8:	57 e4       	ldi	r21, 0x47	; 71
    28aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28ae:	18 16       	cp	r1, r24
    28b0:	4c f5       	brge	.+82     	; 0x2904 <getButtonState+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b2:	69 8d       	ldd	r22, Y+25	; 0x19
    28b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e2       	ldi	r20, 0x20	; 32
    28c0:	51 e4       	ldi	r21, 0x41	; 65
    28c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9c 8b       	std	Y+20, r25	; 0x14
    28d8:	8b 8b       	std	Y+19, r24	; 0x13
    28da:	0f c0       	rjmp	.+30     	; 0x28fa <getButtonState+0x228>
    28dc:	80 e9       	ldi	r24, 0x90	; 144
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	9a 8b       	std	Y+18, r25	; 0x12
    28e2:	89 8b       	std	Y+17, r24	; 0x11
    28e4:	89 89       	ldd	r24, Y+17	; 0x11
    28e6:	9a 89       	ldd	r25, Y+18	; 0x12
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <getButtonState+0x216>
    28ec:	9a 8b       	std	Y+18, r25	; 0x12
    28ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	8b 89       	ldd	r24, Y+19	; 0x13
    28f2:	9c 89       	ldd	r25, Y+20	; 0x14
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	9c 8b       	std	Y+20, r25	; 0x14
    28f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	8b 89       	ldd	r24, Y+19	; 0x13
    28fc:	9c 89       	ldd	r25, Y+20	; 0x14
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	69 f7       	brne	.-38     	; 0x28dc <getButtonState+0x20a>
    2902:	14 c0       	rjmp	.+40     	; 0x292c <getButtonState+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	6d 89       	ldd	r22, Y+21	; 0x15
    2906:	7e 89       	ldd	r23, Y+22	; 0x16
    2908:	8f 89       	ldd	r24, Y+23	; 0x17
    290a:	98 8d       	ldd	r25, Y+24	; 0x18
    290c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9c 8b       	std	Y+20, r25	; 0x14
    2916:	8b 8b       	std	Y+19, r24	; 0x13
    2918:	8b 89       	ldd	r24, Y+19	; 0x13
    291a:	9c 89       	ldd	r25, Y+20	; 0x14
    291c:	98 8b       	std	Y+16, r25	; 0x10
    291e:	8f 87       	std	Y+15, r24	; 0x0f
    2920:	8f 85       	ldd	r24, Y+15	; 0x0f
    2922:	98 89       	ldd	r25, Y+16	; 0x10
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <getButtonState+0x252>
    2928:	98 8b       	std	Y+16, r25	; 0x10
    292a:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON1_PORT, BUTTON1_PIN, &pinState);
    292c:	9e 01       	movw	r18, r28
    292e:	24 5d       	subi	r18, 0xD4	; 212
    2930:	3f 4f       	sbci	r19, 0xFF	; 255
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	a9 01       	movw	r20, r18
    2938:	0e 94 a5 06 	call	0xd4a	; 0xd4a <DIO_read>
    293c:	8b a7       	std	Y+43, r24	; 0x2b
    293e:	8b c0       	rjmp	.+278    	; 0x2a56 <getButtonState+0x384>
				/* Do nothing */
			}
			break;

		case BUTTON2:
			retStatus = DIO_read(BUTTON2_PORT, BUTTON2_PIN, &pinState);
    2940:	9e 01       	movw	r18, r28
    2942:	24 5d       	subi	r18, 0xD4	; 212
    2944:	3f 4f       	sbci	r19, 0xFF	; 255
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	62 e0       	ldi	r22, 0x02	; 2
    294a:	a9 01       	movw	r20, r18
    294c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <DIO_read>
    2950:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    2952:	8c a5       	ldd	r24, Y+44	; 0x2c
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	09 f0       	breq	.+2      	; 0x295a <getButtonState+0x288>
    2958:	7e c0       	rjmp	.+252    	; 0x2a56 <getButtonState+0x384>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a0 ef       	ldi	r26, 0xF0	; 240
    2960:	b1 e4       	ldi	r27, 0x41	; 65
    2962:	8b 87       	std	Y+11, r24	; 0x0b
    2964:	9c 87       	std	Y+12, r25	; 0x0c
    2966:	ad 87       	std	Y+13, r26	; 0x0d
    2968:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296a:	6b 85       	ldd	r22, Y+11	; 0x0b
    296c:	7c 85       	ldd	r23, Y+12	; 0x0c
    296e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2970:	9e 85       	ldd	r25, Y+14	; 0x0e
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4a e7       	ldi	r20, 0x7A	; 122
    2978:	55 e4       	ldi	r21, 0x45	; 69
    297a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8f 83       	std	Y+7, r24	; 0x07
    2984:	98 87       	std	Y+8, r25	; 0x08
    2986:	a9 87       	std	Y+9, r26	; 0x09
    2988:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    298a:	6f 81       	ldd	r22, Y+7	; 0x07
    298c:	78 85       	ldd	r23, Y+8	; 0x08
    298e:	89 85       	ldd	r24, Y+9	; 0x09
    2990:	9a 85       	ldd	r25, Y+10	; 0x0a
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	2c f4       	brge	.+10     	; 0x29ac <getButtonState+0x2da>
		__ticks = 1;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	3f c0       	rjmp	.+126    	; 0x2a2a <getButtonState+0x358>
	else if (__tmp > 65535)
    29ac:	6f 81       	ldd	r22, Y+7	; 0x07
    29ae:	78 85       	ldd	r23, Y+8	; 0x08
    29b0:	89 85       	ldd	r24, Y+9	; 0x09
    29b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	4c f5       	brge	.+82     	; 0x2a16 <getButtonState+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e2       	ldi	r20, 0x20	; 32
    29d2:	51 e4       	ldi	r21, 0x41	; 65
    29d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	0f c0       	rjmp	.+30     	; 0x2a0c <getButtonState+0x33a>
    29ee:	80 e9       	ldi	r24, 0x90	; 144
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	8b 83       	std	Y+3, r24	; 0x03
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <getButtonState+0x328>
    29fe:	9c 83       	std	Y+4, r25	; 0x04
    2a00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	69 f7       	brne	.-38     	; 0x29ee <getButtonState+0x31c>
    2a14:	14 c0       	rjmp	.+40     	; 0x2a3e <getButtonState+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	78 85       	ldd	r23, Y+8	; 0x08
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <getButtonState+0x364>
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON2_PORT, BUTTON2_PIN, &pinState);
    2a3e:	9e 01       	movw	r18, r28
    2a40:	24 5d       	subi	r18, 0xD4	; 212
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	62 e0       	ldi	r22, 0x02	; 2
    2a48:	a9 01       	movw	r20, r18
    2a4a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <DIO_read>
    2a4e:	8b a7       	std	Y+43, r24	; 0x2b
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <getButtonState+0x384>
			}
			break;

		default:
			/* ERROR given buttonID is not supported */
			retStatus = ERROR;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	8b a7       	std	Y+43, r24	; 0x2b
			break;
	}

	/* Check button state */
	if( (SUCCESS == retStatus) && (PIN_IS_HIGH == pinState))
    2a56:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a58:	88 23       	and	r24, r24
    2a5a:	49 f4       	brne	.+18     	; 0x2a6e <getButtonState+0x39c>
    2a5c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	31 f4       	brne	.+12     	; 0x2a6e <getButtonState+0x39c>
	{
		*pbuttonState = BUTTON_PRESSED;
    2a62:	ee a5       	ldd	r30, Y+46	; 0x2e
    2a64:	ff a5       	ldd	r31, Y+47	; 0x2f
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	80 83       	st	Z, r24
		retStatus = SUCCESS;
    2a6a:	1b a6       	std	Y+43, r1	; 0x2b
    2a6c:	0d c0       	rjmp	.+26     	; 0x2a88 <getButtonState+0x3b6>
	}
	else if((SUCCESS == retStatus) && (PIN_IS_LOW == pinState))
    2a6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a70:	88 23       	and	r24, r24
    2a72:	41 f4       	brne	.+16     	; 0x2a84 <getButtonState+0x3b2>
    2a74:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a76:	88 23       	and	r24, r24
    2a78:	29 f4       	brne	.+10     	; 0x2a84 <getButtonState+0x3b2>
	{
		*pbuttonState = BUTTON_NOT_PRESSED;
    2a7a:	ee a5       	ldd	r30, Y+46	; 0x2e
    2a7c:	ff a5       	ldd	r31, Y+47	; 0x2f
    2a7e:	10 82       	st	Z, r1
		retStatus = SUCCESS;
    2a80:	1b a6       	std	Y+43, r1	; 0x2b
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <getButtonState+0x3b6>
	}
	else
	{
		retStatus = ERROR;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	8b a7       	std	Y+43, r24	; 0x2b
	}

	return retStatus;
    2a88:	8b a5       	ldd	r24, Y+43	; 0x2b

}
    2a8a:	e1 96       	adiw	r28, 0x31	; 49
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <main>:

}*/
// Challenge

int main(void)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	2e 97       	sbiw	r28, 0x0e	; 14
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
	DDRD  = 0xFF;	// Configure all PORTD pins as output pins
    2ab0:	e1 e3       	ldi	r30, 0x31	; 49
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	8f ef       	ldi	r24, 0xFF	; 255
    2ab6:	80 83       	st	Z, r24
	PORTD = 0x01;   // First led is on at the beginning (Positive Logic configuration)
    2ab8:	e2 e3       	ldi	r30, 0x32	; 50
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	80 83       	st	Z, r24
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	aa ef       	ldi	r26, 0xFA	; 250
    2ac6:	b3 e4       	ldi	r27, 0x43	; 67
    2ac8:	8b 87       	std	Y+11, r24	; 0x0b
    2aca:	9c 87       	std	Y+12, r25	; 0x0c
    2acc:	ad 87       	std	Y+13, r26	; 0x0d
    2ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	4a e7       	ldi	r20, 0x7A	; 122
    2ade:	55 e4       	ldi	r21, 0x45	; 69
    2ae0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	8f 83       	std	Y+7, r24	; 0x07
    2aea:	98 87       	std	Y+8, r25	; 0x08
    2aec:	a9 87       	std	Y+9, r26	; 0x09
    2aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af0:	6f 81       	ldd	r22, Y+7	; 0x07
    2af2:	78 85       	ldd	r23, Y+8	; 0x08
    2af4:	89 85       	ldd	r24, Y+9	; 0x09
    2af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e8       	ldi	r20, 0x80	; 128
    2afe:	5f e3       	ldi	r21, 0x3F	; 63
    2b00:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b04:	88 23       	and	r24, r24
    2b06:	2c f4       	brge	.+10     	; 0x2b12 <main+0x76>
		__ticks = 1;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	9e 83       	std	Y+6, r25	; 0x06
    2b0e:	8d 83       	std	Y+5, r24	; 0x05
    2b10:	3f c0       	rjmp	.+126    	; 0x2b90 <main+0xf4>
	else if (__tmp > 65535)
    2b12:	6f 81       	ldd	r22, Y+7	; 0x07
    2b14:	78 85       	ldd	r23, Y+8	; 0x08
    2b16:	89 85       	ldd	r24, Y+9	; 0x09
    2b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	3f ef       	ldi	r19, 0xFF	; 255
    2b1e:	4f e7       	ldi	r20, 0x7F	; 127
    2b20:	57 e4       	ldi	r21, 0x47	; 71
    2b22:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b26:	18 16       	cp	r1, r24
    2b28:	4c f5       	brge	.+82     	; 0x2b7c <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e2       	ldi	r20, 0x20	; 32
    2b38:	51 e4       	ldi	r21, 0x41	; 65
    2b3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	bc 01       	movw	r22, r24
    2b44:	cd 01       	movw	r24, r26
    2b46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
    2b52:	0f c0       	rjmp	.+30     	; 0x2b72 <main+0xd6>
    2b54:	80 e9       	ldi	r24, 0x90	; 144
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	9c 83       	std	Y+4, r25	; 0x04
    2b5a:	8b 83       	std	Y+3, r24	; 0x03
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <main+0xc4>
    2b64:	9c 83       	std	Y+4, r25	; 0x04
    2b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	69 f7       	brne	.-38     	; 0x2b54 <main+0xb8>
    2b7a:	14 c0       	rjmp	.+40     	; 0x2ba4 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7e:	78 85       	ldd	r23, Y+8	; 0x08
    2b80:	89 85       	ldd	r24, Y+9	; 0x09
    2b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <main+0x100>
    2ba0:	9a 83       	std	Y+2, r25	; 0x02
    2ba2:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{

		_delay_ms(500);
		PORTD = (PORTD<<1); //every time only one led is ON
    2ba4:	a2 e3       	ldi	r26, 0x32	; 50
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e2 e3       	ldi	r30, 0x32	; 50
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	88 0f       	add	r24, r24
    2bb0:	8c 93       	st	X, r24
		if(PORTD == 0x00)
    2bb2:	e2 e3       	ldi	r30, 0x32	; 50
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	88 23       	and	r24, r24
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <main+0x122>
    2bbc:	81 cf       	rjmp	.-254    	; 0x2ac0 <main+0x24>
		{
			/* In case PORTC equals ZERO after 8 shifts
			 * turn on the first led to start rolling again */
			PORTD = 0x01;
    2bbe:	e2 e3       	ldi	r30, 0x32	; 50
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	80 83       	st	Z, r24
    2bc6:	7c cf       	rjmp	.-264    	; 0x2ac0 <main+0x24>

00002bc8 <__prologue_saves__>:
    2bc8:	2f 92       	push	r2
    2bca:	3f 92       	push	r3
    2bcc:	4f 92       	push	r4
    2bce:	5f 92       	push	r5
    2bd0:	6f 92       	push	r6
    2bd2:	7f 92       	push	r7
    2bd4:	8f 92       	push	r8
    2bd6:	9f 92       	push	r9
    2bd8:	af 92       	push	r10
    2bda:	bf 92       	push	r11
    2bdc:	cf 92       	push	r12
    2bde:	df 92       	push	r13
    2be0:	ef 92       	push	r14
    2be2:	ff 92       	push	r15
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	ca 1b       	sub	r28, r26
    2bf2:	db 0b       	sbc	r29, r27
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	09 94       	ijmp

00002c00 <__epilogue_restores__>:
    2c00:	2a 88       	ldd	r2, Y+18	; 0x12
    2c02:	39 88       	ldd	r3, Y+17	; 0x11
    2c04:	48 88       	ldd	r4, Y+16	; 0x10
    2c06:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c08:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c10:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c12:	b9 84       	ldd	r11, Y+9	; 0x09
    2c14:	c8 84       	ldd	r12, Y+8	; 0x08
    2c16:	df 80       	ldd	r13, Y+7	; 0x07
    2c18:	ee 80       	ldd	r14, Y+6	; 0x06
    2c1a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c1c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c1e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c20:	aa 81       	ldd	r26, Y+2	; 0x02
    2c22:	b9 81       	ldd	r27, Y+1	; 0x01
    2c24:	ce 0f       	add	r28, r30
    2c26:	d1 1d       	adc	r29, r1
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	ed 01       	movw	r28, r26
    2c34:	08 95       	ret

00002c36 <itoa>:
    2c36:	fb 01       	movw	r30, r22
    2c38:	9f 01       	movw	r18, r30
    2c3a:	e8 94       	clt
    2c3c:	42 30       	cpi	r20, 0x02	; 2
    2c3e:	c4 f0       	brlt	.+48     	; 0x2c70 <itoa+0x3a>
    2c40:	45 32       	cpi	r20, 0x25	; 37
    2c42:	b4 f4       	brge	.+44     	; 0x2c70 <itoa+0x3a>
    2c44:	4a 30       	cpi	r20, 0x0A	; 10
    2c46:	29 f4       	brne	.+10     	; 0x2c52 <itoa+0x1c>
    2c48:	97 fb       	bst	r25, 7
    2c4a:	1e f4       	brtc	.+6      	; 0x2c52 <itoa+0x1c>
    2c4c:	90 95       	com	r25
    2c4e:	81 95       	neg	r24
    2c50:	9f 4f       	sbci	r25, 0xFF	; 255
    2c52:	64 2f       	mov	r22, r20
    2c54:	77 27       	eor	r23, r23
    2c56:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__udivmodhi4>
    2c5a:	80 5d       	subi	r24, 0xD0	; 208
    2c5c:	8a 33       	cpi	r24, 0x3A	; 58
    2c5e:	0c f0       	brlt	.+2      	; 0x2c62 <itoa+0x2c>
    2c60:	89 5d       	subi	r24, 0xD9	; 217
    2c62:	81 93       	st	Z+, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	a1 f7       	brne	.-24     	; 0x2c52 <itoa+0x1c>
    2c6a:	16 f4       	brtc	.+4      	; 0x2c70 <itoa+0x3a>
    2c6c:	5d e2       	ldi	r21, 0x2D	; 45
    2c6e:	51 93       	st	Z+, r21
    2c70:	10 82       	st	Z, r1
    2c72:	c9 01       	movw	r24, r18
    2c74:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <strrev>

00002c78 <strrev>:
    2c78:	dc 01       	movw	r26, r24
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	67 2f       	mov	r22, r23
    2c7e:	71 91       	ld	r23, Z+
    2c80:	77 23       	and	r23, r23
    2c82:	e1 f7       	brne	.-8      	; 0x2c7c <strrev+0x4>
    2c84:	32 97       	sbiw	r30, 0x02	; 2
    2c86:	04 c0       	rjmp	.+8      	; 0x2c90 <strrev+0x18>
    2c88:	7c 91       	ld	r23, X
    2c8a:	6d 93       	st	X+, r22
    2c8c:	70 83       	st	Z, r23
    2c8e:	62 91       	ld	r22, -Z
    2c90:	ae 17       	cp	r26, r30
    2c92:	bf 07       	cpc	r27, r31
    2c94:	c8 f3       	brcs	.-14     	; 0x2c88 <strrev+0x10>
    2c96:	08 95       	ret

00002c98 <__udivmodhi4>:
    2c98:	aa 1b       	sub	r26, r26
    2c9a:	bb 1b       	sub	r27, r27
    2c9c:	51 e1       	ldi	r21, 0x11	; 17
    2c9e:	07 c0       	rjmp	.+14     	; 0x2cae <__udivmodhi4_ep>

00002ca0 <__udivmodhi4_loop>:
    2ca0:	aa 1f       	adc	r26, r26
    2ca2:	bb 1f       	adc	r27, r27
    2ca4:	a6 17       	cp	r26, r22
    2ca6:	b7 07       	cpc	r27, r23
    2ca8:	10 f0       	brcs	.+4      	; 0x2cae <__udivmodhi4_ep>
    2caa:	a6 1b       	sub	r26, r22
    2cac:	b7 0b       	sbc	r27, r23

00002cae <__udivmodhi4_ep>:
    2cae:	88 1f       	adc	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	5a 95       	dec	r21
    2cb4:	a9 f7       	brne	.-22     	; 0x2ca0 <__udivmodhi4_loop>
    2cb6:	80 95       	com	r24
    2cb8:	90 95       	com	r25
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	08 95       	ret

00002cc0 <_exit>:
    2cc0:	f8 94       	cli

00002cc2 <__stop_program>:
    2cc2:	ff cf       	rjmp	.-2      	; 0x2cc2 <__stop_program>
