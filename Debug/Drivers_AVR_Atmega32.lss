
Drivers_AVR_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00003936  000039ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006c  0080006c  000039d6  2**0
                  ALLOC
  3 .stab         00004f8c  00000000  00000000  000039d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002443  00000000  00000000  00008964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ada7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000aee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b057  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000db8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e938  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ea98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ed25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f4f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_1>
       8:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_2>
       c:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__vector_10>
      2c:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 1a 	call	0x35da	; 0x35da <main>
      8a:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_1>:
static void(* INT2_callBackPtr)(void) = NULL;

/* External interrupts service routines */
/* INT0 ISR */
ISR(INT0_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(NULL != INT0_callBackPtr)
     b70:	80 91 6c 00 	lds	r24, 0x006C
     b74:	90 91 6d 00 	lds	r25, 0x006D
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_1+0x40>
	{
		INT0_callBackPtr();
     b7c:	e0 91 6c 00 	lds	r30, 0x006C
     b80:	f0 91 6d 00 	lds	r31, 0x006D
     b84:	09 95       	icall
	}

}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_2>:

/* INT1 ISR */
ISR(INT1_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(NULL != INT1_callBackPtr)
     bd6:	80 91 6e 00 	lds	r24, 0x006E
     bda:	90 91 6f 00 	lds	r25, 0x006F
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_2+0x40>
		{
			INT1_callBackPtr();
     be2:	e0 91 6e 00 	lds	r30, 0x006E
     be6:	f0 91 6f 00 	lds	r31, 0x006F
     bea:	09 95       	icall
		}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_3>:

/* INT2 ISR */
ISR(INT2_vect)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
	if(NULL != INT2_callBackPtr)
     c3c:	80 91 70 00 	lds	r24, 0x0070
     c40:	90 91 71 00 	lds	r25, 0x0071
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	29 f0       	breq	.+10     	; 0xc52 <__vector_3+0x40>
		{
			INT2_callBackPtr();
     c48:	e0 91 70 00 	lds	r30, 0x0070
     c4c:	f0 91 71 00 	lds	r31, 0x0071
     c50:	09 95       	icall
		}

}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <initExternalInterrupt>:
 * 			IN: exIntID : the ID of the external interrupt INT_0,INT_1, etc..
 * 			IN: intSensitivity : the type of sensitivity that trigger the interrupt: FALLING_EDGE, RISING_EDGE, etc...
 * 			IN: callBackPtr : pointer to the upper layer call back function.
 */
stdReturnType_t initExternalInterrupt(extIntX_t exIntID, extIntSensitivity_t intSensitivity, void(* callBackPtr)(void))
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	27 97       	sbiw	r28, 0x07	; 7
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	8a 83       	std	Y+2, r24	; 0x02
     c8e:	6b 83       	std	Y+3, r22	; 0x03
     c90:	5d 83       	std	Y+5, r21	; 0x05
     c92:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t retStatus = ERROR;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	89 83       	std	Y+1, r24	; 0x01

	/* Disable interrupts */
	disableGlobalInterrupts();
     c98:	0e 94 c4 07 	call	0xf88	; 0xf88 <disableGlobalInterrupts>

	/* Start of initialization */
	switch(exIntID)
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3f 83       	std	Y+7, r19	; 0x07
     ca4:	2e 83       	std	Y+6, r18	; 0x06
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	91 05       	cpc	r25, r1
     cae:	b9 f0       	breq	.+46     	; 0xcde <initExternalInterrupt+0x66>
     cb0:	2e 81       	ldd	r18, Y+6	; 0x06
     cb2:	3f 81       	ldd	r19, Y+7	; 0x07
     cb4:	22 30       	cpi	r18, 0x02	; 2
     cb6:	31 05       	cpc	r19, r1
     cb8:	01 f1       	breq	.+64     	; 0xcfa <initExternalInterrupt+0x82>
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	51 f5       	brne	.+84     	; 0xd16 <initExternalInterrupt+0x9e>
	{
	case INT_0:
	{
		/* Enable interrupt 0 in General Interrupt Control Register -GICR- */
		SET_BIT(GICR, INT0);
     cc2:	ab e5       	ldi	r26, 0x5B	; 91
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	eb e5       	ldi	r30, 0x5B	; 91
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 64       	ori	r24, 0x40	; 64
     cce:	8c 93       	st	X, r24

		/* init call back function pointer */
		INT0_callBackPtr = callBackPtr;
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	90 93 6d 00 	sts	0x006D, r25
     cd8:	80 93 6c 00 	sts	0x006C, r24
     cdc:	1e c0       	rjmp	.+60     	; 0xd1a <initExternalInterrupt+0xa2>
		break;
	}
	case INT_1:
	{
		/* Enable interrupt 1 in General Interrupt Control Register -GICR- */
		SET_BIT(GICR, INT1);
     cde:	ab e5       	ldi	r26, 0x5B	; 91
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	eb e5       	ldi	r30, 0x5B	; 91
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	8c 93       	st	X, r24

		/* init call back function pointer */
		INT1_callBackPtr = callBackPtr;
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	90 93 6f 00 	sts	0x006F, r25
     cf4:	80 93 6e 00 	sts	0x006E, r24
     cf8:	10 c0       	rjmp	.+32     	; 0xd1a <initExternalInterrupt+0xa2>
		break;
	}
	case INT_2:
	{
		/* Enable interrupt 2 in General Interrupt Control Register -GICR- */
		SET_BIT(GICR, INT2);
     cfa:	ab e5       	ldi	r26, 0x5B	; 91
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	eb e5       	ldi	r30, 0x5B	; 91
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 62       	ori	r24, 0x20	; 32
     d06:	8c 93       	st	X, r24

		/* init call back function pointer */
		INT2_callBackPtr = callBackPtr;
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	90 93 71 00 	sts	0x0071, r25
     d10:	80 93 70 00 	sts	0x0070, r24
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <initExternalInterrupt+0xa2>
		break;
	}
	default:
		retStatus = ERROR;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* configure interrupt sensitivity */
	retStatus |= configExternalInterruptSensitivity(exIntID, intSensitivity);
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	6b 81       	ldd	r22, Y+3	; 0x03
     d1e:	0e 94 a1 06 	call	0xd42	; 0xd42 <configExternalInterruptSensitivity>
     d22:	98 2f       	mov	r25, r24
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	89 2b       	or	r24, r25
     d28:	89 83       	std	Y+1, r24	; 0x01

	/* End of initialization */

	/* Enable interrupts */
	enableGlobalInterrupts();
     d2a:	0e 94 d7 07 	call	0xfae	; 0xfae <enableGlobalInterrupts>

	return retStatus;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d30:	27 96       	adiw	r28, 0x07	; 7
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <configExternalInterruptSensitivity>:
 * 			IN: exIntID : the ID of the external interrupt INT_0,INT_1, etc..
 * 			IN: intSensitivity : the type of sensitivity that trigger the interrupt: FALLING_EDGE, RISING_EDGE, etc...
 *
 */
stdReturnType_t configExternalInterruptSensitivity(extIntX_t exIntID, extIntSensitivity_t intSensitivity)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <configExternalInterruptSensitivity+0x6>
     d48:	00 d0       	rcall	.+0      	; 0xd4a <configExternalInterruptSensitivity+0x8>
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	8a 83       	std	Y+2, r24	; 0x02
     d52:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01

	/* Start of initialization */
		switch(exIntID)
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3d 83       	std	Y+5, r19	; 0x05
     d60:	2c 83       	std	Y+4, r18	; 0x04
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	9d 81       	ldd	r25, Y+5	; 0x05
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <configExternalInterruptSensitivity+0x2c>
     d6c:	5a c0       	rjmp	.+180    	; 0xe22 <configExternalInterruptSensitivity+0xe0>
     d6e:	2c 81       	ldd	r18, Y+4	; 0x04
     d70:	3d 81       	ldd	r19, Y+5	; 0x05
     d72:	22 30       	cpi	r18, 0x02	; 2
     d74:	31 05       	cpc	r19, r1
     d76:	09 f4       	brne	.+2      	; 0xd7a <configExternalInterruptSensitivity+0x38>
     d78:	a3 c0       	rjmp	.+326    	; 0xec0 <configExternalInterruptSensitivity+0x17e>
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	09 f0       	breq	.+2      	; 0xd84 <configExternalInterruptSensitivity+0x42>
     d82:	b9 c0       	rjmp	.+370    	; 0xef6 <configExternalInterruptSensitivity+0x1b4>
		{
		case INT_0:
		{
			/* configure interrupt sensitivity */

			if(LOW_LEVEL == intSensitivity)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 23       	and	r24, r24
     d88:	81 f4       	brne	.+32     	; 0xdaa <configExternalInterruptSensitivity+0x68>
			{
				CLR_BIT(MCUCR, ISC01);
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8d 7f       	andi	r24, 0xFD	; 253
     d96:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC00);
     d98:	a5 e5       	ldi	r26, 0x55	; 85
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e5       	ldi	r30, 0x55	; 85
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     da6:	19 82       	std	Y+1, r1	; 0x01
     da8:	a8 c0       	rjmp	.+336    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(ANY_LOGICAL_CHANGE == intSensitivity)
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	81 f4       	brne	.+32     	; 0xdd0 <configExternalInterruptSensitivity+0x8e>
			{
				CLR_BIT(MCUCR, ISC01);
     db0:	a5 e5       	ldi	r26, 0x55	; 85
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e5       	ldi	r30, 0x55	; 85
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC00);
     dbe:	a5 e5       	ldi	r26, 0x55	; 85
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e5       	ldi	r30, 0x55	; 85
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	81 60       	ori	r24, 0x01	; 1
     dca:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     dcc:	19 82       	std	Y+1, r1	; 0x01
     dce:	95 c0       	rjmp	.+298    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(FALLING_EDGE == intSensitivity)
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	81 f4       	brne	.+32     	; 0xdf6 <configExternalInterruptSensitivity+0xb4>
			{
				SET_BIT(MCUCR, ISC01);
     dd6:	a5 e5       	ldi	r26, 0x55	; 85
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e5 e5       	ldi	r30, 0x55	; 85
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC00);
     de4:	a5 e5       	ldi	r26, 0x55	; 85
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e5 e5       	ldi	r30, 0x55	; 85
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8e 7f       	andi	r24, 0xFE	; 254
     df0:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     df2:	19 82       	std	Y+1, r1	; 0x01
     df4:	82 c0       	rjmp	.+260    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(RISING_EDGE == intSensitivity)
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	81 f4       	brne	.+32     	; 0xe1c <configExternalInterruptSensitivity+0xda>
			{
				SET_BIT(MCUCR, ISC01);
     dfc:	a5 e5       	ldi	r26, 0x55	; 85
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e5       	ldi	r30, 0x55	; 85
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	82 60       	ori	r24, 0x02	; 2
     e08:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC00);
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     e18:	19 82       	std	Y+1, r1	; 0x01
     e1a:	6f c0       	rjmp	.+222    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else
			{
				retStatus = ERROR;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	6c c0       	rjmp	.+216    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
		}
		case INT_1:
		{
			/* configure interrupt sensitivity */

			if(LOW_LEVEL == intSensitivity)
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	88 23       	and	r24, r24
     e26:	81 f4       	brne	.+32     	; 0xe48 <configExternalInterruptSensitivity+0x106>
			{
				CLR_BIT(MCUCR, ISC11);
     e28:	a5 e5       	ldi	r26, 0x55	; 85
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e5       	ldi	r30, 0x55	; 85
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC10);
     e36:	a5 e5       	ldi	r26, 0x55	; 85
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e5 e5       	ldi	r30, 0x55	; 85
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8b 7f       	andi	r24, 0xFB	; 251
     e42:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     e44:	19 82       	std	Y+1, r1	; 0x01
     e46:	59 c0       	rjmp	.+178    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(ANY_LOGICAL_CHANGE == intSensitivity)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	81 f4       	brne	.+32     	; 0xe6e <configExternalInterruptSensitivity+0x12c>
			{
				CLR_BIT(MCUCR, ISC11);
     e4e:	a5 e5       	ldi	r26, 0x55	; 85
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e5       	ldi	r30, 0x55	; 85
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	87 7f       	andi	r24, 0xF7	; 247
     e5a:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC10);
     e5c:	a5 e5       	ldi	r26, 0x55	; 85
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e5 e5       	ldi	r30, 0x55	; 85
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	84 60       	ori	r24, 0x04	; 4
     e68:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	46 c0       	rjmp	.+140    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(FALLING_EDGE == intSensitivity)
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	81 f4       	brne	.+32     	; 0xe94 <configExternalInterruptSensitivity+0x152>
			{
				SET_BIT(MCUCR, ISC11);
     e74:	a5 e5       	ldi	r26, 0x55	; 85
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e5 e5       	ldi	r30, 0x55	; 85
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	88 60       	ori	r24, 0x08	; 8
     e80:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC10);
     e82:	a5 e5       	ldi	r26, 0x55	; 85
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e5       	ldi	r30, 0x55	; 85
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8b 7f       	andi	r24, 0xFB	; 251
     e8e:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     e90:	19 82       	std	Y+1, r1	; 0x01
     e92:	33 c0       	rjmp	.+102    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(RISING_EDGE == intSensitivity)
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	81 f4       	brne	.+32     	; 0xeba <configExternalInterruptSensitivity+0x178>
			{
				SET_BIT(MCUCR, ISC11);
     e9a:	a5 e5       	ldi	r26, 0x55	; 85
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e5       	ldi	r30, 0x55	; 85
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC10);
     ea8:	a5 e5       	ldi	r26, 0x55	; 85
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e5 e5       	ldi	r30, 0x55	; 85
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	84 60       	ori	r24, 0x04	; 4
     eb4:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     eb6:	19 82       	std	Y+1, r1	; 0x01
     eb8:	20 c0       	rjmp	.+64     	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else
			{
				retStatus = ERROR;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	1d c0       	rjmp	.+58     	; 0xefa <configExternalInterruptSensitivity+0x1b8>
		}
		case INT_2:
		{
			/* configure interrupt sensitivity */

			if(FALLING_EDGE == intSensitivity)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	49 f4       	brne	.+18     	; 0xed8 <configExternalInterruptSensitivity+0x196>
			{
				CLR_BIT(MCUCSR, ISC2);
     ec6:	a4 e5       	ldi	r26, 0x54	; 84
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e4 e5       	ldi	r30, 0x54	; 84
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7b       	andi	r24, 0xBF	; 191
     ed2:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     ed4:	19 82       	std	Y+1, r1	; 0x01
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(RISING_EDGE == intSensitivity)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	49 f4       	brne	.+18     	; 0xef0 <configExternalInterruptSensitivity+0x1ae>
			{
				SET_BIT(MCUCSR, ISC2);
     ede:	a4 e5       	ldi	r26, 0x54	; 84
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e5       	ldi	r30, 0x54	; 84
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     eec:	19 82       	std	Y+1, r1	; 0x01
     eee:	05 c0       	rjmp	.+10     	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else
			{
				retStatus = ERROR;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			break;
		}
		default:
			retStatus = ERROR;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	return retStatus;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <disableExternalInterrupt>:
 * params:
 * 			IN: exIntID : the ID of the external interrupt INT_0,INT_1, etc..
 *
 */
stdReturnType_t disableExternalInterrupt(extIntX_t exIntID)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <disableExternalInterrupt+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <disableExternalInterrupt+0x8>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	89 83       	std	Y+1, r24	; 0x01

	switch(exIntID)
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3c 83       	std	Y+4, r19	; 0x04
     f26:	2b 83       	std	Y+3, r18	; 0x03
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	89 f0       	breq	.+34     	; 0xf54 <disableExternalInterrupt+0x48>
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	a1 f0       	breq	.+40     	; 0xf64 <disableExternalInterrupt+0x58>
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	c1 f4       	brne	.+48     	; 0xf74 <disableExternalInterrupt+0x68>
	{
	case INT_0:
	{
		/* Enable interrupt 0 in General Interrupt Control Register -GICR- */
		CLR_BIT(GICR, INT0);
     f44:	ab e5       	ldi	r26, 0x5B	; 91
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	eb e5       	ldi	r30, 0x5B	; 91
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7b       	andi	r24, 0xBF	; 191
     f50:	8c 93       	st	X, r24
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <disableExternalInterrupt+0x6c>
		break;
	}
	case INT_1:
	{
		/* Enable interrupt 1 in General Interrupt Control Register -GICR- */
		CLR_BIT(GICR, INT1);
     f54:	ab e5       	ldi	r26, 0x5B	; 91
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e5       	ldi	r30, 0x5B	; 91
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 77       	andi	r24, 0x7F	; 127
     f60:	8c 93       	st	X, r24
     f62:	0a c0       	rjmp	.+20     	; 0xf78 <disableExternalInterrupt+0x6c>
		break;
	}
	case INT_2:
	{
		/* Enable interrupt 2 in General Interrupt Control Register -GICR- */
		CLR_BIT(GICR, INT2);
     f64:	ab e5       	ldi	r26, 0x5B	; 91
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	eb e5       	ldi	r30, 0x5B	; 91
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8f 7d       	andi	r24, 0xDF	; 223
     f70:	8c 93       	st	X, r24
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <disableExternalInterrupt+0x6c>
		break;
	}
	default:
		retStatus = ERROR;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return retStatus;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <disableGlobalInterrupts>:
 * params:
 * 			None.
 *
 */
stdReturnType_t disableGlobalInterrupts(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	stdReturnType_t retStatus = ERROR;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01

	/* Disable interrupts by clearing global interrupt bit in status register SREG */
	CLR_BIT(SREG, PIN7);
     f96:	af e5       	ldi	r26, 0x5F	; 95
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ef e5       	ldi	r30, 0x5F	; 95
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 77       	andi	r24, 0x7F	; 127
     fa2:	8c 93       	st	X, r24

	return retStatus;
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <enableGlobalInterrupts>:
 * params:
 * 			None.
 *
 */
stdReturnType_t enableGlobalInterrupts(void)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	stdReturnType_t retStatus = ERROR;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01

	/* Enable interrupts by enabling global interrupt bit in status register SREG */
	SET_BIT(SREG, PIN7);
     fbc:	af e5       	ldi	r26, 0x5F	; 95
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ef e5       	ldi	r30, 0x5F	; 95
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	8c 93       	st	X, r24

	return retStatus;
     fca:	89 81       	ldd	r24, Y+1	; 0x01
}
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <WDG_Enable>:
#include "../../LIB/std_types.h"
#include "../../LIB/bit_math.h"
#include "../../LIB/registers.h"
#include "WDG.h"

stdReturnType_t WDG_Enable(TimeConfig_t timeConfiguration) {
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <WDG_Enable+0x6>
     fda:	00 d0       	rcall	.+0      	; 0xfdc <WDG_Enable+0x8>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	8a 83       	std	Y+2, r24	; 0x02

	stdReturnType_t stats = SUCCESS;
     fe2:	19 82       	std	Y+1, r1	; 0x01

	WDTCR &= ~0x07;
     fe4:	a1 e4       	ldi	r26, 0x41	; 65
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e1 e4       	ldi	r30, 0x41	; 65
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 7f       	andi	r24, 0xF8	; 248
     ff0:	8c 93       	st	X, r24
	switch (timeConfiguration) {
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3c 83       	std	Y+4, r19	; 0x04
     ffa:	2b 83       	std	Y+3, r18	; 0x03
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	91 05       	cpc	r25, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <WDG_Enable+0x34>
    1006:	41 c0       	rjmp	.+130    	; 0x108a <WDG_Enable+0xb6>
    1008:	2b 81       	ldd	r18, Y+3	; 0x03
    100a:	3c 81       	ldd	r19, Y+4	; 0x04
    100c:	24 30       	cpi	r18, 0x04	; 4
    100e:	31 05       	cpc	r19, r1
    1010:	7c f4       	brge	.+30     	; 0x1030 <WDG_Enable+0x5c>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	39 f1       	breq	.+78     	; 0x106a <WDG_Enable+0x96>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	54 f5       	brge	.+84     	; 0x107a <WDG_Enable+0xa6>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	b1 f0       	breq	.+44     	; 0x105a <WDG_Enable+0x86>
    102e:	55 c0       	rjmp	.+170    	; 0x10da <WDG_Enable+0x106>
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	3c 81       	ldd	r19, Y+4	; 0x04
    1034:	25 30       	cpi	r18, 0x05	; 5
    1036:	31 05       	cpc	r19, r1
    1038:	c1 f1       	breq	.+112    	; 0x10aa <WDG_Enable+0xd6>
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	91 05       	cpc	r25, r1
    1042:	5c f1       	brlt	.+86     	; 0x109a <WDG_Enable+0xc6>
    1044:	2b 81       	ldd	r18, Y+3	; 0x03
    1046:	3c 81       	ldd	r19, Y+4	; 0x04
    1048:	26 30       	cpi	r18, 0x06	; 6
    104a:	31 05       	cpc	r19, r1
    104c:	b1 f1       	breq	.+108    	; 0x10ba <WDG_Enable+0xe6>
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	87 30       	cpi	r24, 0x07	; 7
    1054:	91 05       	cpc	r25, r1
    1056:	c9 f1       	breq	.+114    	; 0x10ca <WDG_Enable+0xf6>
    1058:	40 c0       	rjmp	.+128    	; 0x10da <WDG_Enable+0x106>
	case TIME_16_3_MS:
		WDTCR |= (1 << 3) | TIME_16_3_MS;
    105a:	a1 e4       	ldi	r26, 0x41	; 65
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e1 e4       	ldi	r30, 0x41	; 65
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	88 60       	ori	r24, 0x08	; 8
    1066:	8c 93       	st	X, r24
    1068:	3a c0       	rjmp	.+116    	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_32_5_MS:
		WDTCR |= (1 << 3) | TIME_32_5_MS;
    106a:	a1 e4       	ldi	r26, 0x41	; 65
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e1 e4       	ldi	r30, 0x41	; 65
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	89 60       	ori	r24, 0x09	; 9
    1076:	8c 93       	st	X, r24
    1078:	32 c0       	rjmp	.+100    	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_65_MS:
		WDTCR |= (1 << 3) | TIME_65_MS;
    107a:	a1 e4       	ldi	r26, 0x41	; 65
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e1 e4       	ldi	r30, 0x41	; 65
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8a 60       	ori	r24, 0x0A	; 10
    1086:	8c 93       	st	X, r24
    1088:	2a c0       	rjmp	.+84     	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_130_MS:
		WDTCR |= (1 << 3) | TIME_130_MS;
    108a:	a1 e4       	ldi	r26, 0x41	; 65
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e1 e4       	ldi	r30, 0x41	; 65
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8b 60       	ori	r24, 0x0B	; 11
    1096:	8c 93       	st	X, r24
    1098:	22 c0       	rjmp	.+68     	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_260_MS:
		WDTCR |= (1 << 3) | TIME_260_MS;
    109a:	a1 e4       	ldi	r26, 0x41	; 65
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e1 e4       	ldi	r30, 0x41	; 65
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8c 60       	ori	r24, 0x0C	; 12
    10a6:	8c 93       	st	X, r24
    10a8:	1a c0       	rjmp	.+52     	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_620_MS:
		WDTCR |= (1 << 3) | TIME_620_MS;
    10aa:	a1 e4       	ldi	r26, 0x41	; 65
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e1 e4       	ldi	r30, 0x41	; 65
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8d 60       	ori	r24, 0x0D	; 13
    10b6:	8c 93       	st	X, r24
    10b8:	12 c0       	rjmp	.+36     	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_1000_MS:
		WDTCR |= (1 << 3) | TIME_1000_MS;
    10ba:	a1 e4       	ldi	r26, 0x41	; 65
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e1 e4       	ldi	r30, 0x41	; 65
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8e 60       	ori	r24, 0x0E	; 14
    10c6:	8c 93       	st	X, r24
    10c8:	0a c0       	rjmp	.+20     	; 0x10de <WDG_Enable+0x10a>
		break;
	case TIME_2100_MS:
		WDTCR |= (1 << 3) | TIME_2100_MS;
    10ca:	a1 e4       	ldi	r26, 0x41	; 65
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e1 e4       	ldi	r30, 0x41	; 65
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 60       	ori	r24, 0x0F	; 15
    10d6:	8c 93       	st	X, r24
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <WDG_Enable+0x10a>
		break;
	default:
		stats = ERROR;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return stats;
    10de:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <WDG_Disable>:
stdReturnType_t WDG_Disable(void){
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62

	WDTCR |=(1<<3) | (1<<4);
    10f6:	a1 e4       	ldi	r26, 0x41	; 65
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e4       	ldi	r30, 0x41	; 65
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 61       	ori	r24, 0x18	; 24
    1102:	8c 93       	st	X, r24
	WDTCR =0;
    1104:	e1 e4       	ldi	r30, 0x41	; 65
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	10 82       	st	Z, r1

	return SUCCESS;
    110a:	80 e0       	ldi	r24, 0x00	; 0
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <WDG_Refresh>:
stdReturnType_t WDG_Refresh(TimeConfig_t timeConfiguration){
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <WDG_Refresh+0x6>
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	8a 83       	std	Y+2, r24	; 0x02

	stdReturnType_t stats = SUCCESS;
    1120:	19 82       	std	Y+1, r1	; 0x01
	WDG_Disable();
    1122:	0e 94 77 08 	call	0x10ee	; 0x10ee <WDG_Disable>
	 if (SUCCESS != WDG_Enable(timeConfiguration)){
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <WDG_Enable>
    112c:	88 23       	and	r24, r24
    112e:	19 f0       	breq	.+6      	; 0x1136 <WDG_Refresh+0x24>
		 return ERROR;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	02 c0       	rjmp	.+4      	; 0x113a <WDG_Refresh+0x28>
	 }
	 return stats;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <stub1>:
void (*ovfCallback)(void);
void (*cmCallback)(void);


void stub1(void)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62

}
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <stub2>:

void stub2(void)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62

}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <TIM0_init>:



void TIM0_init(void)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
	ovfCallback = stub1;
    116c:	84 ea       	ldi	r24, 0xA4	; 164
    116e:	98 e0       	ldi	r25, 0x08	; 8
    1170:	90 93 77 00 	sts	0x0077, r25
    1174:	80 93 76 00 	sts	0x0076, r24
	cmCallback = stub2;
    1178:	8b ea       	ldi	r24, 0xAB	; 171
    117a:	98 e0       	ldi	r25, 0x08	; 8
    117c:	90 93 75 00 	sts	0x0075, r25
    1180:	80 93 74 00 	sts	0x0074, r24

	TCNT0 = TIM0_TCNT0_INIT;
    1184:	e2 e5       	ldi	r30, 0x52	; 82
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	10 82       	st	Z, r1
	OCR0 = TIM0_OCR0_INIT;
    118a:	ec e5       	ldi	r30, 0x5C	; 92
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 e8       	ldi	r24, 0x80	; 128
    1190:	80 83       	st	Z, r24
		CLR_BIT(TCCR0,3);
		CLR_BIT(TCCR0,6);
	}
	else if(TIM0_MODE_SELECT == TIM0_CTC_MODE)
	{
		SET_BIT(TCCR0,3);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	88 60       	ori	r24, 0x08	; 8
    119e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
    11a0:	a3 e5       	ldi	r26, 0x53	; 83
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e3 e5       	ldi	r30, 0x53	; 83
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8f 7b       	andi	r24, 0xBF	; 191
    11ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
		SET_BIT(TCCR0,2);
	}
	else if(TIM0_PRESCALER_SELECT == TIM0_1024_PRESCALER_SELECT)
	{
		SET_BIT(TCCR0,0);
    11ae:	a3 e5       	ldi	r26, 0x53	; 83
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e3 e5       	ldi	r30, 0x53	; 83
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    11bc:	a3 e5       	ldi	r26, 0x53	; 83
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e3 e5       	ldi	r30, 0x53	; 83
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8d 7f       	andi	r24, 0xFD	; 253
    11c8:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    11ca:	a3 e5       	ldi	r26, 0x53	; 83
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e3 e5       	ldi	r30, 0x53	; 83
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	84 60       	ori	r24, 0x04	; 4
    11d6:	8c 93       	st	X, r24



	if(TIM0_COMPARE_MATCH_MODE_SELECT == TIM0_COMPARE_MATCH_NORMAL_MODE)
	{
		CLR_BIT(TCCR0,4);
    11d8:	a3 e5       	ldi	r26, 0x53	; 83
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e3 e5       	ldi	r30, 0x53	; 83
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 7e       	andi	r24, 0xEF	; 239
    11e4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);
    11e6:	a3 e5       	ldi	r26, 0x53	; 83
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e3 e5       	ldi	r30, 0x53	; 83
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7d       	andi	r24, 0xDF	; 223
    11f2:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR0,4);
		SET_BIT(TCCR0,5);
	}

}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <TIM0_overFlowIntState>:

void TIM0_overFlowIntState(u8 state)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	0f 92       	push	r0
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_OVF_INT_ENABLE)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	41 f4       	brne	.+16     	; 0x121c <TIM0_overFlowIntState+0x22>
	{
		SET_BIT(TIMSK,0);
    120c:	a9 e5       	ldi	r26, 0x59	; 89
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e9 e5       	ldi	r30, 0x59	; 89
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	8c 93       	st	X, r24
    121a:	0a c0       	rjmp	.+20     	; 0x1230 <TIM0_overFlowIntState+0x36>
	}
	else if(state == TIM0_OVF_INT_DISABLE)
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	88 23       	and	r24, r24
    1220:	39 f4       	brne	.+14     	; 0x1230 <TIM0_overFlowIntState+0x36>
	{
		CLR_BIT(TIMSK,0);
    1222:	a9 e5       	ldi	r26, 0x59	; 89
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e9 e5       	ldi	r30, 0x59	; 89
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8e 7f       	andi	r24, 0xFE	; 254
    122e:	8c 93       	st	X, r24
	}
}
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <TIM0_compareMatchIntState>:

void TIM0_compareMatchIntState(u8 state)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_CM_INT_ENABLE)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	41 f4       	brne	.+16     	; 0x125a <TIM0_compareMatchIntState+0x22>
	{
		SET_BIT(TIMSK,1);
    124a:	a9 e5       	ldi	r26, 0x59	; 89
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e9 e5       	ldi	r30, 0x59	; 89
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	82 60       	ori	r24, 0x02	; 2
    1256:	8c 93       	st	X, r24
    1258:	0a c0       	rjmp	.+20     	; 0x126e <TIM0_compareMatchIntState+0x36>
	}
	else if(state == TIM0_CM_INT_DISABLE)
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	88 23       	and	r24, r24
    125e:	39 f4       	brne	.+14     	; 0x126e <TIM0_compareMatchIntState+0x36>
	{
		CLR_BIT(TIMSK,1);
    1260:	a9 e5       	ldi	r26, 0x59	; 89
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e9 e5       	ldi	r30, 0x59	; 89
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	8d 7f       	andi	r24, 0xFD	; 253
    126c:	8c 93       	st	X, r24
	}
}
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <TIM0_setTCNT0>:

void TIM0_setTCNT0(u8 value)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	0f 92       	push	r0
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    1282:	e2 e5       	ldi	r30, 0x52	; 82
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	80 83       	st	Z, r24
}
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <TIM0_setOCRO>:

void TIM0_setOCRO(u8 value)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
    129e:	ec e5       	ldi	r30, 0x5C	; 92
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	80 83       	st	Z, r24
}
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <TIM0_forceOutputCompare>:

void TIM0_forceOutputCompare(u8 state)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	0f 92       	push	r0
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_CMO_ENABLE)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	41 f4       	brne	.+16     	; 0x12d0 <TIM0_forceOutputCompare+0x22>
	{
		SET_BIT(TCCR0,7);
    12c0:	a3 e5       	ldi	r26, 0x53	; 83
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e3 e5       	ldi	r30, 0x53	; 83
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	8c 93       	st	X, r24
    12ce:	0a c0       	rjmp	.+20     	; 0x12e4 <TIM0_forceOutputCompare+0x36>
	}
	else if(state == TIM0_CMO_DISABLE)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 23       	and	r24, r24
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <TIM0_forceOutputCompare+0x36>
	{
		CLR_BIT(TCCR0,7);
    12d6:	a3 e5       	ldi	r26, 0x53	; 83
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e3 e5       	ldi	r30, 0x53	; 83
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8f 77       	andi	r24, 0x7F	; 127
    12e2:	8c 93       	st	X, r24
	}

}
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <TIM0_setOvfIntCallback>:

void TIM0_setOvfIntCallback(void (*callbackPtr)(void))
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <TIM0_setOvfIntCallback+0x6>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
	ovfCallback = callbackPtr;
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	90 93 77 00 	sts	0x0077, r25
    1302:	80 93 76 00 	sts	0x0076, r24
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <TIM0_setCmIntCallback>:

void TIM0_setCmIntCallback(void (*callbackPtr)(void))
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <TIM0_setCmIntCallback+0x6>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	9a 83       	std	Y+2, r25	; 0x02
    131c:	89 83       	std	Y+1, r24	; 0x01
	cmCallback = callbackPtr;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	90 93 75 00 	sts	0x0075, r25
    1326:	80 93 74 00 	sts	0x0074, r24
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <__vector_10>:



void __vector_10 (void) __attribute__ ((signal,used));
void __vector_10 (void)
{
    1334:	1f 92       	push	r1
    1336:	0f 92       	push	r0
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	0f 92       	push	r0
    133c:	11 24       	eor	r1, r1
    133e:	2f 93       	push	r18
    1340:	3f 93       	push	r19
    1342:	4f 93       	push	r20
    1344:	5f 93       	push	r21
    1346:	6f 93       	push	r22
    1348:	7f 93       	push	r23
    134a:	8f 93       	push	r24
    134c:	9f 93       	push	r25
    134e:	af 93       	push	r26
    1350:	bf 93       	push	r27
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	cmCallback();
    135e:	e0 91 74 00 	lds	r30, 0x0074
    1362:	f0 91 75 00 	lds	r31, 0x0075
    1366:	09 95       	icall
}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	ff 91       	pop	r31
    136e:	ef 91       	pop	r30
    1370:	bf 91       	pop	r27
    1372:	af 91       	pop	r26
    1374:	9f 91       	pop	r25
    1376:	8f 91       	pop	r24
    1378:	7f 91       	pop	r23
    137a:	6f 91       	pop	r22
    137c:	5f 91       	pop	r21
    137e:	4f 91       	pop	r20
    1380:	3f 91       	pop	r19
    1382:	2f 91       	pop	r18
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <__vector_11>:

void __vector_11 (void) __attribute__ ((signal,used));
void __vector_11 (void)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	ovfCallback();
    13b8:	e0 91 76 00 	lds	r30, 0x0076
    13bc:	f0 91 77 00 	lds	r31, 0x0077
    13c0:	09 95       	icall
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	ff 91       	pop	r31
    13c8:	ef 91       	pop	r30
    13ca:	bf 91       	pop	r27
    13cc:	af 91       	pop	r26
    13ce:	9f 91       	pop	r25
    13d0:	8f 91       	pop	r24
    13d2:	7f 91       	pop	r23
    13d4:	6f 91       	pop	r22
    13d6:	5f 91       	pop	r21
    13d8:	4f 91       	pop	r20
    13da:	3f 91       	pop	r19
    13dc:	2f 91       	pop	r18
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <DIO_init>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			IN: direction : the direction of the pin INPUT/OUTPUT.
 */
stdReturnType_t DIO_init(portX_t PortName, pinX_t pinNum, pinDir_t direction)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <DIO_init+0x6>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <DIO_init+0x8>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <DIO_init+0xa>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	8a 83       	std	Y+2, r24	; 0x02
    13f8:	6b 83       	std	Y+3, r22	; 0x03
    13fa:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO: Validation of input */

	switch(PortName)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3e 83       	std	Y+6, r19	; 0x06
    1408:	2d 83       	std	Y+5, r18	; 0x05
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <DIO_init+0x2e>
    1414:	4b c0       	rjmp	.+150    	; 0x14ac <DIO_init+0xc4>
    1416:	2d 81       	ldd	r18, Y+5	; 0x05
    1418:	3e 81       	ldd	r19, Y+6	; 0x06
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	2c f4       	brge	.+10     	; 0x142a <DIO_init+0x42>
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	71 f0       	breq	.+28     	; 0x1444 <DIO_init+0x5c>
    1428:	dd c0       	rjmp	.+442    	; 0x15e4 <DIO_init+0x1fc>
    142a:	2d 81       	ldd	r18, Y+5	; 0x05
    142c:	3e 81       	ldd	r19, Y+6	; 0x06
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <DIO_init+0x4e>
    1434:	a3 c0       	rjmp	.+326    	; 0x157c <DIO_init+0x194>
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	91 05       	cpc	r25, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <DIO_init+0x5a>
    1440:	69 c0       	rjmp	.+210    	; 0x1514 <DIO_init+0x12c>
    1442:	d0 c0       	rjmp	.+416    	; 0x15e4 <DIO_init+0x1fc>
	{
		case PORT_A:
			if(INPUT == direction)
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	88 23       	and	r24, r24
    1448:	b1 f4       	brne	.+44     	; 0x1476 <DIO_init+0x8e>
			{
				CLR_BIT(DDRA, pinNum);
    144a:	aa e3       	ldi	r26, 0x3A	; 58
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ea e3       	ldi	r30, 0x3A	; 58
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_init+0x80>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_init+0x7c>
    146c:	80 95       	com	r24
    146e:	84 23       	and	r24, r20
    1470:	8c 93       	st	X, r24
				status = SUCCESS;
    1472:	19 82       	std	Y+1, r1	; 0x01
    1474:	b9 c0       	rjmp	.+370    	; 0x15e8 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	a9 f4       	brne	.+42     	; 0x14a6 <DIO_init+0xbe>
			{
				SET_BIT(DDRA, pinNum);
    147c:	aa e3       	ldi	r26, 0x3A	; 58
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ea e3       	ldi	r30, 0x3A	; 58
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_init+0xb2>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_init+0xae>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
				status = SUCCESS;
    14a2:	19 82       	std	Y+1, r1	; 0x01
    14a4:	a1 c0       	rjmp	.+322    	; 0x15e8 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	9e c0       	rjmp	.+316    	; 0x15e8 <DIO_init+0x200>
			}
			break;

		case PORT_B:
			if(INPUT == direction)
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	88 23       	and	r24, r24
    14b0:	b1 f4       	brne	.+44     	; 0x14de <DIO_init+0xf6>
			{
				CLR_BIT(DDRB, pinNum);
    14b2:	a7 e3       	ldi	r26, 0x37	; 55
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e7 e3       	ldi	r30, 0x37	; 55
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_init+0xe8>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_init+0xe4>
    14d4:	80 95       	com	r24
    14d6:	84 23       	and	r24, r20
    14d8:	8c 93       	st	X, r24
				status = SUCCESS;
    14da:	19 82       	std	Y+1, r1	; 0x01
    14dc:	85 c0       	rjmp	.+266    	; 0x15e8 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	a9 f4       	brne	.+42     	; 0x150e <DIO_init+0x126>
			{
				SET_BIT(DDRB, pinNum);
    14e4:	a7 e3       	ldi	r26, 0x37	; 55
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e7 e3       	ldi	r30, 0x37	; 55
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_init+0x11a>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_init+0x116>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
				status = SUCCESS;
    150a:	19 82       	std	Y+1, r1	; 0x01
    150c:	6d c0       	rjmp	.+218    	; 0x15e8 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a c0       	rjmp	.+212    	; 0x15e8 <DIO_init+0x200>
			}
			break;

		case PORT_C:
			if(INPUT == direction)
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	88 23       	and	r24, r24
    1518:	b1 f4       	brne	.+44     	; 0x1546 <DIO_init+0x15e>
			{
				CLR_BIT(DDRC, pinNum);
    151a:	a4 e3       	ldi	r26, 0x34	; 52
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e4 e3       	ldi	r30, 0x34	; 52
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_init+0x150>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_init+0x14c>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
				status = SUCCESS;
    1542:	19 82       	std	Y+1, r1	; 0x01
    1544:	51 c0       	rjmp	.+162    	; 0x15e8 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	a9 f4       	brne	.+42     	; 0x1576 <DIO_init+0x18e>
			{
				SET_BIT(DDRC, pinNum);
    154c:	a4 e3       	ldi	r26, 0x34	; 52
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e4 e3       	ldi	r30, 0x34	; 52
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_init+0x182>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_init+0x17e>
    156e:	84 2b       	or	r24, r20
    1570:	8c 93       	st	X, r24
				status = SUCCESS;
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	39 c0       	rjmp	.+114    	; 0x15e8 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	36 c0       	rjmp	.+108    	; 0x15e8 <DIO_init+0x200>
			}
			break;

		case PORT_D:
			if(INPUT == direction)
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	88 23       	and	r24, r24
    1580:	b1 f4       	brne	.+44     	; 0x15ae <DIO_init+0x1c6>
			{
				CLR_BIT(DDRD, pinNum);
    1582:	a1 e3       	ldi	r26, 0x31	; 49
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e1 e3       	ldi	r30, 0x31	; 49
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_init+0x1b8>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_init+0x1b4>
    15a4:	80 95       	com	r24
    15a6:	84 23       	and	r24, r20
    15a8:	8c 93       	st	X, r24
				status = SUCCESS;
    15aa:	19 82       	std	Y+1, r1	; 0x01
    15ac:	1d c0       	rjmp	.+58     	; 0x15e8 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	a9 f4       	brne	.+42     	; 0x15de <DIO_init+0x1f6>
			{
				SET_BIT(DDRD, pinNum);
    15b4:	a1 e3       	ldi	r26, 0x31	; 49
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e1 e3       	ldi	r30, 0x31	; 49
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_init+0x1ea>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_init+0x1e6>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
				status = SUCCESS;
    15da:	19 82       	std	Y+1, r1	; 0x01
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_init+0x200>
			}
			break;

		default:
		status = ERROR;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	89 83       	std	Y+1, r24	; 0x01
	}


	return status;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01

}
    15ea:	26 96       	adiw	r28, 0x06	; 6
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <DIO_read>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			OUT: ppinState : pointer to the direction of the pin HIGH/LOW.
 */
stdReturnType_t DIO_read(portX_t PortName, pinX_t pinNum, pinState_t * ppinState)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	27 97       	sbiw	r28, 0x07	; 7
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	6b 83       	std	Y+3, r22	; 0x03
    1614:	5d 83       	std	Y+5, r21	; 0x05
    1616:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01

    /*@TODO: Validation of input */
	if(NULL != ppinState)
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	9d 81       	ldd	r25, Y+5	; 0x05
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	09 f4       	brne	.+2      	; 0x1626 <DIO_read+0x2a>
    1624:	78 c0       	rjmp	.+240    	; 0x1716 <DIO_read+0x11a>
	{

		switch(PortName)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3f 83       	std	Y+7, r19	; 0x07
    162e:	2e 83       	std	Y+6, r18	; 0x06
    1630:	4e 81       	ldd	r20, Y+6	; 0x06
    1632:	5f 81       	ldd	r21, Y+7	; 0x07
    1634:	41 30       	cpi	r20, 0x01	; 1
    1636:	51 05       	cpc	r21, r1
    1638:	61 f1       	breq	.+88     	; 0x1692 <DIO_read+0x96>
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	91 05       	cpc	r25, r1
    1642:	34 f4       	brge	.+12     	; 0x1650 <DIO_read+0x54>
    1644:	2e 81       	ldd	r18, Y+6	; 0x06
    1646:	3f 81       	ldd	r19, Y+7	; 0x07
    1648:	21 15       	cp	r18, r1
    164a:	31 05       	cpc	r19, r1
    164c:	69 f0       	breq	.+26     	; 0x1668 <DIO_read+0x6c>
    164e:	60 c0       	rjmp	.+192    	; 0x1710 <DIO_read+0x114>
    1650:	4e 81       	ldd	r20, Y+6	; 0x06
    1652:	5f 81       	ldd	r21, Y+7	; 0x07
    1654:	42 30       	cpi	r20, 0x02	; 2
    1656:	51 05       	cpc	r21, r1
    1658:	09 f4       	brne	.+2      	; 0x165c <DIO_read+0x60>
    165a:	45 c0       	rjmp	.+138    	; 0x16e6 <DIO_read+0xea>
    165c:	8e 81       	ldd	r24, Y+6	; 0x06
    165e:	9f 81       	ldd	r25, Y+7	; 0x07
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	91 05       	cpc	r25, r1
    1664:	59 f1       	breq	.+86     	; 0x16bc <DIO_read+0xc0>
    1666:	54 c0       	rjmp	.+168    	; 0x1710 <DIO_read+0x114>
		{
			case PORT_A:
				{
					*ppinState = (pinState_t) GET_BIT(PINA, pinNum);
    1668:	e9 e3       	ldi	r30, 0x39	; 57
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a9 01       	movw	r20, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_read+0x84>
    167c:	55 95       	asr	r21
    167e:	47 95       	ror	r20
    1680:	8a 95       	dec	r24
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_read+0x80>
    1684:	ca 01       	movw	r24, r20
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	ec 81       	ldd	r30, Y+4	; 0x04
    168a:	fd 81       	ldd	r31, Y+5	; 0x05
    168c:	80 83       	st	Z, r24
					status = SUCCESS;
    168e:	19 82       	std	Y+1, r1	; 0x01
    1690:	44 c0       	rjmp	.+136    	; 0x171a <DIO_read+0x11e>
					break;
				}

			case PORT_B:
				{
					*ppinState = (pinState_t) GET_BIT(PINB, pinNum);
    1692:	e6 e3       	ldi	r30, 0x36	; 54
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a9 01       	movw	r20, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <DIO_read+0xae>
    16a6:	55 95       	asr	r21
    16a8:	47 95       	ror	r20
    16aa:	8a 95       	dec	r24
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <DIO_read+0xaa>
    16ae:	ca 01       	movw	r24, r20
    16b0:	81 70       	andi	r24, 0x01	; 1
    16b2:	ec 81       	ldd	r30, Y+4	; 0x04
    16b4:	fd 81       	ldd	r31, Y+5	; 0x05
    16b6:	80 83       	st	Z, r24
					status = SUCCESS;
    16b8:	19 82       	std	Y+1, r1	; 0x01
    16ba:	2f c0       	rjmp	.+94     	; 0x171a <DIO_read+0x11e>
					break;
				}

			case PORT_C:
				{
					*ppinState = (pinState_t) GET_BIT(PINC, pinNum);
    16bc:	e3 e3       	ldi	r30, 0x33	; 51
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_read+0xd8>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_read+0xd4>
    16d8:	ca 01       	movw	r24, r20
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	ec 81       	ldd	r30, Y+4	; 0x04
    16de:	fd 81       	ldd	r31, Y+5	; 0x05
    16e0:	80 83       	st	Z, r24
					status = SUCCESS;
    16e2:	19 82       	std	Y+1, r1	; 0x01
    16e4:	1a c0       	rjmp	.+52     	; 0x171a <DIO_read+0x11e>
				}
				break;

			case PORT_D:
				{
					*ppinState = (pinState_t) GET_BIT(PIND, pinNum);
    16e6:	e0 e3       	ldi	r30, 0x30	; 48
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_read+0x102>
    16fa:	55 95       	asr	r21
    16fc:	47 95       	ror	r20
    16fe:	8a 95       	dec	r24
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_read+0xfe>
    1702:	ca 01       	movw	r24, r20
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	ec 81       	ldd	r30, Y+4	; 0x04
    1708:	fd 81       	ldd	r31, Y+5	; 0x05
    170a:	80 83       	st	Z, r24
					status = SUCCESS;
    170c:	19 82       	std	Y+1, r1	; 0x01
    170e:	05 c0       	rjmp	.+10     	; 0x171a <DIO_read+0x11e>
					break;
				}

			default:
			status = ERROR;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_read+0x11e>
		}
	}
	else
	{
		status = ERROR;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	89 83       	std	Y+1, r24	; 0x01
	}


		return status;
    171a:	89 81       	ldd	r24, Y+1	; 0x01

}
    171c:	27 96       	adiw	r28, 0x07	; 7
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <DIO_write>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			IN: pinState : the value of the pin.
 */
stdReturnType_t DIO_write(portX_t portName, pinX_t pinNum, pinState_t pinState)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <DIO_write+0x6>
    1734:	00 d0       	rcall	.+0      	; 0x1736 <DIO_write+0x8>
    1736:	00 d0       	rcall	.+0      	; 0x1738 <DIO_write+0xa>
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	6b 83       	std	Y+3, r22	; 0x03
    1740:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO: Validation of input */

	switch(portName)
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	3e 83       	std	Y+6, r19	; 0x06
    174e:	2d 83       	std	Y+5, r18	; 0x05
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	91 05       	cpc	r25, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <DIO_write+0x2e>
    175a:	4b c0       	rjmp	.+150    	; 0x17f2 <DIO_write+0xc4>
    175c:	2d 81       	ldd	r18, Y+5	; 0x05
    175e:	3e 81       	ldd	r19, Y+6	; 0x06
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	2c f4       	brge	.+10     	; 0x1770 <DIO_write+0x42>
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	71 f0       	breq	.+28     	; 0x178a <DIO_write+0x5c>
    176e:	dd c0       	rjmp	.+442    	; 0x192a <DIO_write+0x1fc>
    1770:	2d 81       	ldd	r18, Y+5	; 0x05
    1772:	3e 81       	ldd	r19, Y+6	; 0x06
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <DIO_write+0x4e>
    177a:	a3 c0       	rjmp	.+326    	; 0x18c2 <DIO_write+0x194>
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	91 05       	cpc	r25, r1
    1784:	09 f4       	brne	.+2      	; 0x1788 <DIO_write+0x5a>
    1786:	69 c0       	rjmp	.+210    	; 0x185a <DIO_write+0x12c>
    1788:	d0 c0       	rjmp	.+416    	; 0x192a <DIO_write+0x1fc>
	{
		case PORT_A:
			if(PIN_IS_LOW == pinState)
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	88 23       	and	r24, r24
    178e:	b1 f4       	brne	.+44     	; 0x17bc <DIO_write+0x8e>
			{
				CLR_BIT(PORTA, pinNum);
    1790:	ab e3       	ldi	r26, 0x3B	; 59
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e3       	ldi	r30, 0x3B	; 59
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_write+0x80>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_write+0x7c>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
				status = SUCCESS;
    17b8:	19 82       	std	Y+1, r1	; 0x01
    17ba:	b9 c0       	rjmp	.+370    	; 0x192e <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	a9 f4       	brne	.+42     	; 0x17ec <DIO_write+0xbe>
			{
				SET_BIT(PORTA, pinNum);
    17c2:	ab e3       	ldi	r26, 0x3B	; 59
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	eb e3       	ldi	r30, 0x3B	; 59
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_write+0xb2>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <DIO_write+0xae>
    17e4:	84 2b       	or	r24, r20
    17e6:	8c 93       	st	X, r24
				status = SUCCESS;
    17e8:	19 82       	std	Y+1, r1	; 0x01
    17ea:	a1 c0       	rjmp	.+322    	; 0x192e <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	9e c0       	rjmp	.+316    	; 0x192e <DIO_write+0x200>
			}
			break;

		case PORT_B:
			if(PIN_IS_LOW == pinState)
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	88 23       	and	r24, r24
    17f6:	b1 f4       	brne	.+44     	; 0x1824 <DIO_write+0xf6>
			{
				CLR_BIT(PORTB, pinNum);
    17f8:	a8 e3       	ldi	r26, 0x38	; 56
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e8 e3       	ldi	r30, 0x38	; 56
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_write+0xe8>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <DIO_write+0xe4>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
				status = SUCCESS;
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	85 c0       	rjmp	.+266    	; 0x192e <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	a9 f4       	brne	.+42     	; 0x1854 <DIO_write+0x126>
			{
				SET_BIT(PORTB, pinNum);
    182a:	a8 e3       	ldi	r26, 0x38	; 56
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e8 e3       	ldi	r30, 0x38	; 56
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <DIO_write+0x11a>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <DIO_write+0x116>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
				status = SUCCESS;
    1850:	19 82       	std	Y+1, r1	; 0x01
    1852:	6d c0       	rjmp	.+218    	; 0x192e <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	6a c0       	rjmp	.+212    	; 0x192e <DIO_write+0x200>
			}
			break;

		case PORT_C:
			if(PIN_IS_LOW == pinState)
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	88 23       	and	r24, r24
    185e:	b1 f4       	brne	.+44     	; 0x188c <DIO_write+0x15e>
			{
				CLR_BIT(PORTC, pinNum);
    1860:	a5 e3       	ldi	r26, 0x35	; 53
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e5 e3       	ldi	r30, 0x35	; 53
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_write+0x150>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_write+0x14c>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
				status = SUCCESS;
    1888:	19 82       	std	Y+1, r1	; 0x01
    188a:	51 c0       	rjmp	.+162    	; 0x192e <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	a9 f4       	brne	.+42     	; 0x18bc <DIO_write+0x18e>
			{
				SET_BIT(PORTC, pinNum);
    1892:	a5 e3       	ldi	r26, 0x35	; 53
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e5 e3       	ldi	r30, 0x35	; 53
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_write+0x182>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_write+0x17e>
    18b4:	84 2b       	or	r24, r20
    18b6:	8c 93       	st	X, r24
				status = SUCCESS;
    18b8:	19 82       	std	Y+1, r1	; 0x01
    18ba:	39 c0       	rjmp	.+114    	; 0x192e <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	36 c0       	rjmp	.+108    	; 0x192e <DIO_write+0x200>
			}
			break;

		case PORT_D:
			if(PIN_IS_LOW == pinState)
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	88 23       	and	r24, r24
    18c6:	b1 f4       	brne	.+44     	; 0x18f4 <DIO_write+0x1c6>
			{
				CLR_BIT(PORTD, pinNum);
    18c8:	a2 e3       	ldi	r26, 0x32	; 50
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_write+0x1b8>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_write+0x1b4>
    18ea:	80 95       	com	r24
    18ec:	84 23       	and	r24, r20
    18ee:	8c 93       	st	X, r24
				status = SUCCESS;
    18f0:	19 82       	std	Y+1, r1	; 0x01
    18f2:	1d c0       	rjmp	.+58     	; 0x192e <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	a9 f4       	brne	.+42     	; 0x1924 <DIO_write+0x1f6>
			{
				SET_BIT(PORTD, pinNum);
    18fa:	a2 e3       	ldi	r26, 0x32	; 50
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e2 e3       	ldi	r30, 0x32	; 50
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_write+0x1ea>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_write+0x1e6>
    191c:	84 2b       	or	r24, r20
    191e:	8c 93       	st	X, r24
				status = SUCCESS;
    1920:	19 82       	std	Y+1, r1	; 0x01
    1922:	05 c0       	rjmp	.+10     	; 0x192e <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_write+0x200>
			}
			break;

		default:
		status = ERROR;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
	}

return status;
    192e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1930:	26 96       	adiw	r28, 0x06	; 6
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <ADC_init>:
/*************************************/
/* Description : This function is    */
/* used to initialize ADC            */
/*************************************/
extern void ADC_init()
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62

  /* Disable interrupt */
  CLR_BIT(ADCSRA,3);
    194a:	a6 e2       	ldi	r26, 0x26	; 38
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e6 e2       	ldi	r30, 0x26	; 38
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	87 7f       	andi	r24, 0xF7	; 247
    1956:	8c 93       	st	X, r24
  /* Clear interrupt flag */
  SET_BIT(ADCSRA,4);
    1958:	a6 e2       	ldi	r26, 0x26	; 38
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e6 e2       	ldi	r30, 0x26	; 38
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	80 61       	ori	r24, 0x10	; 16
    1964:	8c 93       	st	X, r24

  /* Enable ADC */
  ADC_enable();
    1966:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <ADC_enable>

  /* Configure resolution */
  #if ADC_u8_RESOLUTION_MODE == ADC_8_BIT_MODE
    SET_BIT(ADMUX,5);
  #elif ADC_u8_RESOLUTION_MODE == ADC_10_BIT_MODE
    CLR_BIT(ADMUX,5);
    196a:	a7 e2       	ldi	r26, 0x27	; 39
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e7 e2       	ldi	r30, 0x27	; 39
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8f 7d       	andi	r24, 0xDF	; 223
    1976:	8c 93       	st	X, r24
  #elif ADC_u8_PRESCALER_DIVISION == ADC_u8_PRESCALER_8
    SET_BIT(ADCSRA,0);
    SET_BIT(ADCSRA,1);
    CLR_BIT(ADCSRA,2);
  #elif ADC_u8_PRESCALER_DIVISION == ADC_u8_PRESCALER_16
    CLR_BIT(ADCSRA,0);
    1978:	a6 e2       	ldi	r26, 0x26	; 38
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e6 e2       	ldi	r30, 0x26	; 38
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA,1);
    1986:	a6 e2       	ldi	r26, 0x26	; 38
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e6 e2       	ldi	r30, 0x26	; 38
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8d 7f       	andi	r24, 0xFD	; 253
    1992:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,2);
    1994:	a6 e2       	ldi	r26, 0x26	; 38
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e6 e2       	ldi	r30, 0x26	; 38
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	84 60       	ori	r24, 0x04	; 4
    19a0:	8c 93       	st	X, r24
  /* Configure voltage reference */
  #if ADC_REFERENCE_VOLTAGE == ADC_AREF
    CLR_BIT(ADMUX,7);
    CLR_BIT(ADMUX,6);
  #elif ADC_REFERENCE_VOLTAGE == ADC_AVCC
    CLR_BIT(ADMUX,7);
    19a2:	a7 e2       	ldi	r26, 0x27	; 39
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e7 e2       	ldi	r30, 0x27	; 39
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 77       	andi	r24, 0x7F	; 127
    19ae:	8c 93       	st	X, r24
    SET_BIT(ADMUX,6);
    19b0:	a7 e2       	ldi	r26, 0x27	; 39
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e7 e2       	ldi	r30, 0x27	; 39
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 64       	ori	r24, 0x40	; 64
    19bc:	8c 93       	st	X, r24

  /* Configure operation mode */
  #if ADC_OPERATION_MODE == ADC_SINGLE_CONVERSION
    CLR_BIT(ADCSRA,5);
  #elif ADC_OPERATION_MODE == ADC_AUTO_TRIGGER
    SET_BIT(ADCSRA,5);
    19be:	a6 e2       	ldi	r26, 0x26	; 38
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e6 e2       	ldi	r30, 0x26	; 38
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	80 62       	ori	r24, 0x20	; 32
    19ca:	8c 93       	st	X, r24
  #endif

  /* Configure triggering mode */
  #if ADC_TRIGERRING_MODE == ADC_FREE_RUNNING_MODE
    CLR_BIT(SFIOR,5);
    19cc:	a0 e5       	ldi	r26, 0x50	; 80
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e0 e5       	ldi	r30, 0x50	; 80
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 7d       	andi	r24, 0xDF	; 223
    19d8:	8c 93       	st	X, r24
    CLR_BIT(SFIOR,6);
    19da:	a0 e5       	ldi	r26, 0x50	; 80
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e0 e5       	ldi	r30, 0x50	; 80
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7b       	andi	r24, 0xBF	; 191
    19e6:	8c 93       	st	X, r24
    CLR_BIT(SFIOR,7);
    19e8:	a0 e5       	ldi	r26, 0x50	; 80
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e0 e5       	ldi	r30, 0x50	; 80
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 77       	andi	r24, 0x7F	; 127
    19f4:	8c 93       	st	X, r24
    CLR_BIT(SFIOR,5);
    SET_BIT(SFIOR,6);
    SET_BIT(SFIOR,7);
  #endif

}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <ADC_u8StartConversion>:
/*************************************/
/* Description : This function is    */
/* used to start ADC conversion      */
/*************************************/
extern u8 ADC_u8StartConversion(u8 u8Channel,u16 *u16Val)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <ADC_u8StartConversion+0x6>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <ADC_u8StartConversion+0x8>
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	7b 83       	std	Y+3, r23	; 0x03
    1a0c:	6a 83       	std	Y+2, r22	; 0x02

  /* Select channel */
  ADMUX = (ADMUX & 0b11100000) | u8Channel;
    1a0e:	a7 e2       	ldi	r26, 0x27	; 39
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e7 e2       	ldi	r30, 0x27	; 39
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	98 2f       	mov	r25, r24
    1a1a:	90 7e       	andi	r25, 0xE0	; 224
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	89 2b       	or	r24, r25
    1a20:	8c 93       	st	X, r24

  /* Start conversion */
  SET_BIT(ADCSRA,6);
    1a22:	a6 e2       	ldi	r26, 0x26	; 38
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e6 e2       	ldi	r30, 0x26	; 38
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 64       	ori	r24, 0x40	; 64
    1a2e:	8c 93       	st	X, r24

  /* Check that interrupt is not enabled */
  if(GET_BIT(ADCSRA,3))
    1a30:	e6 e2       	ldi	r30, 0x26	; 38
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	86 95       	lsr	r24
    1a38:	86 95       	lsr	r24
    1a3a:	86 95       	lsr	r24
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	81 70       	andi	r24, 0x01	; 1
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	88 23       	and	r24, r24
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <ADC_u8StartConversion+0x52>
  {
    return ADC_NOT_OK;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	8c 83       	std	Y+4, r24	; 0x04
    1a4c:	19 c0       	rjmp	.+50     	; 0x1a80 <ADC_u8StartConversion+0x84>
  }
  else
  {
    /* Wait until conversion completes */
    while(!GET_BIT(ADCSRA,4)){}
    1a4e:	e6 e2       	ldi	r30, 0x26	; 38
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	82 95       	swap	r24
    1a56:	8f 70       	andi	r24, 0x0F	; 15
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	a9 f3       	breq	.-22     	; 0x1a4e <ADC_u8StartConversion+0x52>

    /* Clear interrupt flag */
    SET_BIT(ADCSRA,4);
    1a64:	a6 e2       	ldi	r26, 0x26	; 38
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e6 e2       	ldi	r30, 0x26	; 38
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 61       	ori	r24, 0x10	; 16
    1a70:	8c 93       	st	X, r24

    /* Read ADC value */
    *u16Val = ADC_u16GetLastValue();
    1a72:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <ADC_u16GetLastValue>
    1a76:	ea 81       	ldd	r30, Y+2	; 0x02
    1a78:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
    return ADC_OK;
    1a7e:	1c 82       	std	Y+4, r1	; 0x04
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
  }
}
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <ADC_u16GetLastValue>:
/*************************************/
/* Description : This function is    */
/* used to get last converted value  */
/*************************************/
extern u16 ADC_u16GetLastValue(void)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <ADC_u16GetLastValue+0x6>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
  u16Result = 0;
    1a9a:	10 92 73 00 	sts	0x0073, r1
    1a9e:	10 92 72 00 	sts	0x0072, r1

  #if ADC_u8_RESOLUTION_MODE == ADC_8_BIT_MODE
  u16Result = (u16) ADCH;
  return u16Result;
  #elif ADC_u8_RESOLUTION_MODE == ADC_10_BIT_MODE
  right = ADCL;
    1aa2:	e4 e2       	ldi	r30, 0x24	; 36
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	89 83       	std	Y+1, r24	; 0x01
  left = ADCH;
    1aaa:	e5 e2       	ldi	r30, 0x25	; 37
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8a 83       	std	Y+2, r24	; 0x02
  u16Result = (((u16)left)<<8) | ((u16)right);
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	38 2f       	mov	r19, r24
    1aba:	22 27       	eor	r18, r18
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	82 2b       	or	r24, r18
    1ac4:	93 2b       	or	r25, r19
    1ac6:	90 93 73 00 	sts	0x0073, r25
    1aca:	80 93 72 00 	sts	0x0072, r24
  return u16Result;
    1ace:	80 91 72 00 	lds	r24, 0x0072
    1ad2:	90 91 73 00 	lds	r25, 0x0073
  #endif
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <ADC_enable>:
/*************************************/
/* Description : This function is    */
/* used to enable ADC                */
/*************************************/
extern void ADC_enable(void)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA,7);
    1ae8:	a6 e2       	ldi	r26, 0x26	; 38
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e6 e2       	ldi	r30, 0x26	; 38
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 68       	ori	r24, 0x80	; 128
    1af4:	8c 93       	st	X, r24
}
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <ADC_disable>:
/*************************************/
/* Description : This function is    */
/* used to disable ADC               */
/*************************************/
extern void ADC_disable(void)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA,7);
    1b04:	a6 e2       	ldi	r26, 0x26	; 38
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e6 e2       	ldi	r30, 0x26	; 38
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8f 77       	andi	r24, 0x7F	; 127
    1b10:	8c 93       	st	X, r24
}
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <ADC_enableInterrupt>:
/*************************************/
/* Description : This function is    */
/* used to enable ADC interrupt      */
/*************************************/
extern void ADC_enableInterrupt(void)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA,3);
    1b20:	a6 e2       	ldi	r26, 0x26	; 38
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e6 e2       	ldi	r30, 0x26	; 38
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 60       	ori	r24, 0x08	; 8
    1b2c:	8c 93       	st	X, r24
}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <ADC_disableInterrupt>:
/*************************************/
/* Description : This function is    */
/* used to disable ADC interrupt     */
/*************************************/
extern void ADC_disableInterrupt(void)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA,3);
    1b3c:	a6 e2       	ldi	r26, 0x26	; 38
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e6 e2       	ldi	r30, 0x26	; 38
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	87 7f       	andi	r24, 0xF7	; 247
    1b48:	8c 93       	st	X, r24
}
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <ADC_voidSetCallBack>:
/*************************************/
/* Description : This function is    */
/* used to set ADC ISR callback      */
/*************************************/
extern void ADC_voidSetCallBack(void (*ptrCpy) (void))
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <ADC_voidSetCallBack+0x6>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01
  ADC_CALLBACK_FUNC = ptrCpy;
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	9a 81       	ldd	r25, Y+2	; 0x02
    1b62:	90 93 79 00 	sts	0x0079, r25
    1b66:	80 93 78 00 	sts	0x0078, r24
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <__vector_16>:
/* Description : This function is    */
/* the ISR ADC conversion            */
/*************************************/
void __vector_16 (void) __attribute__((signal,used));
void __vector_16 (void)
{
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	4f 93       	push	r20
    1b84:	5f 93       	push	r21
    1b86:	6f 93       	push	r22
    1b88:	7f 93       	push	r23
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	af 93       	push	r26
    1b90:	bf 93       	push	r27
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
  ADC_CALLBACK_FUNC();
    1b9e:	e0 91 78 00 	lds	r30, 0x0078
    1ba2:	f0 91 79 00 	lds	r31, 0x0079
    1ba6:	09 95       	icall
}
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	ff 91       	pop	r31
    1bae:	ef 91       	pop	r30
    1bb0:	bf 91       	pop	r27
    1bb2:	af 91       	pop	r26
    1bb4:	9f 91       	pop	r25
    1bb6:	8f 91       	pop	r24
    1bb8:	7f 91       	pop	r23
    1bba:	6f 91       	pop	r22
    1bbc:	5f 91       	pop	r21
    1bbe:	4f 91       	pop	r20
    1bc0:	3f 91       	pop	r19
    1bc2:	2f 91       	pop	r18
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <initSevenSegment>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t initSevenSegment(segments_t segmentID)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <initSevenSegment+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <initSevenSegment+0x8>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	89 83       	std	Y+1, r24	; 0x01

	switch(segmentID)
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3c 83       	std	Y+4, r19	; 0x04
    1be8:	2b 83       	std	Y+3, r18	; 0x03
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	31 f0       	breq	.+12     	; 0x1bfe <initSevenSegment+0x30>
    1bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf6:	21 30       	cpi	r18, 0x01	; 1
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	a9 f1       	breq	.+106    	; 0x1c66 <initSevenSegment+0x98>
    1bfc:	68 c0       	rjmp	.+208    	; 0x1cce <initSevenSegment+0x100>
	{
		case SEVEN_SEGMENT0:
			retStatus = DIO_init(SEVEN_SEG0_ENABLE_PORT, SEVEN_SEG0_ENABLE_PIN, OUTPUT);
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	62 e0       	ldi	r22, 0x02	; 2
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c08:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINA_PORT, SEVEN_SEG0_PINA_PIN, OUTPUT);
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	64 e0       	ldi	r22, 0x04	; 4
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c14:	98 2f       	mov	r25, r24
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	89 2b       	or	r24, r25
    1c1a:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINB_PORT, SEVEN_SEG0_PINB_PIN, OUTPUT);
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	65 e0       	ldi	r22, 0x05	; 5
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c26:	98 2f       	mov	r25, r24
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	89 2b       	or	r24, r25
    1c2c:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINC_PORT, SEVEN_SEG0_PINC_PIN, OUTPUT);
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	66 e0       	ldi	r22, 0x06	; 6
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c38:	98 2f       	mov	r25, r24
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	89 2b       	or	r24, r25
    1c3e:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PIND_PORT, SEVEN_SEG0_PIND_PIN, OUTPUT);
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	67 e0       	ldi	r22, 0x07	; 7
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	89 2b       	or	r24, r25
    1c50:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_DB_PORT, SEVEN_SEG0_DB_PIN, OUTPUT);
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	89 2b       	or	r24, r25
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	36 c0       	rjmp	.+108    	; 0x1cd2 <initSevenSegment+0x104>
			break;

		case SEVEN_SEGMENT1:
			retStatus = DIO_init(SEVEN_SEG1_ENABLE_PORT, SEVEN_SEG1_ENABLE_PIN, OUTPUT);
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	63 e0       	ldi	r22, 0x03	; 3
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c70:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINA_PORT, SEVEN_SEG1_PINA_PIN, OUTPUT);
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	64 e0       	ldi	r22, 0x04	; 4
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	89 2b       	or	r24, r25
    1c82:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINB_PORT, SEVEN_SEG1_PINB_PIN, OUTPUT);
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	65 e0       	ldi	r22, 0x05	; 5
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1c8e:	98 2f       	mov	r25, r24
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	89 2b       	or	r24, r25
    1c94:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINC_PORT, SEVEN_SEG1_PINC_PIN, OUTPUT);
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	66 e0       	ldi	r22, 0x06	; 6
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	89 2b       	or	r24, r25
    1ca6:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PIND_PORT, SEVEN_SEG1_PIND_PIN, OUTPUT);
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	67 e0       	ldi	r22, 0x07	; 7
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	89 2b       	or	r24, r25
    1cb8:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_DB_PORT, SEVEN_SEG1_DB_PIN, OUTPUT);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1cc4:	98 2f       	mov	r25, r24
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	89 2b       	or	r24, r25
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <initSevenSegment+0x104>
			break;

		default:
			/* invalid segment ID*/
			retStatus = ERROR;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <controlSevenSegment>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: state : the state of seven segments ENABLED/DISABLED.
 *
 */
stdReturnType_t controlSevenSegment(segments_t segmentID, segmentState_t state)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <controlSevenSegment+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <controlSevenSegment+0x8>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus;

	switch(segmentID)
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	3d 83       	std	Y+5, r19	; 0x05
    1cfc:	2c 83       	std	Y+4, r18	; 0x04
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	31 f0       	breq	.+12     	; 0x1d12 <controlSevenSegment+0x30>
    1d06:	2c 81       	ldd	r18, Y+4	; 0x04
    1d08:	3d 81       	ldd	r19, Y+5	; 0x05
    1d0a:	21 30       	cpi	r18, 0x01	; 1
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	41 f0       	breq	.+16     	; 0x1d20 <controlSevenSegment+0x3e>
    1d10:	0e c0       	rjmp	.+28     	; 0x1d2e <controlSevenSegment+0x4c>
	{
		case SEVEN_SEGMENT0:
			DIO_write(SEVEN_SEG0_ENABLE_PORT, SEVEN_SEG0_ENABLE_PIN, (pinState_t)state);
    1d12:	83 e0       	ldi	r24, 0x03	; 3
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	4b 81       	ldd	r20, Y+3	; 0x03
    1d18:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
			retStatus = SUCCESS;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
    1d1e:	09 c0       	rjmp	.+18     	; 0x1d32 <controlSevenSegment+0x50>
			break;

		case SEVEN_SEGMENT1:
			DIO_write(SEVEN_SEG1_ENABLE_PORT, SEVEN_SEG1_ENABLE_PIN, (pinState_t)state);
    1d20:	83 e0       	ldi	r24, 0x03	; 3
    1d22:	63 e0       	ldi	r22, 0x03	; 3
    1d24:	4b 81       	ldd	r20, Y+3	; 0x03
    1d26:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
			retStatus = SUCCESS;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <controlSevenSegment+0x50>
			break;

		default:
			retStatus = ERROR;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return retStatus;
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <writeToSevenSegment>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: num : the num to write and should be [0:9].
 *
 */
stdReturnType_t writeToSevenSegment(segments_t segmentID, SegmentNumbers_t num)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <writeToSevenSegment+0x6>
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <writeToSevenSegment+0x8>
    1d4c:	0f 92       	push	r0
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	8a 83       	std	Y+2, r24	; 0x02
    1d54:	6b 83       	std	Y+3, r22	; 0x03
 stdReturnType_t retStatus = ERROR;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	89 83       	std	Y+1, r24	; 0x01

	switch(segmentID)
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3d 83       	std	Y+5, r19	; 0x05
    1d62:	2c 83       	std	Y+4, r18	; 0x04
    1d64:	8c 81       	ldd	r24, Y+4	; 0x04
    1d66:	9d 81       	ldd	r25, Y+5	; 0x05
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	31 f0       	breq	.+12     	; 0x1d78 <writeToSevenSegment+0x34>
    1d6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d70:	21 30       	cpi	r18, 0x01	; 1
    1d72:	31 05       	cpc	r19, r1
    1d74:	a9 f1       	breq	.+106    	; 0x1de0 <writeToSevenSegment+0x9c>
    1d76:	68 c0       	rjmp	.+208    	; 0x1e48 <writeToSevenSegment+0x104>
	{
		case SEVEN_SEGMENT0:
			retStatus  = DIO_write(SEVEN_SEG0_PINA_PORT, SEVEN_SEG0_PINA_PIN, GET_PIN_VAL(num, 0));
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	91 70       	andi	r25, 0x01	; 1
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	64 e0       	ldi	r22, 0x04	; 4
    1d82:	49 2f       	mov	r20, r25
    1d84:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1d88:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PINB_PORT, SEVEN_SEG0_PINB_PIN, GET_PIN_VAL(num, 1));
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	86 95       	lsr	r24
    1d8e:	98 2f       	mov	r25, r24
    1d90:	91 70       	andi	r25, 0x01	; 1
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	65 e0       	ldi	r22, 0x05	; 5
    1d96:	49 2f       	mov	r20, r25
    1d98:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1d9c:	98 2f       	mov	r25, r24
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	89 2b       	or	r24, r25
    1da2:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PINC_PORT, SEVEN_SEG0_PINC_PIN, GET_PIN_VAL(num, 2));
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	86 95       	lsr	r24
    1da8:	86 95       	lsr	r24
    1daa:	98 2f       	mov	r25, r24
    1dac:	91 70       	andi	r25, 0x01	; 1
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	66 e0       	ldi	r22, 0x06	; 6
    1db2:	49 2f       	mov	r20, r25
    1db4:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1db8:	98 2f       	mov	r25, r24
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	89 2b       	or	r24, r25
    1dbe:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PIND_PORT, SEVEN_SEG0_PIND_PIN, GET_PIN_VAL(num, 3));
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	86 95       	lsr	r24
    1dc4:	86 95       	lsr	r24
    1dc6:	86 95       	lsr	r24
    1dc8:	98 2f       	mov	r25, r24
    1dca:	91 70       	andi	r25, 0x01	; 1
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	67 e0       	ldi	r22, 0x07	; 7
    1dd0:	49 2f       	mov	r20, r25
    1dd2:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1dd6:	98 2f       	mov	r25, r24
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	89 2b       	or	r24, r25
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	36 c0       	rjmp	.+108    	; 0x1e4c <writeToSevenSegment+0x108>
			break;

		case SEVEN_SEGMENT1:
			retStatus  = DIO_write(SEVEN_SEG1_PINA_PORT, SEVEN_SEG1_PINA_PIN, GET_PIN_VAL(num, 0));
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	98 2f       	mov	r25, r24
    1de4:	91 70       	andi	r25, 0x01	; 1
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	64 e0       	ldi	r22, 0x04	; 4
    1dea:	49 2f       	mov	r20, r25
    1dec:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1df0:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PINB_PORT, SEVEN_SEG1_PINB_PIN, GET_PIN_VAL(num, 1));
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	86 95       	lsr	r24
    1df6:	98 2f       	mov	r25, r24
    1df8:	91 70       	andi	r25, 0x01	; 1
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	65 e0       	ldi	r22, 0x05	; 5
    1dfe:	49 2f       	mov	r20, r25
    1e00:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1e04:	98 2f       	mov	r25, r24
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	89 2b       	or	r24, r25
    1e0a:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PINC_PORT, SEVEN_SEG1_PINC_PIN, GET_PIN_VAL(num, 2));
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	86 95       	lsr	r24
    1e10:	86 95       	lsr	r24
    1e12:	98 2f       	mov	r25, r24
    1e14:	91 70       	andi	r25, 0x01	; 1
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	66 e0       	ldi	r22, 0x06	; 6
    1e1a:	49 2f       	mov	r20, r25
    1e1c:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1e20:	98 2f       	mov	r25, r24
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	89 2b       	or	r24, r25
    1e26:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PIND_PORT, SEVEN_SEG1_PIND_PIN, GET_PIN_VAL(num, 3));
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	86 95       	lsr	r24
    1e2c:	86 95       	lsr	r24
    1e2e:	86 95       	lsr	r24
    1e30:	98 2f       	mov	r25, r24
    1e32:	91 70       	andi	r25, 0x01	; 1
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	67 e0       	ldi	r22, 0x07	; 7
    1e38:	49 2f       	mov	r20, r25
    1e3a:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1e3e:	98 2f       	mov	r25, r24
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	89 2b       	or	r24, r25
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <writeToSevenSegment+0x108>
			break;

		default:
			retStatus = ERROR;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

 return retStatus;
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <writeDecimalPoint>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: state : the state of decimal point.
 *
 */
static stdReturnType_t writeDecimalPoint(segments_t segmentID, segmentState_t state)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <writeDecimalPoint+0x6>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <writeDecimalPoint+0x8>
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
    1e6e:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	89 83       	std	Y+1, r24	; 0x01

		switch(segmentID)
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3d 83       	std	Y+5, r19	; 0x05
    1e7c:	2c 83       	std	Y+4, r18	; 0x04
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	31 f0       	breq	.+12     	; 0x1e92 <writeDecimalPoint+0x34>
    1e86:	2c 81       	ldd	r18, Y+4	; 0x04
    1e88:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8a:	21 30       	cpi	r18, 0x01	; 1
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	41 f0       	breq	.+16     	; 0x1ea0 <writeDecimalPoint+0x42>
    1e90:	0e c0       	rjmp	.+28     	; 0x1eae <writeDecimalPoint+0x50>
		{
			case SEVEN_SEGMENT0:
				retStatus  = DIO_write(SEVEN_SEG0_DB_PORT, SEVEN_SEG0_DB_PIN, state);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	4b 81       	ldd	r20, Y+3	; 0x03
    1e98:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	09 c0       	rjmp	.+18     	; 0x1eb2 <writeDecimalPoint+0x54>
				break;

			case SEVEN_SEGMENT1:
				retStatus  = DIO_write(SEVEN_SEG1_DB_PORT, SEVEN_SEG1_DB_PIN, state);
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ea6:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <writeDecimalPoint+0x54>
				break;

			default:
				retStatus = ERROR;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
				break;
		}

	 return retStatus;
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <TurnOnDecimalPoint>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t TurnOnDecimalPoint(segments_t segmentID)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	89 83       	std	Y+1, r24	; 0x01
	return writeDecimalPoint(segmentID, SEGMENT_ENABLED);
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <writeDecimalPoint>
}
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <TurnOffDecimalPoint>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t TurnOffDecimalPoint(segments_t segmentID)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	89 83       	std	Y+1, r24	; 0x01
	return writeDecimalPoint(segmentID, SEGMANT_DISABLED);
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <writeDecimalPoint>
}
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <initLed>:
 * params:
 * 			IN: ledID : the name of the needed LED.
 *
 */
stdReturnType_t initLed(ledX_t ledID)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <initLed+0x6>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <initLed+0x8>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	89 83       	std	Y+1, r24	; 0x01

	switch(ledID)
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3c 83       	std	Y+4, r19	; 0x04
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	81 f0       	breq	.+32     	; 0x1f42 <initLed+0x46>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	91 f0       	breq	.+36     	; 0x1f50 <initLed+0x54>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	a9 f4       	brne	.+42     	; 0x1f5e <initLed+0x62>
	{
		case LED0:
			retStatus = DIO_init(LED0_PORT, LED0_PIN, OUTPUT);
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	65 e0       	ldi	r22, 0x05	; 5
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	10 c0       	rjmp	.+32     	; 0x1f62 <initLed+0x66>
			break;

		case LED1:
			retStatus = DIO_init(LED1_PORT, LED1_PIN, OUTPUT);
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	66 e0       	ldi	r22, 0x06	; 6
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <initLed+0x66>
			break;

		case LED2:
			retStatus = DIO_init(LED2_PORT, LED2_PIN, OUTPUT);
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	67 e0       	ldi	r22, 0x07	; 7
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <initLed+0x66>
			break;

		default:
			/* ERROR given ledID is not supported */
			retStatus = ERROR;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <changeLedState>:
 * params:
 * 			IN: ledID : the name of the needed LED.
 * 			IN: pinState : the value of the pin HIGH/LOW.
 */
static stdReturnType_t changeLedState(ledX_t ledID, pinState_t pinState)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <changeLedState+0x6>
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <changeLedState+0x8>
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	8a 83       	std	Y+2, r24	; 0x02
    1f82:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO : check pinState */

	switch(ledID)
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	3d 83       	std	Y+5, r19	; 0x05
    1f90:	2c 83       	std	Y+4, r18	; 0x04
    1f92:	8c 81       	ldd	r24, Y+4	; 0x04
    1f94:	9d 81       	ldd	r25, Y+5	; 0x05
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	91 05       	cpc	r25, r1
    1f9a:	81 f0       	breq	.+32     	; 0x1fbc <changeLedState+0x4a>
    1f9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	91 f0       	breq	.+36     	; 0x1fca <changeLedState+0x58>
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	a9 f4       	brne	.+42     	; 0x1fd8 <changeLedState+0x66>
	{
		case LED0:
			retStatus = DIO_write(LED0_PORT, LED0_PIN, pinState);
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	65 e0       	ldi	r22, 0x05	; 5
    1fb2:	4b 81       	ldd	r20, Y+3	; 0x03
    1fb4:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	10 c0       	rjmp	.+32     	; 0x1fdc <changeLedState+0x6a>
			break;

		case LED1:
			retStatus = DIO_write(LED1_PORT, LED1_PIN, pinState);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	66 e0       	ldi	r22, 0x06	; 6
    1fc0:	4b 81       	ldd	r20, Y+3	; 0x03
    1fc2:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	09 c0       	rjmp	.+18     	; 0x1fdc <changeLedState+0x6a>
			break;

		case LED2:
			retStatus = DIO_write(LED2_PORT, LED2_PIN, pinState);
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	67 e0       	ldi	r22, 0x07	; 7
    1fce:	4b 81       	ldd	r20, Y+3	; 0x03
    1fd0:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <changeLedState+0x6a>
			break;

		default:
			/* ERROR given ledID is not supported */
			retStatus = ERROR;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	89 83       	std	Y+1, r24	; 0x01
			break;
	}


	return retStatus;
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <turnOnLed>:
 * brief: used to turn given LED ON.
 * params:
 * 			IN: ledID : the name of the needed LED.
 */
stdReturnType_t turnOnLed(ledX_t ledID)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	0f 92       	push	r0
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	return changeLedState(ledID, PIN_IS_HIGH);
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <changeLedState>
}
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <turnOffLed>:
 * brief: used to turn given LED OFF.
 * params:
 * 			IN: ledID : the name of the needed LED.
 */
stdReturnType_t turnOffLed(ledX_t ledID)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
	return changeLedState(ledID, PIN_IS_LOW);
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <changeLedState>
}
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <toogleLed>:

stdReturnType_t toogleLed(ledX_t ledID)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	6e 97       	sbiw	r28, 0x1e	; 30
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	8e 8f       	std	Y+30, r24	; 0x1e
	stdReturnType_t stats = ERROR;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	8d 8f       	std	Y+29, r24	; 0x1d
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e2       	ldi	r26, 0x20	; 32
    2046:	b1 e4       	ldi	r27, 0x41	; 65
    2048:	89 8f       	std	Y+25, r24	; 0x19
    204a:	9a 8f       	std	Y+26, r25	; 0x1a
    204c:	ab 8f       	std	Y+27, r26	; 0x1b
    204e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	69 8d       	ldd	r22, Y+25	; 0x19
    2052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a e7       	ldi	r20, 0x7A	; 122
    205e:	55 e4       	ldi	r21, 0x45	; 69
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8d 8b       	std	Y+21, r24	; 0x15
    206a:	9e 8b       	std	Y+22, r25	; 0x16
    206c:	af 8b       	std	Y+23, r26	; 0x17
    206e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2070:	6d 89       	ldd	r22, Y+21	; 0x15
    2072:	7e 89       	ldd	r23, Y+22	; 0x16
    2074:	8f 89       	ldd	r24, Y+23	; 0x17
    2076:	98 8d       	ldd	r25, Y+24	; 0x18
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <toogleLed+0x6c>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <toogleLed+0xea>
	else if (__tmp > 65535)
    2092:	6d 89       	ldd	r22, Y+21	; 0x15
    2094:	7e 89       	ldd	r23, Y+22	; 0x16
    2096:	8f 89       	ldd	r24, Y+23	; 0x17
    2098:	98 8d       	ldd	r25, Y+24	; 0x18
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <toogleLed+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	69 8d       	ldd	r22, Y+25	; 0x19
    20ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <toogleLed+0xcc>
    20d4:	80 e9       	ldi	r24, 0x90	; 144
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	9a 8b       	std	Y+18, r25	; 0x12
    20da:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20dc:	89 89       	ldd	r24, Y+17	; 0x11
    20de:	9a 89       	ldd	r25, Y+18	; 0x12
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <toogleLed+0xba>
    20e4:	9a 8b       	std	Y+18, r25	; 0x12
    20e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ea:	9c 89       	ldd	r25, Y+20	; 0x14
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <toogleLed+0xae>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <toogleLed+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6d 89       	ldd	r22, Y+21	; 0x15
    20fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2100:	8f 89       	ldd	r24, Y+23	; 0x17
    2102:	98 8d       	ldd	r25, Y+24	; 0x18
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	8b 8b       	std	Y+19, r24	; 0x13
    2110:	8b 89       	ldd	r24, Y+19	; 0x13
    2112:	9c 89       	ldd	r25, Y+20	; 0x14
    2114:	98 8b       	std	Y+16, r25	; 0x10
    2116:	8f 87       	std	Y+15, r24	; 0x0f
    2118:	8f 85       	ldd	r24, Y+15	; 0x0f
    211a:	98 89       	ldd	r25, Y+16	; 0x10
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <toogleLed+0xf6>
    2120:	98 8b       	std	Y+16, r25	; 0x10
    2122:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	turnOnLed(ledID);
    2124:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2126:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <turnOnLed>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 e2       	ldi	r26, 0x20	; 32
    2130:	b1 e4       	ldi	r27, 0x41	; 65
    2132:	8b 87       	std	Y+11, r24	; 0x0b
    2134:	9c 87       	std	Y+12, r25	; 0x0c
    2136:	ad 87       	std	Y+13, r26	; 0x0d
    2138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6b 85       	ldd	r22, Y+11	; 0x0b
    213c:	7c 85       	ldd	r23, Y+12	; 0x0c
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	55 e4       	ldi	r21, 0x45	; 69
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	98 87       	std	Y+8, r25	; 0x08
    2156:	a9 87       	std	Y+9, r26	; 0x09
    2158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <toogleLed+0x156>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <toogleLed+0x1d4>
	else if (__tmp > 65535)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <toogleLed+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <toogleLed+0x1b6>
    21be:	80 e9       	ldi	r24, 0x90	; 144
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <toogleLed+0x1a4>
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <toogleLed+0x198>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <toogleLed+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <toogleLed+0x1e0>
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
  stats|=	turnOffLed(ledID);
    220e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2210:	0e 94 05 10 	call	0x200a	; 0x200a <turnOffLed>
    2214:	98 2f       	mov	r25, r24
    2216:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2218:	89 2b       	or	r24, r25
    221a:	8d 8f       	std	Y+29, r24	; 0x1d
	stats = SUCCESS;
    221c:	1d 8e       	std	Y+29, r1	; 0x1d
	return stats;
    221e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2220:	6e 96       	adiw	r28, 0x1e	; 30
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <LCD_outToDataLines>:

static stdReturnType_t LCD_sendCommand(u8 command);
static stdReturnType_t LCD_outToDataLines(u8 val);

static stdReturnType_t LCD_outToDataLines(u8 val)
{
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	c4 56       	subi	r28, 0x64	; 100
    2240:	d0 40       	sbci	r29, 0x00	; 0
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	fe 01       	movw	r30, r28
    224e:	ec 59       	subi	r30, 0x9C	; 156
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 83       	st	Z, r24
	stdReturnType_t retStatus = ERROR;
    2254:	fe 01       	movw	r30, r28
    2256:	ed 59       	subi	r30, 0x9D	; 157
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	80 83       	st	Z, r24

	/* write data to LCD so RW=0 */
	retStatus = DIO_write(LCD_CTRL_LINES_PORT, LCD_RW_PIN, WRITE_DATA);
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	62 e0       	ldi	r22, 0x02	; 2
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    2268:	fe 01       	movw	r30, r28
    226a:	ed 59       	subi	r30, 0x9D	; 157
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 83       	st	Z, r24
    2270:	fe 01       	movw	r30, r28
    2272:	e1 5a       	subi	r30, 0xA1	; 161
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e8       	ldi	r26, 0x80	; 128
    227c:	bf e3       	ldi	r27, 0x3F	; 63
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	8e 01       	movw	r16, r28
    2288:	05 5a       	subi	r16, 0xA5	; 165
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e1 5a       	subi	r30, 0xA1	; 161
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a e7       	ldi	r20, 0x7A	; 122
    22a0:	55 e4       	ldi	r21, 0x45	; 69
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e5 5a       	subi	r30, 0xA5	; 165
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	44 f4       	brge	.+16     	; 0x22e2 <LCD_outToDataLines+0xb0>
		__ticks = 1;
    22d2:	fe 01       	movw	r30, r28
    22d4:	e7 5a       	subi	r30, 0xA7	; 167
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	64 c0       	rjmp	.+200    	; 0x23aa <LCD_outToDataLines+0x178>
	else if (__tmp > 65535)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e5 5a       	subi	r30, 0xA5	; 165
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <LCD_outToDataLines+0xd0>
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <LCD_outToDataLines+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	fe 01       	movw	r30, r28
    2304:	e1 5a       	subi	r30, 0xA1	; 161
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8e 01       	movw	r16, r28
    2322:	07 5a       	subi	r16, 0xA7	; 167
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	1f c0       	rjmp	.+62     	; 0x2378 <LCD_outToDataLines+0x146>
    233a:	fe 01       	movw	r30, r28
    233c:	e9 5a       	subi	r30, 0xA9	; 169
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 e9       	ldi	r24, 0x90	; 144
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	fe 01       	movw	r30, r28
    234a:	e9 5a       	subi	r30, 0xA9	; 169
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_outToDataLines+0x120>
    2356:	fe 01       	movw	r30, r28
    2358:	e9 5a       	subi	r30, 0xA9	; 169
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	de 01       	movw	r26, r28
    2362:	a7 5a       	subi	r26, 0xA7	; 167
    2364:	bf 4f       	sbci	r27, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e7 5a       	subi	r30, 0xA7	; 167
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 93       	st	X, r25
    2376:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	fe 01       	movw	r30, r28
    237a:	e7 5a       	subi	r30, 0xA7	; 167
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	d1 f6       	brne	.-76     	; 0x233a <LCD_outToDataLines+0x108>
    2386:	27 c0       	rjmp	.+78     	; 0x23d6 <LCD_outToDataLines+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	8e 01       	movw	r16, r28
    238a:	07 5a       	subi	r16, 0xA7	; 167
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	e5 5a       	subi	r30, 0xA5	; 165
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	f8 01       	movw	r30, r16
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
    23aa:	de 01       	movw	r26, r28
    23ac:	ab 5a       	subi	r26, 0xAB	; 171
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 5a       	subi	r30, 0xA7	; 167
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	8d 93       	st	X+, r24
    23bc:	9c 93       	st	X, r25
    23be:	fe 01       	movw	r30, r28
    23c0:	eb 5a       	subi	r30, 0xAB	; 171
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_outToDataLines+0x196>
    23cc:	fe 01       	movw	r30, r28
    23ce:	eb 5a       	subi	r30, 0xAB	; 171
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	/* Enable LCD E=1 */
	retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, ENABLE_LCD);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	63 e0       	ldi	r22, 0x03	; 3
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    23e0:	98 2f       	mov	r25, r24
    23e2:	de 01       	movw	r26, r28
    23e4:	ad 59       	subi	r26, 0x9D	; 157
    23e6:	bf 4f       	sbci	r27, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	ed 59       	subi	r30, 0x9D	; 157
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	89 2b       	or	r24, r25
    23f2:	8c 93       	st	X, r24
    23f4:	fe 01       	movw	r30, r28
    23f6:	ef 5a       	subi	r30, 0xAF	; 175
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	a0 e8       	ldi	r26, 0x80	; 128
    2400:	bf e3       	ldi	r27, 0x3F	; 63
    2402:	80 83       	st	Z, r24
    2404:	91 83       	std	Z+1, r25	; 0x01
    2406:	a2 83       	std	Z+2, r26	; 0x02
    2408:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240a:	8e 01       	movw	r16, r28
    240c:	03 5b       	subi	r16, 0xB3	; 179
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	fe 01       	movw	r30, r28
    2412:	ef 5a       	subi	r30, 0xAF	; 175
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a e7       	ldi	r20, 0x7A	; 122
    2424:	55 e4       	ldi	r21, 0x45	; 69
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	f8 01       	movw	r30, r16
    2430:	80 83       	st	Z, r24
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	a2 83       	std	Z+2, r26	; 0x02
    2436:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2438:	fe 01       	movw	r30, r28
    243a:	e3 5b       	subi	r30, 0xB3	; 179
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	44 f4       	brge	.+16     	; 0x2466 <LCD_outToDataLines+0x234>
		__ticks = 1;
    2456:	fe 01       	movw	r30, r28
    2458:	e5 5b       	subi	r30, 0xB5	; 181
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
    2464:	64 c0       	rjmp	.+200    	; 0x252e <LCD_outToDataLines+0x2fc>
	else if (__tmp > 65535)
    2466:	fe 01       	movw	r30, r28
    2468:	e3 5b       	subi	r30, 0xB3	; 179
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	60 81       	ld	r22, Z
    246e:	71 81       	ldd	r23, Z+1	; 0x01
    2470:	82 81       	ldd	r24, Z+2	; 0x02
    2472:	93 81       	ldd	r25, Z+3	; 0x03
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	57 e4       	ldi	r21, 0x47	; 71
    247c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	0c f0       	brlt	.+2      	; 0x2486 <LCD_outToDataLines+0x254>
    2484:	43 c0       	rjmp	.+134    	; 0x250c <LCD_outToDataLines+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2486:	fe 01       	movw	r30, r28
    2488:	ef 5a       	subi	r30, 0xAF	; 175
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e2       	ldi	r20, 0x20	; 32
    249a:	51 e4       	ldi	r21, 0x41	; 65
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8e 01       	movw	r16, r28
    24a6:	05 5b       	subi	r16, 0xB5	; 181
    24a8:	1f 4f       	sbci	r17, 0xFF	; 255
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	f8 01       	movw	r30, r16
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
    24bc:	1f c0       	rjmp	.+62     	; 0x24fc <LCD_outToDataLines+0x2ca>
    24be:	fe 01       	movw	r30, r28
    24c0:	e7 5b       	subi	r30, 0xB7	; 183
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	80 e9       	ldi	r24, 0x90	; 144
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24
    24cc:	fe 01       	movw	r30, r28
    24ce:	e7 5b       	subi	r30, 0xB7	; 183
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_outToDataLines+0x2a4>
    24da:	fe 01       	movw	r30, r28
    24dc:	e7 5b       	subi	r30, 0xB7	; 183
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e4:	de 01       	movw	r26, r28
    24e6:	a5 5b       	subi	r26, 0xB5	; 181
    24e8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	e5 5b       	subi	r30, 0xB5	; 181
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	11 96       	adiw	r26, 0x01	; 1
    24f8:	9c 93       	st	X, r25
    24fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	fe 01       	movw	r30, r28
    24fe:	e5 5b       	subi	r30, 0xB5	; 181
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	91 81       	ldd	r25, Z+1	; 0x01
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	d1 f6       	brne	.-76     	; 0x24be <LCD_outToDataLines+0x28c>
    250a:	27 c0       	rjmp	.+78     	; 0x255a <LCD_outToDataLines+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250c:	8e 01       	movw	r16, r28
    250e:	05 5b       	subi	r16, 0xB5	; 181
    2510:	1f 4f       	sbci	r17, 0xFF	; 255
    2512:	fe 01       	movw	r30, r28
    2514:	e3 5b       	subi	r30, 0xB3	; 179
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	f8 01       	movw	r30, r16
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	80 83       	st	Z, r24
    252e:	de 01       	movw	r26, r28
    2530:	a9 5b       	subi	r26, 0xB9	; 185
    2532:	bf 4f       	sbci	r27, 0xFF	; 255
    2534:	fe 01       	movw	r30, r28
    2536:	e5 5b       	subi	r30, 0xB5	; 181
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	8d 93       	st	X+, r24
    2540:	9c 93       	st	X, r25
    2542:	fe 01       	movw	r30, r28
    2544:	e9 5b       	subi	r30, 0xB9	; 185
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_outToDataLines+0x31a>
    2550:	fe 01       	movw	r30, r28
    2552:	e9 5b       	subi	r30, 0xB9	; 185
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	 #if (LCD_DATA_BITS_MODE == 4)
		/* First output the highest 4 bits of the required command to the data bus D4:D7 */
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB4_PIN, (pinState_t)GET_BIT(val,4));
    255a:	fe 01       	movw	r30, r28
    255c:	ec 59       	subi	r30, 0x9C	; 156
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	82 95       	swap	r24
    2564:	8f 70       	andi	r24, 0x0F	; 15
    2566:	98 2f       	mov	r25, r24
    2568:	91 70       	andi	r25, 0x01	; 1
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	64 e0       	ldi	r22, 0x04	; 4
    256e:	49 2f       	mov	r20, r25
    2570:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    2574:	98 2f       	mov	r25, r24
    2576:	de 01       	movw	r26, r28
    2578:	ad 59       	subi	r26, 0x9D	; 157
    257a:	bf 4f       	sbci	r27, 0xFF	; 255
    257c:	fe 01       	movw	r30, r28
    257e:	ed 59       	subi	r30, 0x9D	; 157
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	89 2b       	or	r24, r25
    2586:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB5_PIN, (pinState_t)GET_BIT(val,5));
    2588:	fe 01       	movw	r30, r28
    258a:	ec 59       	subi	r30, 0x9C	; 156
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	82 95       	swap	r24
    2592:	86 95       	lsr	r24
    2594:	87 70       	andi	r24, 0x07	; 7
    2596:	98 2f       	mov	r25, r24
    2598:	91 70       	andi	r25, 0x01	; 1
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	65 e0       	ldi	r22, 0x05	; 5
    259e:	49 2f       	mov	r20, r25
    25a0:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    25a4:	98 2f       	mov	r25, r24
    25a6:	de 01       	movw	r26, r28
    25a8:	ad 59       	subi	r26, 0x9D	; 157
    25aa:	bf 4f       	sbci	r27, 0xFF	; 255
    25ac:	fe 01       	movw	r30, r28
    25ae:	ed 59       	subi	r30, 0x9D	; 157
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	89 2b       	or	r24, r25
    25b6:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB6_PIN, (pinState_t)GET_BIT(val,6));
    25b8:	fe 01       	movw	r30, r28
    25ba:	ec 59       	subi	r30, 0x9C	; 156
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	82 95       	swap	r24
    25c2:	86 95       	lsr	r24
    25c4:	86 95       	lsr	r24
    25c6:	83 70       	andi	r24, 0x03	; 3
    25c8:	98 2f       	mov	r25, r24
    25ca:	91 70       	andi	r25, 0x01	; 1
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	66 e0       	ldi	r22, 0x06	; 6
    25d0:	49 2f       	mov	r20, r25
    25d2:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    25d6:	98 2f       	mov	r25, r24
    25d8:	de 01       	movw	r26, r28
    25da:	ad 59       	subi	r26, 0x9D	; 157
    25dc:	bf 4f       	sbci	r27, 0xFF	; 255
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 59       	subi	r30, 0x9D	; 157
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	89 2b       	or	r24, r25
    25e8:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB7_PIN, (pinState_t)GET_BIT(val,7));
    25ea:	fe 01       	movw	r30, r28
    25ec:	ec 59       	subi	r30, 0x9C	; 156
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	98 2f       	mov	r25, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	99 27       	eor	r25, r25
    25f8:	99 1f       	adc	r25, r25
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	67 e0       	ldi	r22, 0x07	; 7
    25fe:	49 2f       	mov	r20, r25
    2600:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    2604:	98 2f       	mov	r25, r24
    2606:	de 01       	movw	r26, r28
    2608:	ad 59       	subi	r26, 0x9D	; 157
    260a:	bf 4f       	sbci	r27, 0xFF	; 255
    260c:	fe 01       	movw	r30, r28
    260e:	ed 59       	subi	r30, 0x9D	; 157
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	89 2b       	or	r24, r25
    2616:	8c 93       	st	X, r24
    2618:	fe 01       	movw	r30, r28
    261a:	ed 5b       	subi	r30, 0xBD	; 189
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 e8       	ldi	r26, 0x80	; 128
    2624:	bf e3       	ldi	r27, 0x3F	; 63
    2626:	80 83       	st	Z, r24
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	a2 83       	std	Z+2, r26	; 0x02
    262c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	8e 01       	movw	r16, r28
    2630:	01 5c       	subi	r16, 0xC1	; 193
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	fe 01       	movw	r30, r28
    2636:	ed 5b       	subi	r30, 0xBD	; 189
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a e7       	ldi	r20, 0x7A	; 122
    2648:	55 e4       	ldi	r21, 0x45	; 69
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	80 83       	st	Z, r24
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	a2 83       	std	Z+2, r26	; 0x02
    265a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    265c:	fe 01       	movw	r30, r28
    265e:	ff 96       	adiw	r30, 0x3f	; 63
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e8       	ldi	r20, 0x80	; 128
    266e:	5f e3       	ldi	r21, 0x3F	; 63
    2670:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2674:	88 23       	and	r24, r24
    2676:	2c f4       	brge	.+10     	; 0x2682 <LCD_outToDataLines+0x450>
		__ticks = 1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9e af       	std	Y+62, r25	; 0x3e
    267e:	8d af       	std	Y+61, r24	; 0x3d
    2680:	46 c0       	rjmp	.+140    	; 0x270e <LCD_outToDataLines+0x4dc>
	else if (__tmp > 65535)
    2682:	fe 01       	movw	r30, r28
    2684:	ff 96       	adiw	r30, 0x3f	; 63
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	3f ef       	ldi	r19, 0xFF	; 255
    2692:	4f e7       	ldi	r20, 0x7F	; 127
    2694:	57 e4       	ldi	r21, 0x47	; 71
    2696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269a:	18 16       	cp	r1, r24
    269c:	64 f5       	brge	.+88     	; 0x26f6 <LCD_outToDataLines+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 5b       	subi	r30, 0xBD	; 189
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9e af       	std	Y+62, r25	; 0x3e
    26ca:	8d af       	std	Y+61, r24	; 0x3d
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <LCD_outToDataLines+0x4ba>
    26ce:	80 e9       	ldi	r24, 0x90	; 144
    26d0:	91 e0       	ldi	r25, 0x01	; 1
    26d2:	9c af       	std	Y+60, r25	; 0x3c
    26d4:	8b af       	std	Y+59, r24	; 0x3b
    26d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    26d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <LCD_outToDataLines+0x4a8>
    26de:	9c af       	std	Y+60, r25	; 0x3c
    26e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    26e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9e af       	std	Y+62, r25	; 0x3e
    26ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f7       	brne	.-38     	; 0x26ce <LCD_outToDataLines+0x49c>
    26f4:	16 c0       	rjmp	.+44     	; 0x2722 <LCD_outToDataLines+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f6:	fe 01       	movw	r30, r28
    26f8:	ff 96       	adiw	r30, 0x3f	; 63
    26fa:	60 81       	ld	r22, Z
    26fc:	71 81       	ldd	r23, Z+1	; 0x01
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	93 81       	ldd	r25, Z+3	; 0x03
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9e af       	std	Y+62, r25	; 0x3e
    270c:	8d af       	std	Y+61, r24	; 0x3d
    270e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2710:	9e ad       	ldd	r25, Y+62	; 0x3e
    2712:	9a af       	std	Y+58, r25	; 0x3a
    2714:	89 af       	std	Y+57, r24	; 0x39
    2716:	89 ad       	ldd	r24, Y+57	; 0x39
    2718:	9a ad       	ldd	r25, Y+58	; 0x3a
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_outToDataLines+0x4e8>
    271e:	9a af       	std	Y+58, r25	; 0x3a
    2720:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		/* disable LCD E=0 */
		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD);
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	63 e0       	ldi	r22, 0x03	; 3
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    272c:	98 2f       	mov	r25, r24
    272e:	de 01       	movw	r26, r28
    2730:	ad 59       	subi	r26, 0x9D	; 157
    2732:	bf 4f       	sbci	r27, 0xFF	; 255
    2734:	fe 01       	movw	r30, r28
    2736:	ed 59       	subi	r30, 0x9D	; 157
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	89 2b       	or	r24, r25
    273e:	8c 93       	st	X, r24
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 e2       	ldi	r26, 0x20	; 32
    2746:	b1 e4       	ldi	r27, 0x41	; 65
    2748:	8d ab       	std	Y+53, r24	; 0x35
    274a:	9e ab       	std	Y+54, r25	; 0x36
    274c:	af ab       	std	Y+55, r26	; 0x37
    274e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2750:	6d a9       	ldd	r22, Y+53	; 0x35
    2752:	7e a9       	ldd	r23, Y+54	; 0x36
    2754:	8f a9       	ldd	r24, Y+55	; 0x37
    2756:	98 ad       	ldd	r25, Y+56	; 0x38
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a e7       	ldi	r20, 0x7A	; 122
    275e:	55 e4       	ldi	r21, 0x45	; 69
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	89 ab       	std	Y+49, r24	; 0x31
    276a:	9a ab       	std	Y+50, r25	; 0x32
    276c:	ab ab       	std	Y+51, r26	; 0x33
    276e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2770:	69 a9       	ldd	r22, Y+49	; 0x31
    2772:	7a a9       	ldd	r23, Y+50	; 0x32
    2774:	8b a9       	ldd	r24, Y+51	; 0x33
    2776:	9c a9       	ldd	r25, Y+52	; 0x34
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	2c f4       	brge	.+10     	; 0x2792 <LCD_outToDataLines+0x560>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	98 ab       	std	Y+48, r25	; 0x30
    278e:	8f a7       	std	Y+47, r24	; 0x2f
    2790:	3f c0       	rjmp	.+126    	; 0x2810 <LCD_outToDataLines+0x5de>
	else if (__tmp > 65535)
    2792:	69 a9       	ldd	r22, Y+49	; 0x31
    2794:	7a a9       	ldd	r23, Y+50	; 0x32
    2796:	8b a9       	ldd	r24, Y+51	; 0x33
    2798:	9c a9       	ldd	r25, Y+52	; 0x34
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	4c f5       	brge	.+82     	; 0x27fc <LCD_outToDataLines+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27aa:	6d a9       	ldd	r22, Y+53	; 0x35
    27ac:	7e a9       	ldd	r23, Y+54	; 0x36
    27ae:	8f a9       	ldd	r24, Y+55	; 0x37
    27b0:	98 ad       	ldd	r25, Y+56	; 0x38
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	bc 01       	movw	r22, r24
    27c4:	cd 01       	movw	r24, r26
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	98 ab       	std	Y+48, r25	; 0x30
    27d0:	8f a7       	std	Y+47, r24	; 0x2f
    27d2:	0f c0       	rjmp	.+30     	; 0x27f2 <LCD_outToDataLines+0x5c0>
    27d4:	80 e9       	ldi	r24, 0x90	; 144
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	9e a7       	std	Y+46, r25	; 0x2e
    27da:	8d a7       	std	Y+45, r24	; 0x2d
    27dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    27de:	9e a5       	ldd	r25, Y+46	; 0x2e
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_outToDataLines+0x5ae>
    27e4:	9e a7       	std	Y+46, r25	; 0x2e
    27e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ea:	98 a9       	ldd	r25, Y+48	; 0x30
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	98 ab       	std	Y+48, r25	; 0x30
    27f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f4:	98 a9       	ldd	r25, Y+48	; 0x30
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	69 f7       	brne	.-38     	; 0x27d4 <LCD_outToDataLines+0x5a2>
    27fa:	14 c0       	rjmp	.+40     	; 0x2824 <LCD_outToDataLines+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	69 a9       	ldd	r22, Y+49	; 0x31
    27fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2800:	8b a9       	ldd	r24, Y+51	; 0x33
    2802:	9c a9       	ldd	r25, Y+52	; 0x34
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	98 ab       	std	Y+48, r25	; 0x30
    280e:	8f a7       	std	Y+47, r24	; 0x2f
    2810:	8f a5       	ldd	r24, Y+47	; 0x2f
    2812:	98 a9       	ldd	r25, Y+48	; 0x30
    2814:	9c a7       	std	Y+44, r25	; 0x2c
    2816:	8b a7       	std	Y+43, r24	; 0x2b
    2818:	8b a5       	ldd	r24, Y+43	; 0x2b
    281a:	9c a5       	ldd	r25, Y+44	; 0x2c
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <LCD_outToDataLines+0x5ea>
    2820:	9c a7       	std	Y+44, r25	; 0x2c
    2822:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10); /* delay for processing Th = 13ns */

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, ENABLE_LCD); /* Enable LCD E=1 */
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	63 e0       	ldi	r22, 0x03	; 3
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    282e:	98 2f       	mov	r25, r24
    2830:	de 01       	movw	r26, r28
    2832:	ad 59       	subi	r26, 0x9D	; 157
    2834:	bf 4f       	sbci	r27, 0xFF	; 255
    2836:	fe 01       	movw	r30, r28
    2838:	ed 59       	subi	r30, 0x9D	; 157
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	89 2b       	or	r24, r25
    2840:	8c 93       	st	X, r24
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	a0 e8       	ldi	r26, 0x80	; 128
    2848:	bf e3       	ldi	r27, 0x3F	; 63
    284a:	8f a3       	std	Y+39, r24	; 0x27
    284c:	98 a7       	std	Y+40, r25	; 0x28
    284e:	a9 a7       	std	Y+41, r26	; 0x29
    2850:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2852:	6f a1       	ldd	r22, Y+39	; 0x27
    2854:	78 a5       	ldd	r23, Y+40	; 0x28
    2856:	89 a5       	ldd	r24, Y+41	; 0x29
    2858:	9a a5       	ldd	r25, Y+42	; 0x2a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4a e7       	ldi	r20, 0x7A	; 122
    2860:	55 e4       	ldi	r21, 0x45	; 69
    2862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	8b a3       	std	Y+35, r24	; 0x23
    286c:	9c a3       	std	Y+36, r25	; 0x24
    286e:	ad a3       	std	Y+37, r26	; 0x25
    2870:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2872:	6b a1       	ldd	r22, Y+35	; 0x23
    2874:	7c a1       	ldd	r23, Y+36	; 0x24
    2876:	8d a1       	ldd	r24, Y+37	; 0x25
    2878:	9e a1       	ldd	r25, Y+38	; 0x26
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e8       	ldi	r20, 0x80	; 128
    2880:	5f e3       	ldi	r21, 0x3F	; 63
    2882:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2886:	88 23       	and	r24, r24
    2888:	2c f4       	brge	.+10     	; 0x2894 <LCD_outToDataLines+0x662>
		__ticks = 1;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	9a a3       	std	Y+34, r25	; 0x22
    2890:	89 a3       	std	Y+33, r24	; 0x21
    2892:	3f c0       	rjmp	.+126    	; 0x2912 <LCD_outToDataLines+0x6e0>
	else if (__tmp > 65535)
    2894:	6b a1       	ldd	r22, Y+35	; 0x23
    2896:	7c a1       	ldd	r23, Y+36	; 0x24
    2898:	8d a1       	ldd	r24, Y+37	; 0x25
    289a:	9e a1       	ldd	r25, Y+38	; 0x26
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	3f ef       	ldi	r19, 0xFF	; 255
    28a0:	4f e7       	ldi	r20, 0x7F	; 127
    28a2:	57 e4       	ldi	r21, 0x47	; 71
    28a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a8:	18 16       	cp	r1, r24
    28aa:	4c f5       	brge	.+82     	; 0x28fe <LCD_outToDataLines+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	6f a1       	ldd	r22, Y+39	; 0x27
    28ae:	78 a5       	ldd	r23, Y+40	; 0x28
    28b0:	89 a5       	ldd	r24, Y+41	; 0x29
    28b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9a a3       	std	Y+34, r25	; 0x22
    28d2:	89 a3       	std	Y+33, r24	; 0x21
    28d4:	0f c0       	rjmp	.+30     	; 0x28f4 <LCD_outToDataLines+0x6c2>
    28d6:	80 e9       	ldi	r24, 0x90	; 144
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	98 a3       	std	Y+32, r25	; 0x20
    28dc:	8f 8f       	std	Y+31, r24	; 0x1f
    28de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28e0:	98 a1       	ldd	r25, Y+32	; 0x20
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <LCD_outToDataLines+0x6b0>
    28e6:	98 a3       	std	Y+32, r25	; 0x20
    28e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ea:	89 a1       	ldd	r24, Y+33	; 0x21
    28ec:	9a a1       	ldd	r25, Y+34	; 0x22
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	9a a3       	std	Y+34, r25	; 0x22
    28f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f4:	89 a1       	ldd	r24, Y+33	; 0x21
    28f6:	9a a1       	ldd	r25, Y+34	; 0x22
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	69 f7       	brne	.-38     	; 0x28d6 <LCD_outToDataLines+0x6a4>
    28fc:	14 c0       	rjmp	.+40     	; 0x2926 <LCD_outToDataLines+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2900:	7c a1       	ldd	r23, Y+36	; 0x24
    2902:	8d a1       	ldd	r24, Y+37	; 0x25
    2904:	9e a1       	ldd	r25, Y+38	; 0x26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9a a3       	std	Y+34, r25	; 0x22
    2910:	89 a3       	std	Y+33, r24	; 0x21
    2912:	89 a1       	ldd	r24, Y+33	; 0x21
    2914:	9a a1       	ldd	r25, Y+34	; 0x22
    2916:	9e 8f       	std	Y+30, r25	; 0x1e
    2918:	8d 8f       	std	Y+29, r24	; 0x1d
    291a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    291c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <LCD_outToDataLines+0x6ec>
    2922:	9e 8f       	std	Y+30, r25	; 0x1e
    2924:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		/* Secondly output the lowest 4 bits of the required command to the data bus D4:D7 */
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB4_PIN, (pinState_t)GET_BIT(val,0));
    2926:	fe 01       	movw	r30, r28
    2928:	ec 59       	subi	r30, 0x9C	; 156
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	98 2f       	mov	r25, r24
    2930:	91 70       	andi	r25, 0x01	; 1
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	64 e0       	ldi	r22, 0x04	; 4
    2936:	49 2f       	mov	r20, r25
    2938:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    293c:	98 2f       	mov	r25, r24
    293e:	de 01       	movw	r26, r28
    2940:	ad 59       	subi	r26, 0x9D	; 157
    2942:	bf 4f       	sbci	r27, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	ed 59       	subi	r30, 0x9D	; 157
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	89 2b       	or	r24, r25
    294e:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB5_PIN, (pinState_t)GET_BIT(val,1));
    2950:	fe 01       	movw	r30, r28
    2952:	ec 59       	subi	r30, 0x9C	; 156
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	86 95       	lsr	r24
    295a:	98 2f       	mov	r25, r24
    295c:	91 70       	andi	r25, 0x01	; 1
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	65 e0       	ldi	r22, 0x05	; 5
    2962:	49 2f       	mov	r20, r25
    2964:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    2968:	98 2f       	mov	r25, r24
    296a:	de 01       	movw	r26, r28
    296c:	ad 59       	subi	r26, 0x9D	; 157
    296e:	bf 4f       	sbci	r27, 0xFF	; 255
    2970:	fe 01       	movw	r30, r28
    2972:	ed 59       	subi	r30, 0x9D	; 157
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	89 2b       	or	r24, r25
    297a:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB6_PIN, (pinState_t)GET_BIT(val,2));
    297c:	fe 01       	movw	r30, r28
    297e:	ec 59       	subi	r30, 0x9C	; 156
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	86 95       	lsr	r24
    2986:	86 95       	lsr	r24
    2988:	98 2f       	mov	r25, r24
    298a:	91 70       	andi	r25, 0x01	; 1
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	66 e0       	ldi	r22, 0x06	; 6
    2990:	49 2f       	mov	r20, r25
    2992:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    2996:	98 2f       	mov	r25, r24
    2998:	de 01       	movw	r26, r28
    299a:	ad 59       	subi	r26, 0x9D	; 157
    299c:	bf 4f       	sbci	r27, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	ed 59       	subi	r30, 0x9D	; 157
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 81       	ld	r24, Z
    29a6:	89 2b       	or	r24, r25
    29a8:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB7_PIN, (pinState_t)GET_BIT(val,3));
    29aa:	fe 01       	movw	r30, r28
    29ac:	ec 59       	subi	r30, 0x9C	; 156
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	86 95       	lsr	r24
    29b4:	86 95       	lsr	r24
    29b6:	86 95       	lsr	r24
    29b8:	98 2f       	mov	r25, r24
    29ba:	91 70       	andi	r25, 0x01	; 1
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	67 e0       	ldi	r22, 0x07	; 7
    29c0:	49 2f       	mov	r20, r25
    29c2:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    29c6:	98 2f       	mov	r25, r24
    29c8:	de 01       	movw	r26, r28
    29ca:	ad 59       	subi	r26, 0x9D	; 157
    29cc:	bf 4f       	sbci	r27, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	ed 59       	subi	r30, 0x9D	; 157
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	89 2b       	or	r24, r25
    29d8:	8c 93       	st	X, r24
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	a0 e8       	ldi	r26, 0x80	; 128
    29e0:	bf e3       	ldi	r27, 0x3F	; 63
    29e2:	89 8f       	std	Y+25, r24	; 0x19
    29e4:	9a 8f       	std	Y+26, r25	; 0x1a
    29e6:	ab 8f       	std	Y+27, r26	; 0x1b
    29e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ea:	69 8d       	ldd	r22, Y+25	; 0x19
    29ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	4a e7       	ldi	r20, 0x7A	; 122
    29f8:	55 e4       	ldi	r21, 0x45	; 69
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	8d 8b       	std	Y+21, r24	; 0x15
    2a04:	9e 8b       	std	Y+22, r25	; 0x16
    2a06:	af 8b       	std	Y+23, r26	; 0x17
    2a08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a10:	98 8d       	ldd	r25, Y+24	; 0x18
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e8       	ldi	r20, 0x80	; 128
    2a18:	5f e3       	ldi	r21, 0x3F	; 63
    2a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a1e:	88 23       	and	r24, r24
    2a20:	2c f4       	brge	.+10     	; 0x2a2c <LCD_outToDataLines+0x7fa>
		__ticks = 1;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	9c 8b       	std	Y+20, r25	; 0x14
    2a28:	8b 8b       	std	Y+19, r24	; 0x13
    2a2a:	3f c0       	rjmp	.+126    	; 0x2aaa <LCD_outToDataLines+0x878>
	else if (__tmp > 65535)
    2a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a30:	8f 89       	ldd	r24, Y+23	; 0x17
    2a32:	98 8d       	ldd	r25, Y+24	; 0x18
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	3f ef       	ldi	r19, 0xFF	; 255
    2a38:	4f e7       	ldi	r20, 0x7F	; 127
    2a3a:	57 e4       	ldi	r21, 0x47	; 71
    2a3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a40:	18 16       	cp	r1, r24
    2a42:	4c f5       	brge	.+82     	; 0x2a96 <LCD_outToDataLines+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a44:	69 8d       	ldd	r22, Y+25	; 0x19
    2a46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e2       	ldi	r20, 0x20	; 32
    2a52:	51 e4       	ldi	r21, 0x41	; 65
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	bc 01       	movw	r22, r24
    2a5e:	cd 01       	movw	r24, r26
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9c 8b       	std	Y+20, r25	; 0x14
    2a6a:	8b 8b       	std	Y+19, r24	; 0x13
    2a6c:	0f c0       	rjmp	.+30     	; 0x2a8c <LCD_outToDataLines+0x85a>
    2a6e:	80 e9       	ldi	r24, 0x90	; 144
    2a70:	91 e0       	ldi	r25, 0x01	; 1
    2a72:	9a 8b       	std	Y+18, r25	; 0x12
    2a74:	89 8b       	std	Y+17, r24	; 0x11
    2a76:	89 89       	ldd	r24, Y+17	; 0x11
    2a78:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_outToDataLines+0x848>
    2a7e:	9a 8b       	std	Y+18, r25	; 0x12
    2a80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a82:	8b 89       	ldd	r24, Y+19	; 0x13
    2a84:	9c 89       	ldd	r25, Y+20	; 0x14
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	9c 8b       	std	Y+20, r25	; 0x14
    2a8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	69 f7       	brne	.-38     	; 0x2a6e <LCD_outToDataLines+0x83c>
    2a94:	14 c0       	rjmp	.+40     	; 0x2abe <LCD_outToDataLines+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a96:	6d 89       	ldd	r22, Y+21	; 0x15
    2a98:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9c 8b       	std	Y+20, r25	; 0x14
    2aa8:	8b 8b       	std	Y+19, r24	; 0x13
    2aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2aac:	9c 89       	ldd	r25, Y+20	; 0x14
    2aae:	98 8b       	std	Y+16, r25	; 0x10
    2ab0:	8f 87       	std	Y+15, r24	; 0x0f
    2ab2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab4:	98 89       	ldd	r25, Y+16	; 0x10
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <LCD_outToDataLines+0x884>
    2aba:	98 8b       	std	Y+16, r25	; 0x10
    2abc:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD); /* disable LCD E=0 */
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	63 e0       	ldi	r22, 0x03	; 3
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    2ac8:	98 2f       	mov	r25, r24
    2aca:	de 01       	movw	r26, r28
    2acc:	ad 59       	subi	r26, 0x9D	; 157
    2ace:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ed 59       	subi	r30, 0x9D	; 157
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	80 81       	ld	r24, Z
    2ad8:	89 2b       	or	r24, r25
    2ada:	8c 93       	st	X, r24
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	a0 e8       	ldi	r26, 0x80	; 128
    2ae2:	bf e3       	ldi	r27, 0x3F	; 63
    2ae4:	8b 87       	std	Y+11, r24	; 0x0b
    2ae6:	9c 87       	std	Y+12, r25	; 0x0c
    2ae8:	ad 87       	std	Y+13, r26	; 0x0d
    2aea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a e7       	ldi	r20, 0x7A	; 122
    2afa:	55 e4       	ldi	r21, 0x45	; 69
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	8f 83       	std	Y+7, r24	; 0x07
    2b06:	98 87       	std	Y+8, r25	; 0x08
    2b08:	a9 87       	std	Y+9, r26	; 0x09
    2b0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0e:	78 85       	ldd	r23, Y+8	; 0x08
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	2c f4       	brge	.+10     	; 0x2b2e <LCD_outToDataLines+0x8fc>
		__ticks = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9e 83       	std	Y+6, r25	; 0x06
    2b2a:	8d 83       	std	Y+5, r24	; 0x05
    2b2c:	3f c0       	rjmp	.+126    	; 0x2bac <LCD_outToDataLines+0x97a>
	else if (__tmp > 65535)
    2b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b30:	78 85       	ldd	r23, Y+8	; 0x08
    2b32:	89 85       	ldd	r24, Y+9	; 0x09
    2b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	3f ef       	ldi	r19, 0xFF	; 255
    2b3a:	4f e7       	ldi	r20, 0x7F	; 127
    2b3c:	57 e4       	ldi	r21, 0x47	; 71
    2b3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b42:	18 16       	cp	r1, r24
    2b44:	4c f5       	brge	.+82     	; 0x2b98 <LCD_outToDataLines+0x966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e2       	ldi	r20, 0x20	; 32
    2b54:	51 e4       	ldi	r21, 0x41	; 65
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9e 83       	std	Y+6, r25	; 0x06
    2b6c:	8d 83       	std	Y+5, r24	; 0x05
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <LCD_outToDataLines+0x95c>
    2b70:	80 e9       	ldi	r24, 0x90	; 144
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	9c 83       	std	Y+4, r25	; 0x04
    2b76:	8b 83       	std	Y+3, r24	; 0x03
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_outToDataLines+0x94a>
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	69 f7       	brne	.-38     	; 0x2b70 <LCD_outToDataLines+0x93e>
    2b96:	14 c0       	rjmp	.+40     	; 0x2bc0 <LCD_outToDataLines+0x98e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9e 83       	std	Y+6, r25	; 0x06
    2baa:	8d 83       	std	Y+5, r24	; 0x05
    2bac:	8d 81       	ldd	r24, Y+5	; 0x05
    2bae:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_outToDataLines+0x986>
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	89 83       	std	Y+1, r24	; 0x01

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD); /* disable LCD E=0 *//* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif

	return retStatus;
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	ed 59       	subi	r30, 0x9D	; 157
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
}
    2bc8:	cc 59       	subi	r28, 0x9C	; 156
    2bca:	df 4f       	sbci	r29, 0xFF	; 255
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	08 95       	ret

00002be0 <LCD_sendCommand>:

static stdReturnType_t LCD_sendCommand(u8 command)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <LCD_sendCommand+0x6>
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	89 83       	std	Y+1, r24	; 0x01

	/* Sending instruction mode, RS=0 */
	retStatus = DIO_write(LCD_CTRL_LINES_PORT, LCD_RS_PIN, SELECT_INSTRUCTION_REGISTER);
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	61 e0       	ldi	r22, 0x01	; 1
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    2bfa:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_outToDataLines(command);
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_outToDataLines>
    2c02:	98 2f       	mov	r25, r24
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	89 2b       	or	r24, r25
    2c08:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <LCD_init>:

stdReturnType_t LCD_init(void)
{
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	0f 92       	push	r0
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
	stdReturnType_t retStatus = ERROR;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	89 83       	std	Y+1, r24	; 0x01

	/* Configure the control pins(E,RS,RW) as output pins */
	retStatus =  DIO_init(LCD_CTRL_LINES_PORT, LCD_E_PIN, OUTPUT);
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	63 e0       	ldi	r22, 0x03	; 3
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_CTRL_LINES_PORT, LCD_RS_PIN, OUTPUT);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2c3a:	98 2f       	mov	r25, r24
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	89 2b       	or	r24, r25
    2c40:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_CTRL_LINES_PORT, LCD_RW_PIN, OUTPUT);
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	62 e0       	ldi	r22, 0x02	; 2
    2c46:	41 e0       	ldi	r20, 0x01	; 1
    2c48:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	89 2b       	or	r24, r25
    2c52:	89 83       	std	Y+1, r24	; 0x01

	/* Configure the highest 4 data lines as output */
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB4_PIN, OUTPUT);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	64 e0       	ldi	r22, 0x04	; 4
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2c5e:	98 2f       	mov	r25, r24
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	89 2b       	or	r24, r25
    2c64:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB5_PIN, OUTPUT);
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	65 e0       	ldi	r22, 0x05	; 5
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2c70:	98 2f       	mov	r25, r24
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	89 2b       	or	r24, r25
    2c76:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB6_PIN, OUTPUT);
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	66 e0       	ldi	r22, 0x06	; 6
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2c82:	98 2f       	mov	r25, r24
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	89 2b       	or	r24, r25
    2c88:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB7_PIN, OUTPUT);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	67 e0       	ldi	r22, 0x07	; 7
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2c94:	98 2f       	mov	r25, r24
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	89 2b       	or	r24, r25
    2c9a:	89 83       	std	Y+1, r24	; 0x01

	#if (LCD_DATA_BITS_MODE == 4)
	retStatus |= LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    2c9c:	82 e0       	ldi	r24, 0x02	; 2
    2c9e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
    2ca2:	98 2f       	mov	r25, r24
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	89 2b       	or	r24, r25
    2ca8:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line LCD + 4-bit Data Mode + 5*7 dot display Mode */
    2caa:	88 e2       	ldi	r24, 0x28	; 40
    2cac:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
    2cb0:	98 2f       	mov	r25, r24
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	89 2b       	or	r24, r25
    2cb6:	89 83       	std	Y+1, r24	; 0x01

	/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	retStatus |= LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
	#endif

	retStatus |= LCD_sendCommand(CURSOR_OFF); /* cursor off */
    2cb8:	8c e0       	ldi	r24, 0x0C	; 12
    2cba:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
    2cbe:	98 2f       	mov	r25, r24
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	89 2b       	or	r24, r25
    2cc4:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
    2ccc:	98 2f       	mov	r25, r24
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	89 2b       	or	r24, r25
    2cd2:	89 83       	std	Y+1, r24	; 0x01
	return retStatus;
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01

}
    2cd6:	0f 90       	pop	r0
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <LCD_clearScreen>:

stdReturnType_t LCD_clearScreen(void)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CLEAR_COMMAND);
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
}
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <LCD_turnOnCursor>:

stdReturnType_t LCD_turnOnCursor(void)
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CURSOR_ON);
    2cfa:	8e e0       	ldi	r24, 0x0E	; 14
    2cfc:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <LCD_turnOffCursor>:

stdReturnType_t LCD_turnOffCursor(void)
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CURSOR_OFF);
    2d0e:	8c e0       	ldi	r24, 0x0C	; 12
    2d10:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
}
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <LCD_displayCharacter>:

stdReturnType_t LCD_displayCharacter(u8 data)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <LCD_displayCharacter+0x6>
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	89 83       	std	Y+1, r24	; 0x01

	/* Sending data mode, RS=1 */
	retStatus  = DIO_write(LCD_CTRL_LINES_PORT, LCD_RS_PIN, SELECT_DATA_REGISTER);
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	61 e0       	ldi	r22, 0x01	; 1
    2d2e:	41 e0       	ldi	r20, 0x01	; 1
    2d30:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    2d34:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_outToDataLines(data);
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_outToDataLines>
    2d3c:	98 2f       	mov	r25, r24
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	89 2b       	or	r24, r25
    2d42:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <LCD_displayString>:

stdReturnType_t LCD_displayString(const char * data)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <LCD_displayString+0x6>
    2d56:	0f 92       	push	r0
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	9b 83       	std	Y+3, r25	; 0x03
    2d5e:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = SUCCESS;
    2d60:	19 82       	std	Y+1, r1	; 0x01
    2d62:	0e c0       	rjmp	.+28     	; 0x2d80 <LCD_displayString+0x30>
//		index++;
//	}

	while( '\0' != (*data) )
		{
			retStatus |= LCD_displayCharacter(*data);
    2d64:	ea 81       	ldd	r30, Y+2	; 0x02
    2d66:	fb 81       	ldd	r31, Y+3	; 0x03
    2d68:	80 81       	ld	r24, Z
    2d6a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_displayCharacter>
    2d6e:	98 2f       	mov	r25, r24
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	89 2b       	or	r24, r25
    2d74:	89 83       	std	Y+1, r24	; 0x01
			data++;
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7a:	01 96       	adiw	r24, 0x01	; 1
    2d7c:	9b 83       	std	Y+3, r25	; 0x03
    2d7e:	8a 83       	std	Y+2, r24	; 0x02
//	{
//		retStatus |=  LCD_displayCharacter(data[index]);
//		index++;
//	}

	while( '\0' != (*data) )
    2d80:	ea 81       	ldd	r30, Y+2	; 0x02
    2d82:	fb 81       	ldd	r31, Y+3	; 0x03
    2d84:	80 81       	ld	r24, Z
    2d86:	88 23       	and	r24, r24
    2d88:	69 f7       	brne	.-38     	; 0x2d64 <LCD_displayString+0x14>
			retStatus |= LCD_displayCharacter(*data);
			data++;
		}


	return retStatus;
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <LCD_setCursorPos>:

stdReturnType_t  LCD_setCursorPos(u8 row, u8 col)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <LCD_setCursorPos+0x6>
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <LCD_setCursorPos+0x8>
    2da0:	0f 92       	push	r0
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	8a 83       	std	Y+2, r24	; 0x02
    2da8:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	89 83       	std	Y+1, r24	; 0x01

	switch (row)
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	3d 83       	std	Y+5, r19	; 0x05
    2db6:	2c 83       	std	Y+4, r18	; 0x04
    2db8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dba:	9d 81       	ldd	r25, Y+5	; 0x05
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	31 f0       	breq	.+12     	; 0x2dcc <LCD_setCursorPos+0x34>
    2dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    2dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    2dc4:	21 30       	cpi	r18, 0x01	; 1
    2dc6:	31 05       	cpc	r19, r1
    2dc8:	39 f0       	breq	.+14     	; 0x2dd8 <LCD_setCursorPos+0x40>
    2dca:	0c c0       	rjmp	.+24     	; 0x2de4 <LCD_setCursorPos+0x4c>
	{
		case 0:
			retStatus = LCD_sendCommand(SET_CURSOR_LOCATION_L1_START + col);
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	80 58       	subi	r24, 0x80	; 128
    2dd0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	08 c0       	rjmp	.+16     	; 0x2de8 <LCD_setCursorPos+0x50>
			break;
		case 1:
			retStatus = LCD_sendCommand(SET_CURSOR_LOCATION_L2_START + col);
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	80 54       	subi	r24, 0x40	; 64
    2ddc:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <LCD_setCursorPos+0x50>
			break;
		default:
			retStatus = ERROR;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <LCD_displayString_rowCol>:

stdReturnType_t LCD_displayString_rowCol(const char * data, u8 row, u8 col)
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <LCD_displayString_rowCol+0x6>
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <LCD_displayString_rowCol+0x8>
    2e02:	0f 92       	push	r0
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	9b 83       	std	Y+3, r25	; 0x03
    2e0a:	8a 83       	std	Y+2, r24	; 0x02
    2e0c:	6c 83       	std	Y+4, r22	; 0x04
    2e0e:	4d 83       	std	Y+5, r20	; 0x05
	stdReturnType_t retStatus = ERROR;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	89 83       	std	Y+1, r24	; 0x01

	retStatus = LCD_setCursorPos(row, col);
    2e14:	8c 81       	ldd	r24, Y+4	; 0x04
    2e16:	6d 81       	ldd	r22, Y+5	; 0x05
    2e18:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_setCursorPos>
    2e1c:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_displayString(data);
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	9b 81       	ldd	r25, Y+3	; 0x03
    2e22:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_displayString>
    2e26:	98 2f       	mov	r25, r24
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	89 2b       	or	r24, r25
    2e2c:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <LCD_displayInteger>:

stdReturnType_t LCD_displayInteger(u16 val)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	63 97       	sbiw	r28, 0x13	; 19
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	f8 94       	cli
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	9b 8b       	std	Y+19, r25	; 0x13
    2e56:	8a 8b       	std	Y+18, r24	; 0x12
	stdReturnType_t retStatus = ERROR;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	89 83       	std	Y+1, r24	; 0x01

    char AsciiBuff[16]; /* The ASCII result */
    itoa(val, AsciiBuff,10); /* 10 means base 10 i.e. decimal */
    2e5c:	8a 89       	ldd	r24, Y+18	; 0x12
    2e5e:	9b 89       	ldd	r25, Y+19	; 0x13
    2e60:	9e 01       	movw	r18, r28
    2e62:	2e 5f       	subi	r18, 0xFE	; 254
    2e64:	3f 4f       	sbci	r19, 0xFF	; 255
    2e66:	b9 01       	movw	r22, r18
    2e68:	4a e0       	ldi	r20, 0x0A	; 10
    2e6a:	50 e0       	ldi	r21, 0x00	; 0
    2e6c:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <itoa>
    retStatus = LCD_displayString(AsciiBuff);
    2e70:	ce 01       	movw	r24, r28
    2e72:	02 96       	adiw	r24, 0x02	; 2
    2e74:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <LCD_displayString>
    2e78:	89 83       	std	Y+1, r24	; 0x01
// for(j = 0;j<i;j++)
// {
// 	LCD_displayCharacter(arr[i-1-j]+'0');
// }

    return retStatus;
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e7c:	63 96       	adiw	r28, 0x13	; 19
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	08 95       	ret

00002e8e <LCD_writeCustomChar>:

stdReturnType_t LCD_writeCustomChar(u8 * pData, u8 index)
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <LCD_writeCustomChar+0x6>
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <LCD_writeCustomChar+0x8>
    2e96:	0f 92       	push	r0
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
    2ea0:	6d 83       	std	Y+5, r22	; 0x05
	stdReturnType_t retStatus = ERROR;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2ea6:	19 82       	std	Y+1, r1	; 0x01

	/* Set address in CGRAM */
	retStatus = LCD_sendCommand(CUSTOM_CHAR_RANGE_START | (index * 8));
    2ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eaa:	88 2f       	mov	r24, r24
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	80 64       	ori	r24, 0x40	; 64
    2ebc:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_sendCommand>
    2ec0:	8a 83       	std	Y+2, r24	; 0x02
	/* Write received bytes in CGRAM */
	for(i = 0;i<8;i++)
    2ec2:	19 82       	std	Y+1, r1	; 0x01
    2ec4:	11 c0       	rjmp	.+34     	; 0x2ee8 <LCD_writeCustomChar+0x5a>
	{
		retStatus |= LCD_displayCharacter(*pData);
    2ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eca:	80 81       	ld	r24, Z
    2ecc:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_displayCharacter>
    2ed0:	98 2f       	mov	r25, r24
    2ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed4:	89 2b       	or	r24, r25
    2ed6:	8a 83       	std	Y+2, r24	; 0x02
		pData++;
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	9c 81       	ldd	r25, Y+4	; 0x04
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	9c 83       	std	Y+4, r25	; 0x04
    2ee0:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;

	/* Set address in CGRAM */
	retStatus = LCD_sendCommand(CUSTOM_CHAR_RANGE_START | (index * 8));
	/* Write received bytes in CGRAM */
	for(i = 0;i<8;i++)
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	8f 5f       	subi	r24, 0xFF	; 255
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	88 30       	cpi	r24, 0x08	; 8
    2eec:	60 f3       	brcs	.-40     	; 0x2ec6 <LCD_writeCustomChar+0x38>
	{
		retStatus |= LCD_displayCharacter(*pData);
		pData++;
	}

	return retStatus;
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <LCD_displayCustomChar>:

stdReturnType_t LCD_displayCustomChar(u8 index,u8 row,u8 col)
{
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <LCD_displayCustomChar+0x6>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <LCD_displayCustomChar+0x8>
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
    2f0e:	6b 83       	std	Y+3, r22	; 0x03
    2f10:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t retStatus = ERROR;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	89 83       	std	Y+1, r24	; 0x01

	/* Set address in DDRAM */
	retStatus = LCD_setCursorPos(row, col);
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	6c 81       	ldd	r22, Y+4	; 0x04
    2f1a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_setCursorPos>
    2f1e:	89 83       	std	Y+1, r24	; 0x01
	/* Write custom character on screen */
	retStatus |= LCD_displayCharacter(index);
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_displayCharacter>
    2f26:	98 2f       	mov	r25, r24
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	89 2b       	or	r24, r25
    2f2c:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <initKeypad>:
		KEYPAD_COL1_PIN,
		KEYPAD_COL2_PIN,
		KEYPAD_COL3_PIN,
};

stdReturnType_t initKeypad(void) {
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	0f 92       	push	r0
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62

	stdReturnType_t status = ERROR;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	89 83       	std	Y+1, r24	; 0x01

	// init column  as input

	status = DIO_init(KEYPAD_PORT, KEYPAD_COL0_PIN, INPUT);
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2f56:	89 83       	std	Y+1, r24	; 0x01

	status |= DIO_init(KEYPAD_PORT, KEYPAD_COL1_PIN, INPUT);
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	61 e0       	ldi	r22, 0x01	; 1
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2f62:	98 2f       	mov	r25, r24
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	89 2b       	or	r24, r25
    2f68:	89 83       	std	Y+1, r24	; 0x01
	status |= DIO_init(KEYPAD_PORT, KEYPAD_COL2_PIN, INPUT);
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	62 e0       	ldi	r22, 0x02	; 2
    2f6e:	40 e0       	ldi	r20, 0x00	; 0
    2f70:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2f74:	98 2f       	mov	r25, r24
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	89 2b       	or	r24, r25
    2f7a:	89 83       	std	Y+1, r24	; 0x01
    #if (NUM_OF_COL == 4)
		status |= DIO_init(KEYPAD_PORT, KEYPAD_COL3_PIN, INPUT);
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	63 e0       	ldi	r22, 0x03	; 3
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2f86:	98 2f       	mov	r25, r24
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	89 2b       	or	r24, r25
    2f8c:	89 83       	std	Y+1, r24	; 0x01
	#endif
	status = SUCCESS;
    2f8e:	19 82       	std	Y+1, r1	; 0x01

	//Enable initernal pull up
	DIO_write(KEYPAD_PORT, KEYPAD_COL0_PIN, PIN_IS_HIGH);
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	41 e0       	ldi	r20, 0x01	; 1
    2f96:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_COL1_PIN, PIN_IS_HIGH);
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	61 e0       	ldi	r22, 0x01	; 1
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_COL2_PIN, PIN_IS_HIGH);
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	62 e0       	ldi	r22, 0x02	; 2
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
	#if (NUM_OF_COL == 4)
		DIO_write(KEYPAD_PORT, KEYPAD_COL3_PIN, PIN_IS_HIGH);
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	63 e0       	ldi	r22, 0x03	; 3
    2fb2:	41 e0       	ldi	r20, 0x01	; 1
    2fb4:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
	#endif
	status = SUCCESS;
    2fb8:	19 82       	std	Y+1, r1	; 0x01
	//init row as INPUT
	status = DIO_init(KEYPAD_PORT,KEYPAD_ROW0_PIN,OUTPUT);
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	64 e0       	ldi	r22, 0x04	; 4
    2fbe:	41 e0       	ldi	r20, 0x01	; 1
    2fc0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2fc4:	89 83       	std	Y+1, r24	; 0x01

	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW1_PIN,OUTPUT);
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	65 e0       	ldi	r22, 0x05	; 5
    2fca:	41 e0       	ldi	r20, 0x01	; 1
    2fcc:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2fd0:	98 2f       	mov	r25, r24
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	89 2b       	or	r24, r25
    2fd6:	89 83       	std	Y+1, r24	; 0x01
	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW2_PIN,OUTPUT);
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	66 e0       	ldi	r22, 0x06	; 6
    2fdc:	41 e0       	ldi	r20, 0x01	; 1
    2fde:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2fe2:	98 2f       	mov	r25, r24
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	89 2b       	or	r24, r25
    2fe8:	89 83       	std	Y+1, r24	; 0x01
	#if(NUM_OF_ROW == 4)
	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW3_PIN,OUTPUT);
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	67 e0       	ldi	r22, 0x07	; 7
    2fee:	41 e0       	ldi	r20, 0x01	; 1
    2ff0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    2ff4:	98 2f       	mov	r25, r24
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	89 2b       	or	r24, r25
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	#endif
	//Enable initernal pull up
	DIO_write(KEYPAD_PORT, KEYPAD_ROW0_PIN, PIN_IS_HIGH);
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	64 e0       	ldi	r22, 0x04	; 4
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_ROW1_PIN, PIN_IS_HIGH);
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	65 e0       	ldi	r22, 0x05	; 5
    300a:	41 e0       	ldi	r20, 0x01	; 1
    300c:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_ROW2_PIN, PIN_IS_HIGH);
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	66 e0       	ldi	r22, 0x06	; 6
    3014:	41 e0       	ldi	r20, 0x01	; 1
    3016:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
	#if (NUM_OF_ROW == 4)
		DIO_write(KEYPAD_PORT, KEYPAD_ROW3_PIN, PIN_IS_HIGH);
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	67 e0       	ldi	r22, 0x07	; 7
    301e:	41 e0       	ldi	r20, 0x01	; 1
    3020:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
	#endif

	status = SUCCESS;
    3024:	19 82       	std	Y+1, r1	; 0x01

	return status;
    3026:	89 81       	ldd	r24, Y+1	; 0x01
}
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <GetPressedKey>:


stdReturnType_t GetPressedKey(u8 *ppressed)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	2a 97       	sbiw	r28, 0x0a	; 10
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	9e 83       	std	Y+6, r25	; 0x06
    3046:	8d 83       	std	Y+5, r24	; 0x05
	stdReturnType_t retstatus = ERROR;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	8b 83       	std	Y+3, r24	; 0x03

	u8 col = 0;
    304c:	1a 82       	std	Y+2, r1	; 0x02
	u8 row = 0;
    304e:	19 82       	std	Y+1, r1	; 0x01
	pinState_t pinsate;

	*ppressed = 'H';
    3050:	ed 81       	ldd	r30, Y+5	; 0x05
    3052:	fe 81       	ldd	r31, Y+6	; 0x06
    3054:	88 e4       	ldi	r24, 0x48	; 72
    3056:	80 83       	st	Z, r24

	for(row = 0; row < NUM_OF_ROW; row++)
    3058:	19 82       	std	Y+1, r1	; 0x01
    305a:	91 c0       	rjmp	.+290    	; 0x317e <GetPressedKey+0x14e>
	{
		retstatus = DIO_write(KEYPAD_PORT,KEYPAD_ROW0_PIN,( (1<<row) &1)?0:1);
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	02 2e       	mov	r0, r18
    3068:	02 c0       	rjmp	.+4      	; 0x306e <GetPressedKey+0x3e>
    306a:	95 95       	asr	r25
    306c:	87 95       	ror	r24
    306e:	0a 94       	dec	r0
    3070:	e2 f7       	brpl	.-8      	; 0x306a <GetPressedKey+0x3a>
    3072:	81 70       	andi	r24, 0x01	; 1
    3074:	90 70       	andi	r25, 0x00	; 0
    3076:	88 23       	and	r24, r24
    3078:	11 f0       	breq	.+4      	; 0x307e <GetPressedKey+0x4e>
    307a:	1a 86       	std	Y+10, r1	; 0x0a
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <GetPressedKey+0x52>
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	8a 87       	std	Y+10, r24	; 0x0a
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	64 e0       	ldi	r22, 0x04	; 4
    3086:	4a 85       	ldd	r20, Y+10	; 0x0a
    3088:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    308c:	8b 83       	std	Y+3, r24	; 0x03

		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW1_PIN,( (1<<row) &2)?0:1);
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	28 2f       	mov	r18, r24
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	82 e0       	ldi	r24, 0x02	; 2
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	02 2e       	mov	r0, r18
    309a:	02 c0       	rjmp	.+4      	; 0x30a0 <GetPressedKey+0x70>
    309c:	95 95       	asr	r25
    309e:	87 95       	ror	r24
    30a0:	0a 94       	dec	r0
    30a2:	e2 f7       	brpl	.-8      	; 0x309c <GetPressedKey+0x6c>
    30a4:	81 70       	andi	r24, 0x01	; 1
    30a6:	90 70       	andi	r25, 0x00	; 0
    30a8:	88 23       	and	r24, r24
    30aa:	11 f0       	breq	.+4      	; 0x30b0 <GetPressedKey+0x80>
    30ac:	19 86       	std	Y+9, r1	; 0x09
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <GetPressedKey+0x84>
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	89 87       	std	Y+9, r24	; 0x09
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	65 e0       	ldi	r22, 0x05	; 5
    30b8:	49 85       	ldd	r20, Y+9	; 0x09
    30ba:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    30be:	98 2f       	mov	r25, r24
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	89 2b       	or	r24, r25
    30c4:	8b 83       	std	Y+3, r24	; 0x03
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW2_PIN,( (1<<row) &4)?0:1);
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	28 2f       	mov	r18, r24
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	84 e0       	ldi	r24, 0x04	; 4
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	02 2e       	mov	r0, r18
    30d2:	02 c0       	rjmp	.+4      	; 0x30d8 <GetPressedKey+0xa8>
    30d4:	95 95       	asr	r25
    30d6:	87 95       	ror	r24
    30d8:	0a 94       	dec	r0
    30da:	e2 f7       	brpl	.-8      	; 0x30d4 <GetPressedKey+0xa4>
    30dc:	81 70       	andi	r24, 0x01	; 1
    30de:	90 70       	andi	r25, 0x00	; 0
    30e0:	88 23       	and	r24, r24
    30e2:	11 f0       	breq	.+4      	; 0x30e8 <GetPressedKey+0xb8>
    30e4:	18 86       	std	Y+8, r1	; 0x08
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <GetPressedKey+0xbc>
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	88 87       	std	Y+8, r24	; 0x08
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	66 e0       	ldi	r22, 0x06	; 6
    30f0:	48 85       	ldd	r20, Y+8	; 0x08
    30f2:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    30f6:	98 2f       	mov	r25, r24
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	89 2b       	or	r24, r25
    30fc:	8b 83       	std	Y+3, r24	; 0x03
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW3_PIN,( (1<<row) &8)?0:1);
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	88 e0       	ldi	r24, 0x08	; 8
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	02 2e       	mov	r0, r18
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <GetPressedKey+0xe0>
    310c:	95 95       	asr	r25
    310e:	87 95       	ror	r24
    3110:	0a 94       	dec	r0
    3112:	e2 f7       	brpl	.-8      	; 0x310c <GetPressedKey+0xdc>
    3114:	81 70       	andi	r24, 0x01	; 1
    3116:	90 70       	andi	r25, 0x00	; 0
    3118:	88 23       	and	r24, r24
    311a:	11 f0       	breq	.+4      	; 0x3120 <GetPressedKey+0xf0>
    311c:	1f 82       	std	Y+7, r1	; 0x07
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <GetPressedKey+0xf4>
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	8f 83       	std	Y+7, r24	; 0x07
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	67 e0       	ldi	r22, 0x07	; 7
    3128:	4f 81       	ldd	r20, Y+7	; 0x07
    312a:	0e 94 97 0b 	call	0x172e	; 0x172e <DIO_write>
    312e:	9b 81       	ldd	r25, Y+3	; 0x03
    3130:	89 2b       	or	r24, r25
    3132:	8b 83       	std	Y+3, r24	; 0x03

		for (col = 0; col < NUM_OF_COL; col ++)
    3134:	1a 82       	std	Y+2, r1	; 0x02
    3136:	1d c0       	rjmp	.+58     	; 0x3172 <GetPressedKey+0x142>
		{

			retstatus |= DIO_read(KEYPAD_PORT,colpins[col],&pinsate);
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	88 2f       	mov	r24, r24
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	fc 01       	movw	r30, r24
    3140:	e8 59       	subi	r30, 0x98	; 152
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	90 81       	ld	r25, Z
    3146:	9e 01       	movw	r18, r28
    3148:	2c 5f       	subi	r18, 0xFC	; 252
    314a:	3f 4f       	sbci	r19, 0xFF	; 255
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	69 2f       	mov	r22, r25
    3150:	a9 01       	movw	r20, r18
    3152:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_read>
    3156:	98 2f       	mov	r25, r24
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	89 2b       	or	r24, r25
    315c:	8b 83       	std	Y+3, r24	; 0x03

			if(PIN_IS_LOW == pinsate)
    315e:	8c 81       	ldd	r24, Y+4	; 0x04
    3160:	88 23       	and	r24, r24
    3162:	21 f4       	brne	.+8      	; 0x316c <GetPressedKey+0x13c>
				//*ppressed = KEyPad_4X4[row][col];
				#elif(NUM_OF_COL == 3)
				//*ppressed = KEyPad_4X3[row][col];
				#endif

				row = NUM_OF_ROW;
    3164:	84 e0       	ldi	r24, 0x04	; 4
    3166:	89 83       	std	Y+1, r24	; 0x01
				col = NUM_OF_COL;
    3168:	84 e0       	ldi	r24, 0x04	; 4
    316a:	8a 83       	std	Y+2, r24	; 0x02

		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW1_PIN,( (1<<row) &2)?0:1);
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW2_PIN,( (1<<row) &4)?0:1);
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW3_PIN,( (1<<row) &8)?0:1);

		for (col = 0; col < NUM_OF_COL; col ++)
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	8f 5f       	subi	r24, 0xFF	; 255
    3170:	8a 83       	std	Y+2, r24	; 0x02
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	84 30       	cpi	r24, 0x04	; 4
    3176:	00 f3       	brcs	.-64     	; 0x3138 <GetPressedKey+0x108>
	u8 row = 0;
	pinState_t pinsate;

	*ppressed = 'H';

	for(row = 0; row < NUM_OF_ROW; row++)
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	8f 5f       	subi	r24, 0xFF	; 255
    317c:	89 83       	std	Y+1, r24	; 0x01
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	84 30       	cpi	r24, 0x04	; 4
    3182:	08 f4       	brcc	.+2      	; 0x3186 <GetPressedKey+0x156>
    3184:	6b cf       	rjmp	.-298    	; 0x305c <GetPressedKey+0x2c>
				col = NUM_OF_COL;
			}
		}
	}

	return retstatus;
    3186:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3188:	2a 96       	adiw	r28, 0x0a	; 10
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	de bf       	out	0x3e, r29	; 62
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret

0000319a <initButton>:
 * params:
 * 			IN: buttonID : the name of the needed button.
 *
 */
stdReturnType_t initButton(buttonX_t buttonID)
{
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <initButton+0x6>
    31a0:	00 d0       	rcall	.+0      	; 0x31a2 <initButton+0x8>
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	89 83       	std	Y+1, r24	; 0x01

	switch(buttonID)
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	28 2f       	mov	r18, r24
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	3c 83       	std	Y+4, r19	; 0x04
    31b4:	2b 83       	std	Y+3, r18	; 0x03
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ba:	81 30       	cpi	r24, 0x01	; 1
    31bc:	91 05       	cpc	r25, r1
    31be:	81 f0       	breq	.+32     	; 0x31e0 <initButton+0x46>
    31c0:	2b 81       	ldd	r18, Y+3	; 0x03
    31c2:	3c 81       	ldd	r19, Y+4	; 0x04
    31c4:	22 30       	cpi	r18, 0x02	; 2
    31c6:	31 05       	cpc	r19, r1
    31c8:	91 f0       	breq	.+36     	; 0x31ee <initButton+0x54>
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	9c 81       	ldd	r25, Y+4	; 0x04
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	a9 f4       	brne	.+42     	; 0x31fc <initButton+0x62>
	{
		case BUTTON0:
			retStatus = DIO_init(BUTTON0_PORT, BUTTON0_PIN, INPUT);
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    31dc:	89 83       	std	Y+1, r24	; 0x01
    31de:	10 c0       	rjmp	.+32     	; 0x3200 <initButton+0x66>
			break;

		case BUTTON1:
			retStatus = DIO_init(BUTTON1_PORT, BUTTON1_PIN, INPUT);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	61 e0       	ldi	r22, 0x01	; 1
    31e4:	40 e0       	ldi	r20, 0x00	; 0
    31e6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	09 c0       	rjmp	.+18     	; 0x3200 <initButton+0x66>
			break;

		case BUTTON2:
			retStatus = DIO_init(BUTTON2_PORT, BUTTON2_PIN, INPUT);
    31ee:	82 e0       	ldi	r24, 0x02	; 2
    31f0:	62 e0       	ldi	r22, 0x02	; 2
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_init>
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <initButton+0x66>
			break;

		default:
			/* ERROR given buttonID is not supported */
			retStatus = ERROR;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return retStatus;
    3200:	89 81       	ldd	r24, Y+1	; 0x01
}
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <getButtonState>:
 * params:
 * 			IN: buttonID : the name of the needed button.
 * 			OUT: pbuttonState : pointer to the button state BUTTON_PRESSED/BUTTON_NOT_PRESSED.
 */
stdReturnType_t getButtonState(buttonX_t buttonID, buttonState_t * pbuttonState)
{
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	e1 97       	sbiw	r28, 0x31	; 49
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	8d a7       	std	Y+45, r24	; 0x2d
    3226:	7f a7       	std	Y+47, r23	; 0x2f
    3228:	6e a7       	std	Y+46, r22	; 0x2e
	stdReturnType_t retStatus = ERROR;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	8b a7       	std	Y+43, r24	; 0x2b
	pinState_t pinState;

	/* Read button pin state */
	switch(buttonID)
    322e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	39 ab       	std	Y+49, r19	; 0x31
    3236:	28 ab       	std	Y+48, r18	; 0x30
    3238:	88 a9       	ldd	r24, Y+48	; 0x30
    323a:	99 a9       	ldd	r25, Y+49	; 0x31
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	91 05       	cpc	r25, r1
    3240:	09 f4       	brne	.+2      	; 0x3244 <getButtonState+0x34>
    3242:	94 c0       	rjmp	.+296    	; 0x336c <getButtonState+0x15c>
    3244:	28 a9       	ldd	r18, Y+48	; 0x30
    3246:	39 a9       	ldd	r19, Y+49	; 0x31
    3248:	22 30       	cpi	r18, 0x02	; 2
    324a:	31 05       	cpc	r19, r1
    324c:	09 f4       	brne	.+2      	; 0x3250 <getButtonState+0x40>
    324e:	17 c1       	rjmp	.+558    	; 0x347e <getButtonState+0x26e>
    3250:	88 a9       	ldd	r24, Y+48	; 0x30
    3252:	99 a9       	ldd	r25, Y+49	; 0x31
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	09 f0       	breq	.+2      	; 0x325a <getButtonState+0x4a>
    3258:	9b c1       	rjmp	.+822    	; 0x3590 <getButtonState+0x380>
	{
		case BUTTON0:
			retStatus = DIO_read(BUTTON0_PORT,BUTTON0,&pinState);
    325a:	9e 01       	movw	r18, r28
    325c:	24 5d       	subi	r18, 0xD4	; 212
    325e:	3f 4f       	sbci	r19, 0xFF	; 255
    3260:	82 e0       	ldi	r24, 0x02	; 2
    3262:	60 e0       	ldi	r22, 0x00	; 0
    3264:	a9 01       	movw	r20, r18
    3266:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_read>
    326a:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    326c:	8c a5       	ldd	r24, Y+44	; 0x2c
    326e:	81 30       	cpi	r24, 0x01	; 1
    3270:	09 f0       	breq	.+2      	; 0x3274 <getButtonState+0x64>
    3272:	90 c1       	rjmp	.+800    	; 0x3594 <getButtonState+0x384>
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	a0 ef       	ldi	r26, 0xF0	; 240
    327a:	b1 e4       	ldi	r27, 0x41	; 65
    327c:	8f a3       	std	Y+39, r24	; 0x27
    327e:	98 a7       	std	Y+40, r25	; 0x28
    3280:	a9 a7       	std	Y+41, r26	; 0x29
    3282:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3284:	6f a1       	ldd	r22, Y+39	; 0x27
    3286:	78 a5       	ldd	r23, Y+40	; 0x28
    3288:	89 a5       	ldd	r24, Y+41	; 0x29
    328a:	9a a5       	ldd	r25, Y+42	; 0x2a
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	4a e7       	ldi	r20, 0x7A	; 122
    3292:	55 e4       	ldi	r21, 0x45	; 69
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	8b a3       	std	Y+35, r24	; 0x23
    329e:	9c a3       	std	Y+36, r25	; 0x24
    32a0:	ad a3       	std	Y+37, r26	; 0x25
    32a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32a4:	6b a1       	ldd	r22, Y+35	; 0x23
    32a6:	7c a1       	ldd	r23, Y+36	; 0x24
    32a8:	8d a1       	ldd	r24, Y+37	; 0x25
    32aa:	9e a1       	ldd	r25, Y+38	; 0x26
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e8       	ldi	r20, 0x80	; 128
    32b2:	5f e3       	ldi	r21, 0x3F	; 63
    32b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b8:	88 23       	and	r24, r24
    32ba:	2c f4       	brge	.+10     	; 0x32c6 <getButtonState+0xb6>
		__ticks = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9a a3       	std	Y+34, r25	; 0x22
    32c2:	89 a3       	std	Y+33, r24	; 0x21
    32c4:	3f c0       	rjmp	.+126    	; 0x3344 <getButtonState+0x134>
	else if (__tmp > 65535)
    32c6:	6b a1       	ldd	r22, Y+35	; 0x23
    32c8:	7c a1       	ldd	r23, Y+36	; 0x24
    32ca:	8d a1       	ldd	r24, Y+37	; 0x25
    32cc:	9e a1       	ldd	r25, Y+38	; 0x26
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	3f ef       	ldi	r19, 0xFF	; 255
    32d2:	4f e7       	ldi	r20, 0x7F	; 127
    32d4:	57 e4       	ldi	r21, 0x47	; 71
    32d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32da:	18 16       	cp	r1, r24
    32dc:	4c f5       	brge	.+82     	; 0x3330 <getButtonState+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32de:	6f a1       	ldd	r22, Y+39	; 0x27
    32e0:	78 a5       	ldd	r23, Y+40	; 0x28
    32e2:	89 a5       	ldd	r24, Y+41	; 0x29
    32e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e2       	ldi	r20, 0x20	; 32
    32ec:	51 e4       	ldi	r21, 0x41	; 65
    32ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9a a3       	std	Y+34, r25	; 0x22
    3304:	89 a3       	std	Y+33, r24	; 0x21
    3306:	0f c0       	rjmp	.+30     	; 0x3326 <getButtonState+0x116>
    3308:	80 e9       	ldi	r24, 0x90	; 144
    330a:	91 e0       	ldi	r25, 0x01	; 1
    330c:	98 a3       	std	Y+32, r25	; 0x20
    330e:	8f 8f       	std	Y+31, r24	; 0x1f
    3310:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3312:	98 a1       	ldd	r25, Y+32	; 0x20
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <getButtonState+0x104>
    3318:	98 a3       	std	Y+32, r25	; 0x20
    331a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331c:	89 a1       	ldd	r24, Y+33	; 0x21
    331e:	9a a1       	ldd	r25, Y+34	; 0x22
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	9a a3       	std	Y+34, r25	; 0x22
    3324:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3326:	89 a1       	ldd	r24, Y+33	; 0x21
    3328:	9a a1       	ldd	r25, Y+34	; 0x22
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	69 f7       	brne	.-38     	; 0x3308 <getButtonState+0xf8>
    332e:	14 c0       	rjmp	.+40     	; 0x3358 <getButtonState+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3330:	6b a1       	ldd	r22, Y+35	; 0x23
    3332:	7c a1       	ldd	r23, Y+36	; 0x24
    3334:	8d a1       	ldd	r24, Y+37	; 0x25
    3336:	9e a1       	ldd	r25, Y+38	; 0x26
    3338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9a a3       	std	Y+34, r25	; 0x22
    3342:	89 a3       	std	Y+33, r24	; 0x21
    3344:	89 a1       	ldd	r24, Y+33	; 0x21
    3346:	9a a1       	ldd	r25, Y+34	; 0x22
    3348:	9e 8f       	std	Y+30, r25	; 0x1e
    334a:	8d 8f       	std	Y+29, r24	; 0x1d
    334c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    334e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <getButtonState+0x140>
    3354:	9e 8f       	std	Y+30, r25	; 0x1e
    3356:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON0_PORT,BUTTON0,&pinState);
    3358:	9e 01       	movw	r18, r28
    335a:	24 5d       	subi	r18, 0xD4	; 212
    335c:	3f 4f       	sbci	r19, 0xFF	; 255
    335e:	82 e0       	ldi	r24, 0x02	; 2
    3360:	60 e0       	ldi	r22, 0x00	; 0
    3362:	a9 01       	movw	r20, r18
    3364:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_read>
    3368:	8b a7       	std	Y+43, r24	; 0x2b
    336a:	14 c1       	rjmp	.+552    	; 0x3594 <getButtonState+0x384>
			}

			break;

		case BUTTON1:
			retStatus = DIO_read(BUTTON1_PORT, BUTTON1_PIN, &pinState);
    336c:	9e 01       	movw	r18, r28
    336e:	24 5d       	subi	r18, 0xD4	; 212
    3370:	3f 4f       	sbci	r19, 0xFF	; 255
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	61 e0       	ldi	r22, 0x01	; 1
    3376:	a9 01       	movw	r20, r18
    3378:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_read>
    337c:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    337e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3380:	81 30       	cpi	r24, 0x01	; 1
    3382:	09 f0       	breq	.+2      	; 0x3386 <getButtonState+0x176>
    3384:	07 c1       	rjmp	.+526    	; 0x3594 <getButtonState+0x384>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a0 ef       	ldi	r26, 0xF0	; 240
    338c:	b1 e4       	ldi	r27, 0x41	; 65
    338e:	89 8f       	std	Y+25, r24	; 0x19
    3390:	9a 8f       	std	Y+26, r25	; 0x1a
    3392:	ab 8f       	std	Y+27, r26	; 0x1b
    3394:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	69 8d       	ldd	r22, Y+25	; 0x19
    3398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a e7       	ldi	r20, 0x7A	; 122
    33a4:	55 e4       	ldi	r21, 0x45	; 69
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8d 8b       	std	Y+21, r24	; 0x15
    33b0:	9e 8b       	std	Y+22, r25	; 0x16
    33b2:	af 8b       	std	Y+23, r26	; 0x17
    33b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33b6:	6d 89       	ldd	r22, Y+21	; 0x15
    33b8:	7e 89       	ldd	r23, Y+22	; 0x16
    33ba:	8f 89       	ldd	r24, Y+23	; 0x17
    33bc:	98 8d       	ldd	r25, Y+24	; 0x18
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <getButtonState+0x1c8>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9c 8b       	std	Y+20, r25	; 0x14
    33d4:	8b 8b       	std	Y+19, r24	; 0x13
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <getButtonState+0x246>
	else if (__tmp > 65535)
    33d8:	6d 89       	ldd	r22, Y+21	; 0x15
    33da:	7e 89       	ldd	r23, Y+22	; 0x16
    33dc:	8f 89       	ldd	r24, Y+23	; 0x17
    33de:	98 8d       	ldd	r25, Y+24	; 0x18
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <getButtonState+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	69 8d       	ldd	r22, Y+25	; 0x19
    33f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9c 8b       	std	Y+20, r25	; 0x14
    3416:	8b 8b       	std	Y+19, r24	; 0x13
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <getButtonState+0x228>
    341a:	80 e9       	ldi	r24, 0x90	; 144
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	9a 8b       	std	Y+18, r25	; 0x12
    3420:	89 8b       	std	Y+17, r24	; 0x11
    3422:	89 89       	ldd	r24, Y+17	; 0x11
    3424:	9a 89       	ldd	r25, Y+18	; 0x12
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <getButtonState+0x216>
    342a:	9a 8b       	std	Y+18, r25	; 0x12
    342c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8b 89       	ldd	r24, Y+19	; 0x13
    3430:	9c 89       	ldd	r25, Y+20	; 0x14
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9c 8b       	std	Y+20, r25	; 0x14
    3436:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8b 89       	ldd	r24, Y+19	; 0x13
    343a:	9c 89       	ldd	r25, Y+20	; 0x14
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <getButtonState+0x20a>
    3440:	14 c0       	rjmp	.+40     	; 0x346a <getButtonState+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6d 89       	ldd	r22, Y+21	; 0x15
    3444:	7e 89       	ldd	r23, Y+22	; 0x16
    3446:	8f 89       	ldd	r24, Y+23	; 0x17
    3448:	98 8d       	ldd	r25, Y+24	; 0x18
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	8b 89       	ldd	r24, Y+19	; 0x13
    3458:	9c 89       	ldd	r25, Y+20	; 0x14
    345a:	98 8b       	std	Y+16, r25	; 0x10
    345c:	8f 87       	std	Y+15, r24	; 0x0f
    345e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3460:	98 89       	ldd	r25, Y+16	; 0x10
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <getButtonState+0x252>
    3466:	98 8b       	std	Y+16, r25	; 0x10
    3468:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON1_PORT, BUTTON1_PIN, &pinState);
    346a:	9e 01       	movw	r18, r28
    346c:	24 5d       	subi	r18, 0xD4	; 212
    346e:	3f 4f       	sbci	r19, 0xFF	; 255
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	61 e0       	ldi	r22, 0x01	; 1
    3474:	a9 01       	movw	r20, r18
    3476:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_read>
    347a:	8b a7       	std	Y+43, r24	; 0x2b
    347c:	8b c0       	rjmp	.+278    	; 0x3594 <getButtonState+0x384>
				/* Do nothing */
			}
			break;

		case BUTTON2:
			retStatus = DIO_read(BUTTON2_PORT, BUTTON2_PIN, &pinState);
    347e:	9e 01       	movw	r18, r28
    3480:	24 5d       	subi	r18, 0xD4	; 212
    3482:	3f 4f       	sbci	r19, 0xFF	; 255
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	62 e0       	ldi	r22, 0x02	; 2
    3488:	a9 01       	movw	r20, r18
    348a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_read>
    348e:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    3490:	8c a5       	ldd	r24, Y+44	; 0x2c
    3492:	81 30       	cpi	r24, 0x01	; 1
    3494:	09 f0       	breq	.+2      	; 0x3498 <getButtonState+0x288>
    3496:	7e c0       	rjmp	.+252    	; 0x3594 <getButtonState+0x384>
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	a0 ef       	ldi	r26, 0xF0	; 240
    349e:	b1 e4       	ldi	r27, 0x41	; 65
    34a0:	8b 87       	std	Y+11, r24	; 0x0b
    34a2:	9c 87       	std	Y+12, r25	; 0x0c
    34a4:	ad 87       	std	Y+13, r26	; 0x0d
    34a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	4a e7       	ldi	r20, 0x7A	; 122
    34b6:	55 e4       	ldi	r21, 0x45	; 69
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8f 83       	std	Y+7, r24	; 0x07
    34c2:	98 87       	std	Y+8, r25	; 0x08
    34c4:	a9 87       	std	Y+9, r26	; 0x09
    34c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34c8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ca:	78 85       	ldd	r23, Y+8	; 0x08
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e8       	ldi	r20, 0x80	; 128
    34d6:	5f e3       	ldi	r21, 0x3F	; 63
    34d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34dc:	88 23       	and	r24, r24
    34de:	2c f4       	brge	.+10     	; 0x34ea <getButtonState+0x2da>
		__ticks = 1;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9e 83       	std	Y+6, r25	; 0x06
    34e6:	8d 83       	std	Y+5, r24	; 0x05
    34e8:	3f c0       	rjmp	.+126    	; 0x3568 <getButtonState+0x358>
	else if (__tmp > 65535)
    34ea:	6f 81       	ldd	r22, Y+7	; 0x07
    34ec:	78 85       	ldd	r23, Y+8	; 0x08
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	3f ef       	ldi	r19, 0xFF	; 255
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	57 e4       	ldi	r21, 0x47	; 71
    34fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	4c f5       	brge	.+82     	; 0x3554 <getButtonState+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3502:	6b 85       	ldd	r22, Y+11	; 0x0b
    3504:	7c 85       	ldd	r23, Y+12	; 0x0c
    3506:	8d 85       	ldd	r24, Y+13	; 0x0d
    3508:	9e 85       	ldd	r25, Y+14	; 0x0e
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e2       	ldi	r20, 0x20	; 32
    3510:	51 e4       	ldi	r21, 0x41	; 65
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	bc 01       	movw	r22, r24
    351c:	cd 01       	movw	r24, r26
    351e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	9e 83       	std	Y+6, r25	; 0x06
    3528:	8d 83       	std	Y+5, r24	; 0x05
    352a:	0f c0       	rjmp	.+30     	; 0x354a <getButtonState+0x33a>
    352c:	80 e9       	ldi	r24, 0x90	; 144
    352e:	91 e0       	ldi	r25, 0x01	; 1
    3530:	9c 83       	std	Y+4, r25	; 0x04
    3532:	8b 83       	std	Y+3, r24	; 0x03
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	9c 81       	ldd	r25, Y+4	; 0x04
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	f1 f7       	brne	.-4      	; 0x3538 <getButtonState+0x328>
    353c:	9c 83       	std	Y+4, r25	; 0x04
    353e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	9e 81       	ldd	r25, Y+6	; 0x06
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	69 f7       	brne	.-38     	; 0x352c <getButtonState+0x31c>
    3552:	14 c0       	rjmp	.+40     	; 0x357c <getButtonState+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3554:	6f 81       	ldd	r22, Y+7	; 0x07
    3556:	78 85       	ldd	r23, Y+8	; 0x08
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	9a 83       	std	Y+2, r25	; 0x02
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <getButtonState+0x364>
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON2_PORT, BUTTON2_PIN, &pinState);
    357c:	9e 01       	movw	r18, r28
    357e:	24 5d       	subi	r18, 0xD4	; 212
    3580:	3f 4f       	sbci	r19, 0xFF	; 255
    3582:	82 e0       	ldi	r24, 0x02	; 2
    3584:	62 e0       	ldi	r22, 0x02	; 2
    3586:	a9 01       	movw	r20, r18
    3588:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DIO_read>
    358c:	8b a7       	std	Y+43, r24	; 0x2b
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <getButtonState+0x384>
			}
			break;

		default:
			/* ERROR given buttonID is not supported */
			retStatus = ERROR;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	8b a7       	std	Y+43, r24	; 0x2b
			break;
	}

	/* Check button state */
	if( (SUCCESS == retStatus) && (PIN_IS_HIGH == pinState))
    3594:	8b a5       	ldd	r24, Y+43	; 0x2b
    3596:	88 23       	and	r24, r24
    3598:	49 f4       	brne	.+18     	; 0x35ac <getButtonState+0x39c>
    359a:	8c a5       	ldd	r24, Y+44	; 0x2c
    359c:	81 30       	cpi	r24, 0x01	; 1
    359e:	31 f4       	brne	.+12     	; 0x35ac <getButtonState+0x39c>
	{
		*pbuttonState = BUTTON_PRESSED;
    35a0:	ee a5       	ldd	r30, Y+46	; 0x2e
    35a2:	ff a5       	ldd	r31, Y+47	; 0x2f
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	80 83       	st	Z, r24
		retStatus = SUCCESS;
    35a8:	1b a6       	std	Y+43, r1	; 0x2b
    35aa:	0d c0       	rjmp	.+26     	; 0x35c6 <getButtonState+0x3b6>
	}
	else if((SUCCESS == retStatus) && (PIN_IS_LOW == pinState))
    35ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    35ae:	88 23       	and	r24, r24
    35b0:	41 f4       	brne	.+16     	; 0x35c2 <getButtonState+0x3b2>
    35b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    35b4:	88 23       	and	r24, r24
    35b6:	29 f4       	brne	.+10     	; 0x35c2 <getButtonState+0x3b2>
	{
		*pbuttonState = BUTTON_NOT_PRESSED;
    35b8:	ee a5       	ldd	r30, Y+46	; 0x2e
    35ba:	ff a5       	ldd	r31, Y+47	; 0x2f
    35bc:	10 82       	st	Z, r1
		retStatus = SUCCESS;
    35be:	1b a6       	std	Y+43, r1	; 0x2b
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <getButtonState+0x3b6>
	}
	else
	{
		retStatus = ERROR;
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	8b a7       	std	Y+43, r24	; 0x2b
	}

	return retStatus;
    35c6:	8b a5       	ldd	r24, Y+43	; 0x2b

}
    35c8:	e1 96       	adiw	r28, 0x31	; 49
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <main>:
#include "HAL/seven/inc/HAL_Seven.h"

#define F_CPU 16000000UL //16 MHZ

// Challenge2
int  main(void) {
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	a3 97       	sbiw	r28, 0x23	; 35
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	de bf       	out	0x3e, r29	; 62
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	cd bf       	out	0x3d, r28	; 61
	// Declaration and initial variable using counter
	u8 num = 0;
    35ee:	19 a2       	std	Y+33, r1	; 0x21
	// Declaration pointer using Button
	u8 x = 0;
    35f0:	1a a2       	std	Y+34, r1	; 0x22
	u8 y = 0;
    35f2:	1b a2       	std	Y+35, r1	; 0x23
	u8 *pbuttonstate = &x;
    35f4:	ce 01       	movw	r24, r28
    35f6:	82 96       	adiw	r24, 0x22	; 34
    35f8:	98 a3       	std	Y+32, r25	; 0x20
    35fa:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 *pbuttonstate1 = &y;
    35fc:	ce 01       	movw	r24, r28
    35fe:	83 96       	adiw	r24, 0x23	; 35
    3600:	9e 8f       	std	Y+30, r25	; 0x1e
    3602:	8d 8f       	std	Y+29, r24	; 0x1d
	initButton(BUTTON0); // configure pin 0 in PORTD as input pin
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	0e 94 cd 18 	call	0x319a	; 0x319a <initButton>
	initButton(BUTTON1); // configure pin 1 in PORTD as input pin
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	0e 94 cd 18 	call	0x319a	; 0x319a <initButton>

	// initialize the 7-segment
	initSevenSegment(SEVEN_SEGMENT0);
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <initSevenSegment>
	controlSevenSegment(SEVEN_SEGMENT0, SEGMENT_ENABLED);
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	61 e0       	ldi	r22, 0x01	; 1
    361a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <controlSevenSegment>
	while (1) {
		getButtonState(BUTTON0, pbuttonstate);
    361e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3620:	38 a1       	ldd	r19, Y+32	; 0x20
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	b9 01       	movw	r22, r18
    3626:	0e 94 08 19 	call	0x3210	; 0x3210 <getButtonState>
		getButtonState(BUTTON1, pbuttonstate1);
    362a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    362c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	b9 01       	movw	r22, r18
    3632:	0e 94 08 19 	call	0x3210	; 0x3210 <getButtonState>

		// check if the push button is pressed

		if (*pbuttonstate == BUTTON_PRESSED) {
    3636:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3638:	f8 a1       	ldd	r31, Y+32	; 0x20
    363a:	80 81       	ld	r24, Z
    363c:	81 30       	cpi	r24, 0x01	; 1
    363e:	09 f0       	breq	.+2      	; 0x3642 <main+0x68>
    3640:	7c c0       	rjmp	.+248    	; 0x373a <main+0x160>
			TurnOnDecimalPoint(SEVEN_SEGMENT0);
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <TurnOnDecimalPoint>
			writeToSevenSegment(SEVEN_SEGMENT0, num);
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	69 a1       	ldd	r22, Y+33	; 0x21
    364c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <writeToSevenSegment>
			// if overflow occurs
			num++;
    3650:	89 a1       	ldd	r24, Y+33	; 0x21
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	89 a3       	std	Y+33, r24	; 0x21
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	aa ef       	ldi	r26, 0xFA	; 250
    365c:	b3 e4       	ldi	r27, 0x43	; 67
    365e:	89 8f       	std	Y+25, r24	; 0x19
    3660:	9a 8f       	std	Y+26, r25	; 0x1a
    3662:	ab 8f       	std	Y+27, r26	; 0x1b
    3664:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3666:	69 8d       	ldd	r22, Y+25	; 0x19
    3668:	7a 8d       	ldd	r23, Y+26	; 0x1a
    366a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    366c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	4a e7       	ldi	r20, 0x7A	; 122
    3674:	55 e4       	ldi	r21, 0x45	; 69
    3676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	8d 8b       	std	Y+21, r24	; 0x15
    3680:	9e 8b       	std	Y+22, r25	; 0x16
    3682:	af 8b       	std	Y+23, r26	; 0x17
    3684:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3686:	6d 89       	ldd	r22, Y+21	; 0x15
    3688:	7e 89       	ldd	r23, Y+22	; 0x16
    368a:	8f 89       	ldd	r24, Y+23	; 0x17
    368c:	98 8d       	ldd	r25, Y+24	; 0x18
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e8       	ldi	r20, 0x80	; 128
    3694:	5f e3       	ldi	r21, 0x3F	; 63
    3696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    369a:	88 23       	and	r24, r24
    369c:	2c f4       	brge	.+10     	; 0x36a8 <main+0xce>
		__ticks = 1;
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	9c 8b       	std	Y+20, r25	; 0x14
    36a4:	8b 8b       	std	Y+19, r24	; 0x13
    36a6:	3f c0       	rjmp	.+126    	; 0x3726 <main+0x14c>
	else if (__tmp > 65535)
    36a8:	6d 89       	ldd	r22, Y+21	; 0x15
    36aa:	7e 89       	ldd	r23, Y+22	; 0x16
    36ac:	8f 89       	ldd	r24, Y+23	; 0x17
    36ae:	98 8d       	ldd	r25, Y+24	; 0x18
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	3f ef       	ldi	r19, 0xFF	; 255
    36b4:	4f e7       	ldi	r20, 0x7F	; 127
    36b6:	57 e4       	ldi	r21, 0x47	; 71
    36b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36bc:	18 16       	cp	r1, r24
    36be:	4c f5       	brge	.+82     	; 0x3712 <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c0:	69 8d       	ldd	r22, Y+25	; 0x19
    36c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e2       	ldi	r20, 0x20	; 32
    36ce:	51 e4       	ldi	r21, 0x41	; 65
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	bc 01       	movw	r22, r24
    36da:	cd 01       	movw	r24, r26
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9c 8b       	std	Y+20, r25	; 0x14
    36e6:	8b 8b       	std	Y+19, r24	; 0x13
    36e8:	0f c0       	rjmp	.+30     	; 0x3708 <main+0x12e>
    36ea:	80 e9       	ldi	r24, 0x90	; 144
    36ec:	91 e0       	ldi	r25, 0x01	; 1
    36ee:	9a 8b       	std	Y+18, r25	; 0x12
    36f0:	89 8b       	std	Y+17, r24	; 0x11
    36f2:	89 89       	ldd	r24, Y+17	; 0x11
    36f4:	9a 89       	ldd	r25, Y+18	; 0x12
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <main+0x11c>
    36fa:	9a 8b       	std	Y+18, r25	; 0x12
    36fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3700:	9c 89       	ldd	r25, Y+20	; 0x14
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	9c 8b       	std	Y+20, r25	; 0x14
    3706:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3708:	8b 89       	ldd	r24, Y+19	; 0x13
    370a:	9c 89       	ldd	r25, Y+20	; 0x14
    370c:	00 97       	sbiw	r24, 0x00	; 0
    370e:	69 f7       	brne	.-38     	; 0x36ea <main+0x110>
    3710:	14 c0       	rjmp	.+40     	; 0x373a <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3712:	6d 89       	ldd	r22, Y+21	; 0x15
    3714:	7e 89       	ldd	r23, Y+22	; 0x16
    3716:	8f 89       	ldd	r24, Y+23	; 0x17
    3718:	98 8d       	ldd	r25, Y+24	; 0x18
    371a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	9c 8b       	std	Y+20, r25	; 0x14
    3724:	8b 8b       	std	Y+19, r24	; 0x13
    3726:	8b 89       	ldd	r24, Y+19	; 0x13
    3728:	9c 89       	ldd	r25, Y+20	; 0x14
    372a:	98 8b       	std	Y+16, r25	; 0x10
    372c:	8f 87       	std	Y+15, r24	; 0x0f
    372e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3730:	98 89       	ldd	r25, Y+16	; 0x10
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <main+0x158>
    3736:	98 8b       	std	Y+16, r25	; 0x10
    3738:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);

		}
		if ((*pbuttonstate1 == BUTTON_PRESSED)) {
    373a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    373c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    373e:	80 81       	ld	r24, Z
    3740:	81 30       	cpi	r24, 0x01	; 1
    3742:	09 f0       	breq	.+2      	; 0x3746 <main+0x16c>
    3744:	6c cf       	rjmp	.-296    	; 0x361e <main+0x44>
			writeToSevenSegment(SEVEN_SEGMENT0, num);
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	69 a1       	ldd	r22, Y+33	; 0x21
    374a:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <writeToSevenSegment>
			num--;
    374e:	89 a1       	ldd	r24, Y+33	; 0x21
    3750:	81 50       	subi	r24, 0x01	; 1
    3752:	89 a3       	std	Y+33, r24	; 0x21
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	aa ef       	ldi	r26, 0xFA	; 250
    375a:	b3 e4       	ldi	r27, 0x43	; 67
    375c:	8b 87       	std	Y+11, r24	; 0x0b
    375e:	9c 87       	std	Y+12, r25	; 0x0c
    3760:	ad 87       	std	Y+13, r26	; 0x0d
    3762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3764:	6b 85       	ldd	r22, Y+11	; 0x0b
    3766:	7c 85       	ldd	r23, Y+12	; 0x0c
    3768:	8d 85       	ldd	r24, Y+13	; 0x0d
    376a:	9e 85       	ldd	r25, Y+14	; 0x0e
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	4a e7       	ldi	r20, 0x7A	; 122
    3772:	55 e4       	ldi	r21, 0x45	; 69
    3774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	8f 83       	std	Y+7, r24	; 0x07
    377e:	98 87       	std	Y+8, r25	; 0x08
    3780:	a9 87       	std	Y+9, r26	; 0x09
    3782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3784:	6f 81       	ldd	r22, Y+7	; 0x07
    3786:	78 85       	ldd	r23, Y+8	; 0x08
    3788:	89 85       	ldd	r24, Y+9	; 0x09
    378a:	9a 85       	ldd	r25, Y+10	; 0x0a
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e8       	ldi	r20, 0x80	; 128
    3792:	5f e3       	ldi	r21, 0x3F	; 63
    3794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3798:	88 23       	and	r24, r24
    379a:	2c f4       	brge	.+10     	; 0x37a6 <main+0x1cc>
		__ticks = 1;
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	9e 83       	std	Y+6, r25	; 0x06
    37a2:	8d 83       	std	Y+5, r24	; 0x05
    37a4:	3f c0       	rjmp	.+126    	; 0x3824 <main+0x24a>
	else if (__tmp > 65535)
    37a6:	6f 81       	ldd	r22, Y+7	; 0x07
    37a8:	78 85       	ldd	r23, Y+8	; 0x08
    37aa:	89 85       	ldd	r24, Y+9	; 0x09
    37ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	3f ef       	ldi	r19, 0xFF	; 255
    37b2:	4f e7       	ldi	r20, 0x7F	; 127
    37b4:	57 e4       	ldi	r21, 0x47	; 71
    37b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37ba:	18 16       	cp	r1, r24
    37bc:	4c f5       	brge	.+82     	; 0x3810 <main+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37be:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e2       	ldi	r20, 0x20	; 32
    37cc:	51 e4       	ldi	r21, 0x41	; 65
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	9e 83       	std	Y+6, r25	; 0x06
    37e4:	8d 83       	std	Y+5, r24	; 0x05
    37e6:	0f c0       	rjmp	.+30     	; 0x3806 <main+0x22c>
    37e8:	80 e9       	ldi	r24, 0x90	; 144
    37ea:	91 e0       	ldi	r25, 0x01	; 1
    37ec:	9c 83       	std	Y+4, r25	; 0x04
    37ee:	8b 83       	std	Y+3, r24	; 0x03
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
    37f2:	9c 81       	ldd	r25, Y+4	; 0x04
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	f1 f7       	brne	.-4      	; 0x37f4 <main+0x21a>
    37f8:	9c 83       	std	Y+4, r25	; 0x04
    37fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	9e 83       	std	Y+6, r25	; 0x06
    3804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3806:	8d 81       	ldd	r24, Y+5	; 0x05
    3808:	9e 81       	ldd	r25, Y+6	; 0x06
    380a:	00 97       	sbiw	r24, 0x00	; 0
    380c:	69 f7       	brne	.-38     	; 0x37e8 <main+0x20e>
    380e:	07 cf       	rjmp	.-498    	; 0x361e <main+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3810:	6f 81       	ldd	r22, Y+7	; 0x07
    3812:	78 85       	ldd	r23, Y+8	; 0x08
    3814:	89 85       	ldd	r24, Y+9	; 0x09
    3816:	9a 85       	ldd	r25, Y+10	; 0x0a
    3818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	9e 83       	std	Y+6, r25	; 0x06
    3822:	8d 83       	std	Y+5, r24	; 0x05
    3824:	8d 81       	ldd	r24, Y+5	; 0x05
    3826:	9e 81       	ldd	r25, Y+6	; 0x06
    3828:	9a 83       	std	Y+2, r25	; 0x02
    382a:	89 83       	std	Y+1, r24	; 0x01
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	9a 81       	ldd	r25, Y+2	; 0x02
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <main+0x256>
    3834:	9a 83       	std	Y+2, r25	; 0x02
    3836:	89 83       	std	Y+1, r24	; 0x01
    3838:	f2 ce       	rjmp	.-540    	; 0x361e <main+0x44>

0000383a <__prologue_saves__>:
    383a:	2f 92       	push	r2
    383c:	3f 92       	push	r3
    383e:	4f 92       	push	r4
    3840:	5f 92       	push	r5
    3842:	6f 92       	push	r6
    3844:	7f 92       	push	r7
    3846:	8f 92       	push	r8
    3848:	9f 92       	push	r9
    384a:	af 92       	push	r10
    384c:	bf 92       	push	r11
    384e:	cf 92       	push	r12
    3850:	df 92       	push	r13
    3852:	ef 92       	push	r14
    3854:	ff 92       	push	r15
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
    3862:	ca 1b       	sub	r28, r26
    3864:	db 0b       	sbc	r29, r27
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	f8 94       	cli
    386a:	de bf       	out	0x3e, r29	; 62
    386c:	0f be       	out	0x3f, r0	; 63
    386e:	cd bf       	out	0x3d, r28	; 61
    3870:	09 94       	ijmp

00003872 <__epilogue_restores__>:
    3872:	2a 88       	ldd	r2, Y+18	; 0x12
    3874:	39 88       	ldd	r3, Y+17	; 0x11
    3876:	48 88       	ldd	r4, Y+16	; 0x10
    3878:	5f 84       	ldd	r5, Y+15	; 0x0f
    387a:	6e 84       	ldd	r6, Y+14	; 0x0e
    387c:	7d 84       	ldd	r7, Y+13	; 0x0d
    387e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3880:	9b 84       	ldd	r9, Y+11	; 0x0b
    3882:	aa 84       	ldd	r10, Y+10	; 0x0a
    3884:	b9 84       	ldd	r11, Y+9	; 0x09
    3886:	c8 84       	ldd	r12, Y+8	; 0x08
    3888:	df 80       	ldd	r13, Y+7	; 0x07
    388a:	ee 80       	ldd	r14, Y+6	; 0x06
    388c:	fd 80       	ldd	r15, Y+5	; 0x05
    388e:	0c 81       	ldd	r16, Y+4	; 0x04
    3890:	1b 81       	ldd	r17, Y+3	; 0x03
    3892:	aa 81       	ldd	r26, Y+2	; 0x02
    3894:	b9 81       	ldd	r27, Y+1	; 0x01
    3896:	ce 0f       	add	r28, r30
    3898:	d1 1d       	adc	r29, r1
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	f8 94       	cli
    389e:	de bf       	out	0x3e, r29	; 62
    38a0:	0f be       	out	0x3f, r0	; 63
    38a2:	cd bf       	out	0x3d, r28	; 61
    38a4:	ed 01       	movw	r28, r26
    38a6:	08 95       	ret

000038a8 <itoa>:
    38a8:	fb 01       	movw	r30, r22
    38aa:	9f 01       	movw	r18, r30
    38ac:	e8 94       	clt
    38ae:	42 30       	cpi	r20, 0x02	; 2
    38b0:	c4 f0       	brlt	.+48     	; 0x38e2 <itoa+0x3a>
    38b2:	45 32       	cpi	r20, 0x25	; 37
    38b4:	b4 f4       	brge	.+44     	; 0x38e2 <itoa+0x3a>
    38b6:	4a 30       	cpi	r20, 0x0A	; 10
    38b8:	29 f4       	brne	.+10     	; 0x38c4 <itoa+0x1c>
    38ba:	97 fb       	bst	r25, 7
    38bc:	1e f4       	brtc	.+6      	; 0x38c4 <itoa+0x1c>
    38be:	90 95       	com	r25
    38c0:	81 95       	neg	r24
    38c2:	9f 4f       	sbci	r25, 0xFF	; 255
    38c4:	64 2f       	mov	r22, r20
    38c6:	77 27       	eor	r23, r23
    38c8:	0e 94 85 1c 	call	0x390a	; 0x390a <__udivmodhi4>
    38cc:	80 5d       	subi	r24, 0xD0	; 208
    38ce:	8a 33       	cpi	r24, 0x3A	; 58
    38d0:	0c f0       	brlt	.+2      	; 0x38d4 <itoa+0x2c>
    38d2:	89 5d       	subi	r24, 0xD9	; 217
    38d4:	81 93       	st	Z+, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	a1 f7       	brne	.-24     	; 0x38c4 <itoa+0x1c>
    38dc:	16 f4       	brtc	.+4      	; 0x38e2 <itoa+0x3a>
    38de:	5d e2       	ldi	r21, 0x2D	; 45
    38e0:	51 93       	st	Z+, r21
    38e2:	10 82       	st	Z, r1
    38e4:	c9 01       	movw	r24, r18
    38e6:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <strrev>

000038ea <strrev>:
    38ea:	dc 01       	movw	r26, r24
    38ec:	fc 01       	movw	r30, r24
    38ee:	67 2f       	mov	r22, r23
    38f0:	71 91       	ld	r23, Z+
    38f2:	77 23       	and	r23, r23
    38f4:	e1 f7       	brne	.-8      	; 0x38ee <strrev+0x4>
    38f6:	32 97       	sbiw	r30, 0x02	; 2
    38f8:	04 c0       	rjmp	.+8      	; 0x3902 <strrev+0x18>
    38fa:	7c 91       	ld	r23, X
    38fc:	6d 93       	st	X+, r22
    38fe:	70 83       	st	Z, r23
    3900:	62 91       	ld	r22, -Z
    3902:	ae 17       	cp	r26, r30
    3904:	bf 07       	cpc	r27, r31
    3906:	c8 f3       	brcs	.-14     	; 0x38fa <strrev+0x10>
    3908:	08 95       	ret

0000390a <__udivmodhi4>:
    390a:	aa 1b       	sub	r26, r26
    390c:	bb 1b       	sub	r27, r27
    390e:	51 e1       	ldi	r21, 0x11	; 17
    3910:	07 c0       	rjmp	.+14     	; 0x3920 <__udivmodhi4_ep>

00003912 <__udivmodhi4_loop>:
    3912:	aa 1f       	adc	r26, r26
    3914:	bb 1f       	adc	r27, r27
    3916:	a6 17       	cp	r26, r22
    3918:	b7 07       	cpc	r27, r23
    391a:	10 f0       	brcs	.+4      	; 0x3920 <__udivmodhi4_ep>
    391c:	a6 1b       	sub	r26, r22
    391e:	b7 0b       	sbc	r27, r23

00003920 <__udivmodhi4_ep>:
    3920:	88 1f       	adc	r24, r24
    3922:	99 1f       	adc	r25, r25
    3924:	5a 95       	dec	r21
    3926:	a9 f7       	brne	.-22     	; 0x3912 <__udivmodhi4_loop>
    3928:	80 95       	com	r24
    392a:	90 95       	com	r25
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	08 95       	ret

00003932 <_exit>:
    3932:	f8 94       	cli

00003934 <__stop_program>:
    3934:	ff cf       	rjmp	.-2      	; 0x3934 <__stop_program>
