
Drivers_AVR_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00003f80  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a6  0080006c  0080006c  00004020  2**0
                  ALLOC
  3 .stab         00006660  00000000  00000000  00004020  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b09  00000000  00000000  0000a680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d189  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d439  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ff6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011109  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000118d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_1>
       8:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_2>
       c:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_12>
      34:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_13>
      38:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <main>
      8a:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 52 1f 	jmp	0x3ea4	; 0x3ea4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_1>:
static void(* INT2_callBackPtr)(void) = NULL;

/* External interrupts service routines */
/* INT0 ISR */
ISR(INT0_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(NULL != INT0_callBackPtr)
     b70:	80 91 6c 00 	lds	r24, 0x006C
     b74:	90 91 6d 00 	lds	r25, 0x006D
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_1+0x40>
	{
		INT0_callBackPtr();
     b7c:	e0 91 6c 00 	lds	r30, 0x006C
     b80:	f0 91 6d 00 	lds	r31, 0x006D
     b84:	09 95       	icall
	}

}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_2>:

/* INT1 ISR */
ISR(INT1_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if(NULL != INT1_callBackPtr)
     bd6:	80 91 6e 00 	lds	r24, 0x006E
     bda:	90 91 6f 00 	lds	r25, 0x006F
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_2+0x40>
		{
			INT1_callBackPtr();
     be2:	e0 91 6e 00 	lds	r30, 0x006E
     be6:	f0 91 6f 00 	lds	r31, 0x006F
     bea:	09 95       	icall
		}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_3>:

/* INT2 ISR */
ISR(INT2_vect)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
	if(NULL != INT2_callBackPtr)
     c3c:	80 91 70 00 	lds	r24, 0x0070
     c40:	90 91 71 00 	lds	r25, 0x0071
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	29 f0       	breq	.+10     	; 0xc52 <__vector_3+0x40>
		{
			INT2_callBackPtr();
     c48:	e0 91 70 00 	lds	r30, 0x0070
     c4c:	f0 91 71 00 	lds	r31, 0x0071
     c50:	09 95       	icall
		}

}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <initExternalInterrupt>:
 * 			IN: exIntID : the ID of the external interrupt INT_0,INT_1, etc..
 * 			IN: intSensitivity : the type of sensitivity that trigger the interrupt: FALLING_EDGE, RISING_EDGE, etc...
 * 			IN: callBackPtr : pointer to the upper layer call back function.
 */
stdReturnType_t initExternalInterrupt(extIntX_t exIntID, extIntSensitivity_t intSensitivity, void(* callBackPtr)(void))
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	27 97       	sbiw	r28, 0x07	; 7
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	8a 83       	std	Y+2, r24	; 0x02
     c8e:	6b 83       	std	Y+3, r22	; 0x03
     c90:	5d 83       	std	Y+5, r21	; 0x05
     c92:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t retStatus = ERROR;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	89 83       	std	Y+1, r24	; 0x01

	/* Disable interrupts */
	disableGlobalInterrupts();
     c98:	0e 94 c4 07 	call	0xf88	; 0xf88 <disableGlobalInterrupts>

	/* Start of initialization */
	switch(exIntID)
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3f 83       	std	Y+7, r19	; 0x07
     ca4:	2e 83       	std	Y+6, r18	; 0x06
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	91 05       	cpc	r25, r1
     cae:	b9 f0       	breq	.+46     	; 0xcde <initExternalInterrupt+0x66>
     cb0:	2e 81       	ldd	r18, Y+6	; 0x06
     cb2:	3f 81       	ldd	r19, Y+7	; 0x07
     cb4:	22 30       	cpi	r18, 0x02	; 2
     cb6:	31 05       	cpc	r19, r1
     cb8:	01 f1       	breq	.+64     	; 0xcfa <initExternalInterrupt+0x82>
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	51 f5       	brne	.+84     	; 0xd16 <initExternalInterrupt+0x9e>
	{
	case INT_0:
	{
		/* Enable interrupt 0 in General Interrupt Control Register -GICR- */
		SET_BIT(GICR, INT0);
     cc2:	ab e5       	ldi	r26, 0x5B	; 91
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	eb e5       	ldi	r30, 0x5B	; 91
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 64       	ori	r24, 0x40	; 64
     cce:	8c 93       	st	X, r24

		/* init call back function pointer */
		INT0_callBackPtr = callBackPtr;
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	90 93 6d 00 	sts	0x006D, r25
     cd8:	80 93 6c 00 	sts	0x006C, r24
     cdc:	1e c0       	rjmp	.+60     	; 0xd1a <initExternalInterrupt+0xa2>
		break;
	}
	case INT_1:
	{
		/* Enable interrupt 1 in General Interrupt Control Register -GICR- */
		SET_BIT(GICR, INT1);
     cde:	ab e5       	ldi	r26, 0x5B	; 91
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	eb e5       	ldi	r30, 0x5B	; 91
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	8c 93       	st	X, r24

		/* init call back function pointer */
		INT1_callBackPtr = callBackPtr;
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	90 93 6f 00 	sts	0x006F, r25
     cf4:	80 93 6e 00 	sts	0x006E, r24
     cf8:	10 c0       	rjmp	.+32     	; 0xd1a <initExternalInterrupt+0xa2>
		break;
	}
	case INT_2:
	{
		/* Enable interrupt 2 in General Interrupt Control Register -GICR- */
		SET_BIT(GICR, INT2);
     cfa:	ab e5       	ldi	r26, 0x5B	; 91
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	eb e5       	ldi	r30, 0x5B	; 91
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 62       	ori	r24, 0x20	; 32
     d06:	8c 93       	st	X, r24

		/* init call back function pointer */
		INT2_callBackPtr = callBackPtr;
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	90 93 71 00 	sts	0x0071, r25
     d10:	80 93 70 00 	sts	0x0070, r24
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <initExternalInterrupt+0xa2>
		break;
	}
	default:
		retStatus = ERROR;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* configure interrupt sensitivity */
	retStatus |= configExternalInterruptSensitivity(exIntID, intSensitivity);
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	6b 81       	ldd	r22, Y+3	; 0x03
     d1e:	0e 94 a1 06 	call	0xd42	; 0xd42 <configExternalInterruptSensitivity>
     d22:	98 2f       	mov	r25, r24
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	89 2b       	or	r24, r25
     d28:	89 83       	std	Y+1, r24	; 0x01

	/* End of initialization */

	/* Enable interrupts */
	enableGlobalInterrupts();
     d2a:	0e 94 d7 07 	call	0xfae	; 0xfae <enableGlobalInterrupts>

	return retStatus;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d30:	27 96       	adiw	r28, 0x07	; 7
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <configExternalInterruptSensitivity>:
 * 			IN: exIntID : the ID of the external interrupt INT_0,INT_1, etc..
 * 			IN: intSensitivity : the type of sensitivity that trigger the interrupt: FALLING_EDGE, RISING_EDGE, etc...
 *
 */
stdReturnType_t configExternalInterruptSensitivity(extIntX_t exIntID, extIntSensitivity_t intSensitivity)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <configExternalInterruptSensitivity+0x6>
     d48:	00 d0       	rcall	.+0      	; 0xd4a <configExternalInterruptSensitivity+0x8>
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	8a 83       	std	Y+2, r24	; 0x02
     d52:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01

	/* Start of initialization */
		switch(exIntID)
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3d 83       	std	Y+5, r19	; 0x05
     d60:	2c 83       	std	Y+4, r18	; 0x04
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	9d 81       	ldd	r25, Y+5	; 0x05
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <configExternalInterruptSensitivity+0x2c>
     d6c:	5a c0       	rjmp	.+180    	; 0xe22 <configExternalInterruptSensitivity+0xe0>
     d6e:	2c 81       	ldd	r18, Y+4	; 0x04
     d70:	3d 81       	ldd	r19, Y+5	; 0x05
     d72:	22 30       	cpi	r18, 0x02	; 2
     d74:	31 05       	cpc	r19, r1
     d76:	09 f4       	brne	.+2      	; 0xd7a <configExternalInterruptSensitivity+0x38>
     d78:	a3 c0       	rjmp	.+326    	; 0xec0 <configExternalInterruptSensitivity+0x17e>
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	09 f0       	breq	.+2      	; 0xd84 <configExternalInterruptSensitivity+0x42>
     d82:	b9 c0       	rjmp	.+370    	; 0xef6 <configExternalInterruptSensitivity+0x1b4>
		{
		case INT_0:
		{
			/* configure interrupt sensitivity */

			if(LOW_LEVEL == intSensitivity)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 23       	and	r24, r24
     d88:	81 f4       	brne	.+32     	; 0xdaa <configExternalInterruptSensitivity+0x68>
			{
				CLR_BIT(MCUCR, ISC01);
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8d 7f       	andi	r24, 0xFD	; 253
     d96:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC00);
     d98:	a5 e5       	ldi	r26, 0x55	; 85
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e5       	ldi	r30, 0x55	; 85
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     da6:	19 82       	std	Y+1, r1	; 0x01
     da8:	a8 c0       	rjmp	.+336    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(ANY_LOGICAL_CHANGE == intSensitivity)
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	81 f4       	brne	.+32     	; 0xdd0 <configExternalInterruptSensitivity+0x8e>
			{
				CLR_BIT(MCUCR, ISC01);
     db0:	a5 e5       	ldi	r26, 0x55	; 85
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e5       	ldi	r30, 0x55	; 85
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC00);
     dbe:	a5 e5       	ldi	r26, 0x55	; 85
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e5       	ldi	r30, 0x55	; 85
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	81 60       	ori	r24, 0x01	; 1
     dca:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     dcc:	19 82       	std	Y+1, r1	; 0x01
     dce:	95 c0       	rjmp	.+298    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(FALLING_EDGE == intSensitivity)
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	81 f4       	brne	.+32     	; 0xdf6 <configExternalInterruptSensitivity+0xb4>
			{
				SET_BIT(MCUCR, ISC01);
     dd6:	a5 e5       	ldi	r26, 0x55	; 85
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e5 e5       	ldi	r30, 0x55	; 85
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC00);
     de4:	a5 e5       	ldi	r26, 0x55	; 85
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e5 e5       	ldi	r30, 0x55	; 85
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8e 7f       	andi	r24, 0xFE	; 254
     df0:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     df2:	19 82       	std	Y+1, r1	; 0x01
     df4:	82 c0       	rjmp	.+260    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(RISING_EDGE == intSensitivity)
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	81 f4       	brne	.+32     	; 0xe1c <configExternalInterruptSensitivity+0xda>
			{
				SET_BIT(MCUCR, ISC01);
     dfc:	a5 e5       	ldi	r26, 0x55	; 85
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e5       	ldi	r30, 0x55	; 85
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	82 60       	ori	r24, 0x02	; 2
     e08:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC00);
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     e18:	19 82       	std	Y+1, r1	; 0x01
     e1a:	6f c0       	rjmp	.+222    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else
			{
				retStatus = ERROR;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	6c c0       	rjmp	.+216    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
		}
		case INT_1:
		{
			/* configure interrupt sensitivity */

			if(LOW_LEVEL == intSensitivity)
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	88 23       	and	r24, r24
     e26:	81 f4       	brne	.+32     	; 0xe48 <configExternalInterruptSensitivity+0x106>
			{
				CLR_BIT(MCUCR, ISC11);
     e28:	a5 e5       	ldi	r26, 0x55	; 85
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e5       	ldi	r30, 0x55	; 85
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC10);
     e36:	a5 e5       	ldi	r26, 0x55	; 85
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e5 e5       	ldi	r30, 0x55	; 85
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8b 7f       	andi	r24, 0xFB	; 251
     e42:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     e44:	19 82       	std	Y+1, r1	; 0x01
     e46:	59 c0       	rjmp	.+178    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(ANY_LOGICAL_CHANGE == intSensitivity)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	81 f4       	brne	.+32     	; 0xe6e <configExternalInterruptSensitivity+0x12c>
			{
				CLR_BIT(MCUCR, ISC11);
     e4e:	a5 e5       	ldi	r26, 0x55	; 85
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e5       	ldi	r30, 0x55	; 85
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	87 7f       	andi	r24, 0xF7	; 247
     e5a:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC10);
     e5c:	a5 e5       	ldi	r26, 0x55	; 85
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e5 e5       	ldi	r30, 0x55	; 85
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	84 60       	ori	r24, 0x04	; 4
     e68:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	46 c0       	rjmp	.+140    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(FALLING_EDGE == intSensitivity)
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	81 f4       	brne	.+32     	; 0xe94 <configExternalInterruptSensitivity+0x152>
			{
				SET_BIT(MCUCR, ISC11);
     e74:	a5 e5       	ldi	r26, 0x55	; 85
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e5 e5       	ldi	r30, 0x55	; 85
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	88 60       	ori	r24, 0x08	; 8
     e80:	8c 93       	st	X, r24
				CLR_BIT(MCUCR, ISC10);
     e82:	a5 e5       	ldi	r26, 0x55	; 85
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e5       	ldi	r30, 0x55	; 85
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8b 7f       	andi	r24, 0xFB	; 251
     e8e:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     e90:	19 82       	std	Y+1, r1	; 0x01
     e92:	33 c0       	rjmp	.+102    	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(RISING_EDGE == intSensitivity)
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	81 f4       	brne	.+32     	; 0xeba <configExternalInterruptSensitivity+0x178>
			{
				SET_BIT(MCUCR, ISC11);
     e9a:	a5 e5       	ldi	r26, 0x55	; 85
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e5       	ldi	r30, 0x55	; 85
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	8c 93       	st	X, r24
				SET_BIT(MCUCR, ISC10);
     ea8:	a5 e5       	ldi	r26, 0x55	; 85
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e5 e5       	ldi	r30, 0x55	; 85
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	84 60       	ori	r24, 0x04	; 4
     eb4:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     eb6:	19 82       	std	Y+1, r1	; 0x01
     eb8:	20 c0       	rjmp	.+64     	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else
			{
				retStatus = ERROR;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	1d c0       	rjmp	.+58     	; 0xefa <configExternalInterruptSensitivity+0x1b8>
		}
		case INT_2:
		{
			/* configure interrupt sensitivity */

			if(FALLING_EDGE == intSensitivity)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	49 f4       	brne	.+18     	; 0xed8 <configExternalInterruptSensitivity+0x196>
			{
				CLR_BIT(MCUCSR, ISC2);
     ec6:	a4 e5       	ldi	r26, 0x54	; 84
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e4 e5       	ldi	r30, 0x54	; 84
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7b       	andi	r24, 0xBF	; 191
     ed2:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     ed4:	19 82       	std	Y+1, r1	; 0x01
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else if(RISING_EDGE == intSensitivity)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	49 f4       	brne	.+18     	; 0xef0 <configExternalInterruptSensitivity+0x1ae>
			{
				SET_BIT(MCUCSR, ISC2);
     ede:	a4 e5       	ldi	r26, 0x54	; 84
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e5       	ldi	r30, 0x54	; 84
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	8c 93       	st	X, r24
				retStatus = SUCCESS;
     eec:	19 82       	std	Y+1, r1	; 0x01
     eee:	05 c0       	rjmp	.+10     	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			else
			{
				retStatus = ERROR;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <configExternalInterruptSensitivity+0x1b8>
			}
			break;
		}
		default:
			retStatus = ERROR;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

	return retStatus;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <disableExternalInterrupt>:
 * params:
 * 			IN: exIntID : the ID of the external interrupt INT_0,INT_1, etc..
 *
 */
stdReturnType_t disableExternalInterrupt(extIntX_t exIntID)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <disableExternalInterrupt+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <disableExternalInterrupt+0x8>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	89 83       	std	Y+1, r24	; 0x01

	switch(exIntID)
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3c 83       	std	Y+4, r19	; 0x04
     f26:	2b 83       	std	Y+3, r18	; 0x03
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	89 f0       	breq	.+34     	; 0xf54 <disableExternalInterrupt+0x48>
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	a1 f0       	breq	.+40     	; 0xf64 <disableExternalInterrupt+0x58>
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	c1 f4       	brne	.+48     	; 0xf74 <disableExternalInterrupt+0x68>
	{
	case INT_0:
	{
		/* Enable interrupt 0 in General Interrupt Control Register -GICR- */
		CLR_BIT(GICR, INT0);
     f44:	ab e5       	ldi	r26, 0x5B	; 91
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	eb e5       	ldi	r30, 0x5B	; 91
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7b       	andi	r24, 0xBF	; 191
     f50:	8c 93       	st	X, r24
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <disableExternalInterrupt+0x6c>
		break;
	}
	case INT_1:
	{
		/* Enable interrupt 1 in General Interrupt Control Register -GICR- */
		CLR_BIT(GICR, INT1);
     f54:	ab e5       	ldi	r26, 0x5B	; 91
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e5       	ldi	r30, 0x5B	; 91
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 77       	andi	r24, 0x7F	; 127
     f60:	8c 93       	st	X, r24
     f62:	0a c0       	rjmp	.+20     	; 0xf78 <disableExternalInterrupt+0x6c>
		break;
	}
	case INT_2:
	{
		/* Enable interrupt 2 in General Interrupt Control Register -GICR- */
		CLR_BIT(GICR, INT2);
     f64:	ab e5       	ldi	r26, 0x5B	; 91
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	eb e5       	ldi	r30, 0x5B	; 91
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8f 7d       	andi	r24, 0xDF	; 223
     f70:	8c 93       	st	X, r24
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <disableExternalInterrupt+0x6c>
		break;
	}
	default:
		retStatus = ERROR;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return retStatus;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <disableGlobalInterrupts>:
 * params:
 * 			None.
 *
 */
stdReturnType_t disableGlobalInterrupts(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	stdReturnType_t retStatus = ERROR;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01

	/* Disable interrupts by clearing global interrupt bit in status register SREG */
	CLR_BIT(SREG, PIN7);
     f96:	af e5       	ldi	r26, 0x5F	; 95
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ef e5       	ldi	r30, 0x5F	; 95
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 77       	andi	r24, 0x7F	; 127
     fa2:	8c 93       	st	X, r24

	return retStatus;
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <enableGlobalInterrupts>:
 * params:
 * 			None.
 *
 */
stdReturnType_t enableGlobalInterrupts(void)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	stdReturnType_t retStatus = ERROR;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01

	/* Enable interrupts by enabling global interrupt bit in status register SREG */
	SET_BIT(SREG, PIN7);
     fbc:	af e5       	ldi	r26, 0x5F	; 95
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ef e5       	ldi	r30, 0x5F	; 95
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	8c 93       	st	X, r24

	return retStatus;
     fca:	89 81       	ldd	r24, Y+1	; 0x01
}
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <WDG_Enable>:
#include "../../LIB/std_types.h"
#include "../../LIB/bit_math.h"
#include "../../LIB/registers.h"
#include "WDG.h"

stdReturnType_t WDG_Enable(TimeConfig_t timeConfiguration) {
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <WDG_Enable+0x6>
     fda:	00 d0       	rcall	.+0      	; 0xfdc <WDG_Enable+0x8>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	8a 83       	std	Y+2, r24	; 0x02

	stdReturnType_t stats = SUCCESS;
     fe2:	19 82       	std	Y+1, r1	; 0x01

	WDTCR &= ~0x07;
     fe4:	a1 e4       	ldi	r26, 0x41	; 65
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e1 e4       	ldi	r30, 0x41	; 65
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 7f       	andi	r24, 0xF8	; 248
     ff0:	8c 93       	st	X, r24
	switch (timeConfiguration) {
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3c 83       	std	Y+4, r19	; 0x04
     ffa:	2b 83       	std	Y+3, r18	; 0x03
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	91 05       	cpc	r25, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <WDG_Enable+0x34>
    1006:	41 c0       	rjmp	.+130    	; 0x108a <WDG_Enable+0xb6>
    1008:	2b 81       	ldd	r18, Y+3	; 0x03
    100a:	3c 81       	ldd	r19, Y+4	; 0x04
    100c:	24 30       	cpi	r18, 0x04	; 4
    100e:	31 05       	cpc	r19, r1
    1010:	7c f4       	brge	.+30     	; 0x1030 <WDG_Enable+0x5c>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	39 f1       	breq	.+78     	; 0x106a <WDG_Enable+0x96>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	54 f5       	brge	.+84     	; 0x107a <WDG_Enable+0xa6>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	b1 f0       	breq	.+44     	; 0x105a <WDG_Enable+0x86>
    102e:	55 c0       	rjmp	.+170    	; 0x10da <WDG_Enable+0x106>
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	3c 81       	ldd	r19, Y+4	; 0x04
    1034:	25 30       	cpi	r18, 0x05	; 5
    1036:	31 05       	cpc	r19, r1
    1038:	c1 f1       	breq	.+112    	; 0x10aa <WDG_Enable+0xd6>
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	91 05       	cpc	r25, r1
    1042:	5c f1       	brlt	.+86     	; 0x109a <WDG_Enable+0xc6>
    1044:	2b 81       	ldd	r18, Y+3	; 0x03
    1046:	3c 81       	ldd	r19, Y+4	; 0x04
    1048:	26 30       	cpi	r18, 0x06	; 6
    104a:	31 05       	cpc	r19, r1
    104c:	b1 f1       	breq	.+108    	; 0x10ba <WDG_Enable+0xe6>
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	87 30       	cpi	r24, 0x07	; 7
    1054:	91 05       	cpc	r25, r1
    1056:	c9 f1       	breq	.+114    	; 0x10ca <WDG_Enable+0xf6>
    1058:	40 c0       	rjmp	.+128    	; 0x10da <WDG_Enable+0x106>
	case TIME_16_3_MS:
		WDTCR |= (1 << 3) | TIME_16_3_MS;
    105a:	a1 e4       	ldi	r26, 0x41	; 65
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e1 e4       	ldi	r30, 0x41	; 65
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	88 60       	ori	r24, 0x08	; 8
    1066:	8c 93       	st	X, r24
    1068:	3a c0       	rjmp	.+116    	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_32_5_MS:
		WDTCR |= (1 << 3) | TIME_32_5_MS;
    106a:	a1 e4       	ldi	r26, 0x41	; 65
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e1 e4       	ldi	r30, 0x41	; 65
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	89 60       	ori	r24, 0x09	; 9
    1076:	8c 93       	st	X, r24
    1078:	32 c0       	rjmp	.+100    	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_65_MS:
		WDTCR |= (1 << 3) | TIME_65_MS;
    107a:	a1 e4       	ldi	r26, 0x41	; 65
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e1 e4       	ldi	r30, 0x41	; 65
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8a 60       	ori	r24, 0x0A	; 10
    1086:	8c 93       	st	X, r24
    1088:	2a c0       	rjmp	.+84     	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_130_MS:
		WDTCR |= (1 << 3) | TIME_130_MS;
    108a:	a1 e4       	ldi	r26, 0x41	; 65
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e1 e4       	ldi	r30, 0x41	; 65
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8b 60       	ori	r24, 0x0B	; 11
    1096:	8c 93       	st	X, r24
    1098:	22 c0       	rjmp	.+68     	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_260_MS:
		WDTCR |= (1 << 3) | TIME_260_MS;
    109a:	a1 e4       	ldi	r26, 0x41	; 65
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e1 e4       	ldi	r30, 0x41	; 65
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8c 60       	ori	r24, 0x0C	; 12
    10a6:	8c 93       	st	X, r24
    10a8:	1a c0       	rjmp	.+52     	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_620_MS:
		WDTCR |= (1 << 3) | TIME_620_MS;
    10aa:	a1 e4       	ldi	r26, 0x41	; 65
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e1 e4       	ldi	r30, 0x41	; 65
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8d 60       	ori	r24, 0x0D	; 13
    10b6:	8c 93       	st	X, r24
    10b8:	12 c0       	rjmp	.+36     	; 0x10de <WDG_Enable+0x10a>
		break;

	case TIME_1000_MS:
		WDTCR |= (1 << 3) | TIME_1000_MS;
    10ba:	a1 e4       	ldi	r26, 0x41	; 65
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e1 e4       	ldi	r30, 0x41	; 65
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8e 60       	ori	r24, 0x0E	; 14
    10c6:	8c 93       	st	X, r24
    10c8:	0a c0       	rjmp	.+20     	; 0x10de <WDG_Enable+0x10a>
		break;
	case TIME_2100_MS:
		WDTCR |= (1 << 3) | TIME_2100_MS;
    10ca:	a1 e4       	ldi	r26, 0x41	; 65
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e1 e4       	ldi	r30, 0x41	; 65
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 60       	ori	r24, 0x0F	; 15
    10d6:	8c 93       	st	X, r24
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <WDG_Enable+0x10a>
		break;
	default:
		stats = ERROR;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return stats;
    10de:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <WDG_Disable>:
stdReturnType_t WDG_Disable(void){
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62

	WDTCR |=(1<<3) | (1<<4);
    10f6:	a1 e4       	ldi	r26, 0x41	; 65
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e4       	ldi	r30, 0x41	; 65
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 61       	ori	r24, 0x18	; 24
    1102:	8c 93       	st	X, r24
	WDTCR =0;
    1104:	e1 e4       	ldi	r30, 0x41	; 65
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	10 82       	st	Z, r1

	return SUCCESS;
    110a:	80 e0       	ldi	r24, 0x00	; 0
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <WDG_Refresh>:
stdReturnType_t WDG_Refresh(TimeConfig_t timeConfiguration){
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <WDG_Refresh+0x6>
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	8a 83       	std	Y+2, r24	; 0x02

	stdReturnType_t stats = SUCCESS;
    1120:	19 82       	std	Y+1, r1	; 0x01
	WDG_Disable();
    1122:	0e 94 77 08 	call	0x10ee	; 0x10ee <WDG_Disable>
	 if (SUCCESS != WDG_Enable(timeConfiguration)){
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <WDG_Enable>
    112c:	88 23       	and	r24, r24
    112e:	19 f0       	breq	.+6      	; 0x1136 <WDG_Refresh+0x24>
		 return ERROR;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	02 c0       	rjmp	.+4      	; 0x113a <WDG_Refresh+0x28>
	 }
	 return stats;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <UART_init>:
static u8 tx_transmit_size = 0;



void UART_init(void)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	/* Data size */
	/* Stop bits */
	/* Mode      */
	UCSRC |= (1<<7) | (1<<2) | (1<<1);
    1150:	a0 e4       	ldi	r26, 0x40	; 64
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e0 e4       	ldi	r30, 0x40	; 64
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	86 68       	ori	r24, 0x86	; 134
    115c:	8c 93       	st	X, r24

	/* Baud rate to 9600 with F_CPU = 16M HZ */
	UBRRH = 0;
    115e:	e0 e4       	ldi	r30, 0x40	; 64
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	10 82       	st	Z, r1
	UBRRL = 103;
    1164:	e9 e2       	ldi	r30, 0x29	; 41
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	87 e6       	ldi	r24, 0x67	; 103
    116a:	80 83       	st	Z, r24

	/* Start transmission and repection */
	UCSRB |= (1<<4) | (1<<3);
    116c:	aa e2       	ldi	r26, 0x2A	; 42
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ea e2       	ldi	r30, 0x2A	; 42
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	88 61       	ori	r24, 0x18	; 24
    1178:	8c 93       	st	X, r24
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <UART_transmitAsynchronous>:


stdReturnType_t UART_transmitAsynchronous(u8 * data, u8 size)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <UART_transmitAsynchronous+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <UART_transmitAsynchronous+0x8>
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	6d 83       	std	Y+5, r22	; 0x05
	stdReturnType_t returnVal = SUCCESS;
    1194:	1a 82       	std	Y+2, r1	; 0x02


	if( (data != NULL) && (size <= TX_BUFFER_SIZE) && (tx_counter == 0) )
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	79 f1       	breq	.+94     	; 0x11fc <UART_transmitAsynchronous+0x7c>
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	85 36       	cpi	r24, 0x65	; 101
    11a2:	60 f5       	brcc	.+88     	; 0x11fc <UART_transmitAsynchronous+0x7c>
    11a4:	80 91 3a 01 	lds	r24, 0x013A
    11a8:	88 23       	and	r24, r24
    11aa:	41 f5       	brne	.+80     	; 0x11fc <UART_transmitAsynchronous+0x7c>
	{
		tx_transmit_size = size;
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	80 93 3c 01 	sts	0x013C, r24

		/* Copy data to local buffer */
		for(u8 i = 0;i < size;i++)
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	13 c0       	rjmp	.+38     	; 0x11dc <UART_transmitAsynchronous+0x5c>
		{
			tx_buffer[i] = data[i];
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	48 2f       	mov	r20, r24
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	fc 01       	movw	r30, r24
    11c8:	e2 0f       	add	r30, r18
    11ca:	f3 1f       	adc	r31, r19
    11cc:	80 81       	ld	r24, Z
    11ce:	fa 01       	movw	r30, r20
    11d0:	ee 58       	subi	r30, 0x8E	; 142
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	80 83       	st	Z, r24
	if( (data != NULL) && (size <= TX_BUFFER_SIZE) && (tx_counter == 0) )
	{
		tx_transmit_size = size;

		/* Copy data to local buffer */
		for(u8 i = 0;i < size;i++)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	99 81       	ldd	r25, Y+1	; 0x01
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	98 17       	cp	r25, r24
    11e2:	48 f3       	brcs	.-46     	; 0x11b6 <UART_transmitAsynchronous+0x36>
		{
			tx_buffer[i] = data[i];
		}

		UDR = tx_buffer[tx_counter];
    11e4:	ac e2       	ldi	r26, 0x2C	; 44
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	80 91 3a 01 	lds	r24, 0x013A
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	ee 58       	subi	r30, 0x8E	; 142
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	8c 93       	st	X, r24
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <UART_transmitAsynchronous+0x80>
	}
	else
	{
		returnVal = ERROR;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	8a 83       	std	Y+2, r24	; 0x02
	}

	return returnVal;
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <UART_recieveAsynchronous>:



stdReturnType_t UART_recieveAsynchronous(u8 * data, u8 * size)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <UART_recieveAsynchronous+0x6>
    1218:	00 d0       	rcall	.+0      	; 0x121a <UART_recieveAsynchronous+0x8>
    121a:	00 d0       	rcall	.+0      	; 0x121c <UART_recieveAsynchronous+0xa>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	7e 83       	std	Y+6, r23	; 0x06
    1226:	6d 83       	std	Y+5, r22	; 0x05
	stdReturnType_t returnVal = SUCCESS;
    1228:	1a 82       	std	Y+2, r1	; 0x02


	if( (data != NULL) && (size != NULL) && (rx_counter > 0) )
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	51 f1       	breq	.+84     	; 0x1286 <UART_recieveAsynchronous+0x74>
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	31 f1       	breq	.+76     	; 0x1286 <UART_recieveAsynchronous+0x74>
    123a:	80 91 3b 01 	lds	r24, 0x013B
    123e:	88 23       	and	r24, r24
    1240:	11 f1       	breq	.+68     	; 0x1286 <UART_recieveAsynchronous+0x74>
	{
		for(u8 i = 0;i < rx_counter;i++)
    1242:	19 82       	std	Y+1, r1	; 0x01
    1244:	13 c0       	rjmp	.+38     	; 0x126c <UART_recieveAsynchronous+0x5a>
		{
			data[i] = rx_buffer[i];
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	dc 01       	movw	r26, r24
    1252:	a2 0f       	add	r26, r18
    1254:	b3 1f       	adc	r27, r19
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	fc 01       	movw	r30, r24
    125e:	ea 52       	subi	r30, 0x2A	; 42
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	8c 93       	st	X, r24
	stdReturnType_t returnVal = SUCCESS;


	if( (data != NULL) && (size != NULL) && (rx_counter > 0) )
	{
		for(u8 i = 0;i < rx_counter;i++)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	90 91 3b 01 	lds	r25, 0x013B
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	89 17       	cp	r24, r25
    1274:	40 f3       	brcs	.-48     	; 0x1246 <UART_recieveAsynchronous+0x34>
		{
			data[i] = rx_buffer[i];
		}

		*size = rx_counter;
    1276:	80 91 3b 01 	lds	r24, 0x013B
    127a:	ed 81       	ldd	r30, Y+5	; 0x05
    127c:	fe 81       	ldd	r31, Y+6	; 0x06
    127e:	80 83       	st	Z, r24
		rx_counter = 0;
    1280:	10 92 3b 01 	sts	0x013B, r1
    1284:	02 c0       	rjmp	.+4      	; 0x128a <UART_recieveAsynchronous+0x78>
	}
	else
	{
		returnVal = ERROR;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	8a 83       	std	Y+2, r24	; 0x02
	}

	return returnVal;
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    128c:	26 96       	adiw	r28, 0x06	; 6
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <UART_transmit>:


stdReturnType_t UART_transmit(u8 * data, u8 size)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <UART_transmit+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <UART_transmit+0x8>
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	8b 83       	std	Y+3, r24	; 0x03
    12b0:	6d 83       	std	Y+5, r22	; 0x05
	stdReturnType_t returnVal = SUCCESS;
    12b2:	1a 82       	std	Y+2, r1	; 0x02


	if(data != NULL)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	f9 f0       	breq	.+62     	; 0x12fa <UART_transmit+0x5c>
	{
		/* Copy data to local buffer */
		for(u8 i = 0;i < size;i++)
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	18 c0       	rjmp	.+48     	; 0x12f0 <UART_transmit+0x52>
		{
			/* Wait until transmission Register Empty */
			while((UCSRA & 0x20) == 0x00);
    12c0:	eb e2       	ldi	r30, 0x2B	; 43
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	80 72       	andi	r24, 0x20	; 32
    12cc:	90 70       	andi	r25, 0x00	; 0
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	b9 f3       	breq	.-18     	; 0x12c0 <UART_transmit+0x22>
			UDR = data[i];
    12d2:	ac e2       	ldi	r26, 0x2C	; 44
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	fc 01       	movw	r30, r24
    12e2:	e2 0f       	add	r30, r18
    12e4:	f3 1f       	adc	r31, r19
    12e6:	80 81       	ld	r24, Z
    12e8:	8c 93       	st	X, r24


	if(data != NULL)
	{
		/* Copy data to local buffer */
		for(u8 i = 0;i < size;i++)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	99 81       	ldd	r25, Y+1	; 0x01
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	98 17       	cp	r25, r24
    12f6:	20 f3       	brcs	.-56     	; 0x12c0 <UART_transmit+0x22>
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <UART_transmit+0x60>
			UDR = data[i];
		}
	}
	else
	{
		returnVal = ERROR;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8a 83       	std	Y+2, r24	; 0x02
	}

	return returnVal;
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <UART_recieve>:


stdReturnType_t UART_recieve(u8 * data)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <UART_recieve+0x6>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	9b 83       	std	Y+3, r25	; 0x03
    131e:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t returnVal = SUCCESS;
    1320:	19 82       	std	Y+1, r1	; 0x01

	if(data != NULL)
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	99 f0       	breq	.+38     	; 0x1350 <UART_recieve+0x40>
	{
		/* Wait until Reception Complete */

		while((UCSRA&0x80) == 0x00);
    132a:	eb e2       	ldi	r30, 0x2B	; 43
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	88 23       	and	r24, r24
    1332:	dc f7       	brge	.-10     	; 0x132a <UART_recieve+0x1a>

		*data = UDR;
    1334:	ec e2       	ldi	r30, 0x2C	; 44
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	ea 81       	ldd	r30, Y+2	; 0x02
    133c:	fb 81       	ldd	r31, Y+3	; 0x03
    133e:	80 83       	st	Z, r24

		/* Clear RX Flag */
		SET_BIT(UCSRA,7);
    1340:	ab e2       	ldi	r26, 0x2B	; 43
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e2       	ldi	r30, 0x2B	; 43
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	80 68       	ori	r24, 0x80	; 128
    134c:	8c 93       	st	X, r24
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <UART_recieve+0x44>
	}
	else
	{
		returnVal = ERROR;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}

	return returnVal;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <UART_TxIntStatus>:


stdReturnType_t UART_TxIntStatus(u8 status)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	89 83       	std	Y+1, r24	; 0x01
	/* Clear TX int enable */
	CLR_BIT(UCSRB,6);
    136e:	aa e2       	ldi	r26, 0x2A	; 42
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ea e2       	ldi	r30, 0x2A	; 42
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8f 7b       	andi	r24, 0xBF	; 191
    137a:	8c 93       	st	X, r24

	/* update TX int enable status */
	UCSRB |= (status<<6);
    137c:	aa e2       	ldi	r26, 0x2A	; 42
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	ea e2       	ldi	r30, 0x2A	; 42
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	28 2f       	mov	r18, r24
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	00 24       	eor	r0, r0
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	07 94       	ror	r0
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	07 94       	ror	r0
    139c:	98 2f       	mov	r25, r24
    139e:	80 2d       	mov	r24, r0
    13a0:	82 2b       	or	r24, r18
    13a2:	8c 93       	st	X, r24

	return SUCCESS;
    13a4:	80 e0       	ldi	r24, 0x00	; 0
}
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <UART_RxIntStatus>:
stdReturnType_t UART_RxIntStatus(u8 status)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	0f 92       	push	r0
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	89 83       	std	Y+1, r24	; 0x01
	/* Clear RX int enable */
	CLR_BIT(UCSRB,7);
    13ba:	aa e2       	ldi	r26, 0x2A	; 42
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ea e2       	ldi	r30, 0x2A	; 42
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 77       	andi	r24, 0x7F	; 127
    13c6:	8c 93       	st	X, r24

	/* update RX int enable status */
	UCSRB |= (status<<7);
    13c8:	aa e2       	ldi	r26, 0x2A	; 42
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ea e2       	ldi	r30, 0x2A	; 42
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	96 95       	lsr	r25
    13dc:	98 2f       	mov	r25, r24
    13de:	88 27       	eor	r24, r24
    13e0:	97 95       	ror	r25
    13e2:	87 95       	ror	r24
    13e4:	82 2b       	or	r24, r18
    13e6:	8c 93       	st	X, r24

	return SUCCESS;
    13e8:	80 e0       	ldi	r24, 0x00	; 0
}
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <__vector_14>:



void __vector_14 (void) __attribute__((signal,used));
void __vector_14 (void)
{
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	8f 93       	push	r24
    13fe:	9f 93       	push	r25
    1400:	af 93       	push	r26
    1402:	bf 93       	push	r27
    1404:	ef 93       	push	r30
    1406:	ff 93       	push	r31
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
	tx_counter++;
    1410:	80 91 3a 01 	lds	r24, 0x013A
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	80 93 3a 01 	sts	0x013A, r24

	if(tx_counter < tx_transmit_size)
    141a:	90 91 3a 01 	lds	r25, 0x013A
    141e:	80 91 3c 01 	lds	r24, 0x013C
    1422:	98 17       	cp	r25, r24
    1424:	60 f4       	brcc	.+24     	; 0x143e <__vector_14+0x4c>
	{
		UDR = tx_buffer[tx_counter];
    1426:	ac e2       	ldi	r26, 0x2C	; 44
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	80 91 3a 01 	lds	r24, 0x013A
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	fc 01       	movw	r30, r24
    1434:	ee 58       	subi	r30, 0x8E	; 142
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	80 81       	ld	r24, Z
    143a:	8c 93       	st	X, r24
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <__vector_14+0x50>
	}
	else
	{
		tx_counter = 0;
    143e:	10 92 3a 01 	sts	0x013A, r1
	}
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_13>:



void __vector_13 (void) __attribute__((signal,used));
void __vector_13 (void)
{
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	2f 93       	push	r18
    1468:	8f 93       	push	r24
    146a:	9f 93       	push	r25
    146c:	ef 93       	push	r30
    146e:	ff 93       	push	r31
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
	if(rx_counter < RX_BUFFER_SIZE)
    1478:	80 91 3b 01 	lds	r24, 0x013B
    147c:	84 36       	cpi	r24, 0x64	; 100
    147e:	80 f4       	brcc	.+32     	; 0x14a0 <__vector_13+0x44>
	{
		rx_buffer[rx_counter] = UDR;
    1480:	80 91 3b 01 	lds	r24, 0x013B
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	ec e2       	ldi	r30, 0x2C	; 44
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	20 81       	ld	r18, Z
    148e:	fc 01       	movw	r30, r24
    1490:	ea 52       	subi	r30, 0x2A	; 42
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	20 83       	st	Z, r18
		rx_counter++;
    1496:	80 91 3b 01 	lds	r24, 0x013B
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 3b 01 	sts	0x013B, r24
	}
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	ff 91       	pop	r31
    14a6:	ef 91       	pop	r30
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	2f 91       	pop	r18
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	0f 90       	pop	r0
    14b4:	1f 90       	pop	r1
    14b6:	18 95       	reti

000014b8 <stub1>:
void (*ovfCallback)(void);
void (*cmCallback)(void);


void stub1(void)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62

}
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <stub2>:

void stub2(void)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62

}
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <TIM0_init>:



void TIM0_init(void)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	ovfCallback = stub1;
    14dc:	8c e5       	ldi	r24, 0x5C	; 92
    14de:	9a e0       	ldi	r25, 0x0A	; 10
    14e0:	90 93 0d 02 	sts	0x020D, r25
    14e4:	80 93 0c 02 	sts	0x020C, r24
	cmCallback = stub2;
    14e8:	83 e6       	ldi	r24, 0x63	; 99
    14ea:	9a e0       	ldi	r25, 0x0A	; 10
    14ec:	90 93 0b 02 	sts	0x020B, r25
    14f0:	80 93 0a 02 	sts	0x020A, r24

	TCNT0 = TIM0_TCNT0_INIT;
    14f4:	e2 e5       	ldi	r30, 0x52	; 82
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	10 82       	st	Z, r1
	OCR0 = TIM0_OCR0_INIT;
    14fa:	ec e5       	ldi	r30, 0x5C	; 92
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8a ef       	ldi	r24, 0xFA	; 250
    1500:	80 83       	st	Z, r24


	if(TIM0_MODE_SELECT == TIM0_NORMAL_MODE)
	{
		CLR_BIT(TCCR0,3);
    1502:	a3 e5       	ldi	r26, 0x53	; 83
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e3 e5       	ldi	r30, 0x53	; 83
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	87 7f       	andi	r24, 0xF7	; 247
    150e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
    1510:	a3 e5       	ldi	r26, 0x53	; 83
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e3 e5       	ldi	r30, 0x53	; 83
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 7b       	andi	r24, 0xBF	; 191
    151c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
		SET_BIT(TCCR0,2);
	}
	else if(TIM0_PRESCALER_SELECT == TIM0_1024_PRESCALER_SELECT)
	{
		SET_BIT(TCCR0,0);
    151e:	a3 e5       	ldi	r26, 0x53	; 83
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e3 e5       	ldi	r30, 0x53	; 83
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	81 60       	ori	r24, 0x01	; 1
    152a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
    152c:	a3 e5       	ldi	r26, 0x53	; 83
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e3 e5       	ldi	r30, 0x53	; 83
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8d 7f       	andi	r24, 0xFD	; 253
    1538:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    153a:	a3 e5       	ldi	r26, 0x53	; 83
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 e5       	ldi	r30, 0x53	; 83
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	84 60       	ori	r24, 0x04	; 4
    1546:	8c 93       	st	X, r24



	if(TIM0_COMPARE_MATCH_MODE_SELECT == TIM0_COMPARE_MATCH_NORMAL_MODE)
	{
		CLR_BIT(TCCR0,4);
    1548:	a3 e5       	ldi	r26, 0x53	; 83
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e3 e5       	ldi	r30, 0x53	; 83
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 7e       	andi	r24, 0xEF	; 239
    1554:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);
    1556:	a3 e5       	ldi	r26, 0x53	; 83
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e3 e5       	ldi	r30, 0x53	; 83
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8f 7d       	andi	r24, 0xDF	; 223
    1562:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR0,4);
		SET_BIT(TCCR0,5);
	}

}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <TIM0_overFlowIntState>:

void TIM0_overFlowIntState(u8 state)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_OVF_INT_ENABLE)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	41 f4       	brne	.+16     	; 0x158c <TIM0_overFlowIntState+0x22>
	{
		SET_BIT(TIMSK,0);
    157c:	a9 e5       	ldi	r26, 0x59	; 89
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e9 e5       	ldi	r30, 0x59	; 89
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	81 60       	ori	r24, 0x01	; 1
    1588:	8c 93       	st	X, r24
    158a:	0a c0       	rjmp	.+20     	; 0x15a0 <TIM0_overFlowIntState+0x36>
	}
	else if(state == TIM0_OVF_INT_DISABLE)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	88 23       	and	r24, r24
    1590:	39 f4       	brne	.+14     	; 0x15a0 <TIM0_overFlowIntState+0x36>
	{
		CLR_BIT(TIMSK,0);
    1592:	a9 e5       	ldi	r26, 0x59	; 89
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e9 e5       	ldi	r30, 0x59	; 89
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8e 7f       	andi	r24, 0xFE	; 254
    159e:	8c 93       	st	X, r24
	}
}
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <TIM0_compareMatchIntState>:

void TIM0_compareMatchIntState(u8 state)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_CM_INT_ENABLE)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	41 f4       	brne	.+16     	; 0x15ca <TIM0_compareMatchIntState+0x22>
	{
		SET_BIT(TIMSK,1);
    15ba:	a9 e5       	ldi	r26, 0x59	; 89
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e9 e5       	ldi	r30, 0x59	; 89
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	82 60       	ori	r24, 0x02	; 2
    15c6:	8c 93       	st	X, r24
    15c8:	0a c0       	rjmp	.+20     	; 0x15de <TIM0_compareMatchIntState+0x36>
	}
	else if(state == TIM0_CM_INT_DISABLE)
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	88 23       	and	r24, r24
    15ce:	39 f4       	brne	.+14     	; 0x15de <TIM0_compareMatchIntState+0x36>
	{
		CLR_BIT(TIMSK,1);
    15d0:	a9 e5       	ldi	r26, 0x59	; 89
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e9 e5       	ldi	r30, 0x59	; 89
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8d 7f       	andi	r24, 0xFD	; 253
    15dc:	8c 93       	st	X, r24
	}
}
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <TIM0_setTCNT0>:

void TIM0_setTCNT0(u8 value)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	0f 92       	push	r0
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    15f2:	e2 e5       	ldi	r30, 0x52	; 82
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	80 83       	st	Z, r24
}
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <TIM0_setOCRO>:

void TIM0_setOCRO(u8 value)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
    160e:	ec e5       	ldi	r30, 0x5C	; 92
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	80 83       	st	Z, r24
}
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <TIM0_forceOutputCompare>:

void TIM0_forceOutputCompare(u8 state)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	0f 92       	push	r0
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_CMO_ENABLE)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	41 f4       	brne	.+16     	; 0x1640 <TIM0_forceOutputCompare+0x22>
	{
		SET_BIT(TCCR0,7);
    1630:	a3 e5       	ldi	r26, 0x53	; 83
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e3 e5       	ldi	r30, 0x53	; 83
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	8c 93       	st	X, r24
    163e:	0a c0       	rjmp	.+20     	; 0x1654 <TIM0_forceOutputCompare+0x36>
	}
	else if(state == TIM0_CMO_DISABLE)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	88 23       	and	r24, r24
    1644:	39 f4       	brne	.+14     	; 0x1654 <TIM0_forceOutputCompare+0x36>
	{
		CLR_BIT(TCCR0,7);
    1646:	a3 e5       	ldi	r26, 0x53	; 83
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e3 e5       	ldi	r30, 0x53	; 83
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 77       	andi	r24, 0x7F	; 127
    1652:	8c 93       	st	X, r24
	}

}
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <TIM0_setOvfIntCallback>:

void TIM0_setOvfIntCallback(void (*callbackPtr)(void))
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <TIM0_setOvfIntCallback+0x6>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
	ovfCallback = callbackPtr;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	90 93 0d 02 	sts	0x020D, r25
    1672:	80 93 0c 02 	sts	0x020C, r24
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <TIM0_setCmIntCallback>:

void TIM0_setCmIntCallback(void (*callbackPtr)(void))
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <TIM0_setCmIntCallback+0x6>
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
	cmCallback = callbackPtr;
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	90 93 0b 02 	sts	0x020B, r25
    1696:	80 93 0a 02 	sts	0x020A, r24
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <SPI_init>:
static u8 rx_counter = 0;
static u8 tx_transmit_size = 0;


stdReturnType_t SPI_init (void)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
   #if(COM_MODE == MASTER_MODE)
	   SET_BIT(SPCR,4);
    16ac:	ad e2       	ldi	r26, 0x2D	; 45
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ed e2       	ldi	r30, 0x2D	; 45
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	80 61       	ori	r24, 0x10	; 16
    16b8:	8c 93       	st	X, r24
   #elif(COM_MODE == SLAVE_MODE)
	   CLR_BIT(SPCR,4);
   #endif

   #if(DATA_ORDER == MSB_FIRST)
	   CLR_BIT(SPCR,5);
    16ba:	ad e2       	ldi	r26, 0x2D	; 45
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ed e2       	ldi	r30, 0x2D	; 45
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 7d       	andi	r24, 0xDF	; 223
    16c6:	8c 93       	st	X, r24

   #if(SPI_MODE == SPI_MODE_0)
	   CLR_BIT(SPCR,2);
	   CLR_BIT(SPCR,3);
   #elif(SPI_MODE == SPI_MODE_1)
	   SET_BIT(SPCR,2);
    16c8:	ad e2       	ldi	r26, 0x2D	; 45
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ed e2       	ldi	r30, 0x2D	; 45
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	84 60       	ori	r24, 0x04	; 4
    16d4:	8c 93       	st	X, r24
	   CLR_BIT(SPCR,3);
    16d6:	ad e2       	ldi	r26, 0x2D	; 45
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ed e2       	ldi	r30, 0x2D	; 45
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	87 7f       	andi	r24, 0xF7	; 247
    16e2:	8c 93       	st	X, r24
	   CLR_BIT(SPCR,1);
   #elif(SPI_BAUD_RATE == SPI_BAUD_RATE_64)
	   CLR_BIT(SPCR,0);
	   SET_BIT(SPCR,1);
   #elif(SPI_BAUD_RATE == SPI_BAUD_RATE_128)
	   SET_BIT(SPCR,0);
    16e4:	ad e2       	ldi	r26, 0x2D	; 45
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	ed e2       	ldi	r30, 0x2D	; 45
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	81 60       	ori	r24, 0x01	; 1
    16f0:	8c 93       	st	X, r24
	   SET_BIT(SPCR,1);
    16f2:	ad e2       	ldi	r26, 0x2D	; 45
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ed e2       	ldi	r30, 0x2D	; 45
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	82 60       	ori	r24, 0x02	; 2
    16fe:	8c 93       	st	X, r24
   #endif

	/* Enable SPI */
	SET_BIT(SPCR,6);
    1700:	ad e2       	ldi	r26, 0x2D	; 45
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	ed e2       	ldi	r30, 0x2D	; 45
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	80 64       	ori	r24, 0x40	; 64
    170c:	8c 93       	st	X, r24

	return SUCCESS;
    170e:	80 e0       	ldi	r24, 0x00	; 0
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <SPI_transmit>:


stdReturnType_t SPI_transmit (u8 data)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <SPI_transmit+0x6>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retState = SUCCESS;
    1722:	19 82       	std	Y+1, r1	; 0x01

	SPDR = data;
    1724:	ef e2       	ldi	r30, 0x2F	; 47
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	80 83       	st	Z, r24

	while(GET_BIT(SPSR,7) == 0);
    172c:	ee e2       	ldi	r30, 0x2E	; 46
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	88 23       	and	r24, r24
    1734:	dc f7       	brge	.-10     	; 0x172c <SPI_transmit+0x16>

	return retState;
    1736:	89 81       	ldd	r24, Y+1	; 0x01
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <SPI_recieve>:

stdReturnType_t SPI_recieve (u8 *data)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <SPI_recieve+0x6>
    1748:	0f 92       	push	r0
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	9b 83       	std	Y+3, r25	; 0x03
    1750:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retState = SUCCESS;
    1752:	19 82       	std	Y+1, r1	; 0x01

	while(GET_BIT(SPSR,7) == 0);
    1754:	ee e2       	ldi	r30, 0x2E	; 46
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	88 23       	and	r24, r24
    175c:	dc f7       	brge	.-10     	; 0x1754 <SPI_recieve+0x12>

	*data = SPDR;
    175e:	ef e2       	ldi	r30, 0x2F	; 47
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	ea 81       	ldd	r30, Y+2	; 0x02
    1766:	fb 81       	ldd	r31, Y+3	; 0x03
    1768:	80 83       	st	Z, r24

	return retState;
    176a:	89 81       	ldd	r24, Y+1	; 0x01
}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <SPI_transmitAsynchronous>:


extern stdReturnType_t SPI_transmitAsynchronous(u8 * data, u8 size)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <SPI_transmitAsynchronous+0x6>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <SPI_transmitAsynchronous+0x8>
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
    178a:	6d 83       	std	Y+5, r22	; 0x05
	stdReturnType_t returnVal = SUCCESS;
    178c:	1a 82       	std	Y+2, r1	; 0x02


	if( (data != NULL) && (size <= SPI_TX_BUFFER_SIZE) && (tx_counter == 0) )
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	79 f1       	breq	.+94     	; 0x17f4 <SPI_transmitAsynchronous+0x7c>
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	85 36       	cpi	r24, 0x65	; 101
    179a:	60 f5       	brcc	.+88     	; 0x17f4 <SPI_transmitAsynchronous+0x7c>
    179c:	80 91 05 02 	lds	r24, 0x0205
    17a0:	88 23       	and	r24, r24
    17a2:	41 f5       	brne	.+80     	; 0x17f4 <SPI_transmitAsynchronous+0x7c>
	{
		tx_transmit_size = size;
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	80 93 07 02 	sts	0x0207, r24

		/* Copy data to local buffer */
		for(u8 i = 0;i < size;i++)
    17aa:	19 82       	std	Y+1, r1	; 0x01
    17ac:	13 c0       	rjmp	.+38     	; 0x17d4 <SPI_transmitAsynchronous+0x5c>
		{
			tx_buffer[i] = data[i];
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	48 2f       	mov	r20, r24
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	fc 01       	movw	r30, r24
    17c0:	e2 0f       	add	r30, r18
    17c2:	f3 1f       	adc	r31, r19
    17c4:	80 81       	ld	r24, Z
    17c6:	fa 01       	movw	r30, r20
    17c8:	e3 5c       	subi	r30, 0xC3	; 195
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
    17cc:	80 83       	st	Z, r24
	if( (data != NULL) && (size <= SPI_TX_BUFFER_SIZE) && (tx_counter == 0) )
	{
		tx_transmit_size = size;

		/* Copy data to local buffer */
		for(u8 i = 0;i < size;i++)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	99 81       	ldd	r25, Y+1	; 0x01
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	98 17       	cp	r25, r24
    17da:	48 f3       	brcs	.-46     	; 0x17ae <SPI_transmitAsynchronous+0x36>
		{
			tx_buffer[i] = data[i];
		}

		SPDR = tx_buffer[tx_counter];
    17dc:	af e2       	ldi	r26, 0x2F	; 47
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	80 91 05 02 	lds	r24, 0x0205
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	fc 01       	movw	r30, r24
    17ea:	e3 5c       	subi	r30, 0xC3	; 195
    17ec:	fe 4f       	sbci	r31, 0xFE	; 254
    17ee:	80 81       	ld	r24, Z
    17f0:	8c 93       	st	X, r24
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <SPI_transmitAsynchronous+0x80>
	}
	else
	{
		returnVal = ERROR;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8a 83       	std	Y+2, r24	; 0x02
	}

	return returnVal;
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <SPI_recieveAsynchronous>:


stdReturnType_t SPI_recieveAsynchronous(u8 * data, u8 * size)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <SPI_recieveAsynchronous+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <SPI_recieveAsynchronous+0x8>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <SPI_recieveAsynchronous+0xa>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	7e 83       	std	Y+6, r23	; 0x06
    181e:	6d 83       	std	Y+5, r22	; 0x05
	stdReturnType_t returnVal = SUCCESS;
    1820:	1a 82       	std	Y+2, r1	; 0x02


	if( (data != NULL) && (size != NULL) && (rx_counter > 0) )
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	51 f1       	breq	.+84     	; 0x187e <SPI_recieveAsynchronous+0x74>
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	31 f1       	breq	.+76     	; 0x187e <SPI_recieveAsynchronous+0x74>
    1832:	80 91 06 02 	lds	r24, 0x0206
    1836:	88 23       	and	r24, r24
    1838:	11 f1       	breq	.+68     	; 0x187e <SPI_recieveAsynchronous+0x74>
	{
		for(u8 i = 0;i < rx_counter;i++)
    183a:	19 82       	std	Y+1, r1	; 0x01
    183c:	13 c0       	rjmp	.+38     	; 0x1864 <SPI_recieveAsynchronous+0x5a>
		{
			data[i] = rx_buffer[i];
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	dc 01       	movw	r26, r24
    184a:	a2 0f       	add	r26, r18
    184c:	b3 1f       	adc	r27, r19
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	ef 55       	subi	r30, 0x5F	; 95
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	80 81       	ld	r24, Z
    185c:	8c 93       	st	X, r24
	stdReturnType_t returnVal = SUCCESS;


	if( (data != NULL) && (size != NULL) && (rx_counter > 0) )
	{
		for(u8 i = 0;i < rx_counter;i++)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	90 91 06 02 	lds	r25, 0x0206
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	89 17       	cp	r24, r25
    186c:	40 f3       	brcs	.-48     	; 0x183e <SPI_recieveAsynchronous+0x34>
		{
			data[i] = rx_buffer[i];
		}

		*size = rx_counter;
    186e:	80 91 06 02 	lds	r24, 0x0206
    1872:	ed 81       	ldd	r30, Y+5	; 0x05
    1874:	fe 81       	ldd	r31, Y+6	; 0x06
    1876:	80 83       	st	Z, r24
		rx_counter = 0;
    1878:	10 92 06 02 	sts	0x0206, r1
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <SPI_recieveAsynchronous+0x78>
	}
	else
	{
		returnVal = ERROR;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	8a 83       	std	Y+2, r24	; 0x02
	}

	return returnVal;
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1884:	26 96       	adiw	r28, 0x06	; 6
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <SPI_TransferIntStatus>:


extern stdReturnType_t SPI_TransferIntStatus(u8 status)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
	/* Clear TX int enable */
	CLR_BIT(SPCR,7);
    18a2:	ad e2       	ldi	r26, 0x2D	; 45
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ed e2       	ldi	r30, 0x2D	; 45
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 77       	andi	r24, 0x7F	; 127
    18ae:	8c 93       	st	X, r24

	/* update TX int enable status */
	SPCR |= (status<<7);
    18b0:	ad e2       	ldi	r26, 0x2D	; 45
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ed e2       	ldi	r30, 0x2D	; 45
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	28 2f       	mov	r18, r24
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	96 95       	lsr	r25
    18c4:	98 2f       	mov	r25, r24
    18c6:	88 27       	eor	r24, r24
    18c8:	97 95       	ror	r25
    18ca:	87 95       	ror	r24
    18cc:	82 2b       	or	r24, r18
    18ce:	8c 93       	st	X, r24

	return SUCCESS;
    18d0:	80 e0       	ldi	r24, 0x00	; 0
}
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <__vector_12>:



void __vector_12 (void) __attribute__((signal,used));
void __vector_12 (void)
{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	2f 93       	push	r18
    18e6:	8f 93       	push	r24
    18e8:	9f 93       	push	r25
    18ea:	af 93       	push	r26
    18ec:	bf 93       	push	r27
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
	tx_counter++;
    18fa:	80 91 05 02 	lds	r24, 0x0205
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	80 93 05 02 	sts	0x0205, r24

	/* Save recieved byte */
	if(rx_counter < SPI_TX_BUFFER_SIZE)
    1904:	80 91 06 02 	lds	r24, 0x0206
    1908:	84 36       	cpi	r24, 0x64	; 100
    190a:	80 f4       	brcc	.+32     	; 0x192c <__vector_12+0x52>
	{
		rx_buffer[rx_counter] = SPDR;
    190c:	80 91 06 02 	lds	r24, 0x0206
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	ef e2       	ldi	r30, 0x2F	; 47
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	20 81       	ld	r18, Z
    191a:	fc 01       	movw	r30, r24
    191c:	ef 55       	subi	r30, 0x5F	; 95
    191e:	fe 4f       	sbci	r31, 0xFE	; 254
    1920:	20 83       	st	Z, r18
		rx_counter++;
    1922:	80 91 06 02 	lds	r24, 0x0206
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 93 06 02 	sts	0x0206, r24
	}

	if( (tx_counter < tx_transmit_size) && (tx_transmit_size > 0) )
    192c:	90 91 05 02 	lds	r25, 0x0205
    1930:	80 91 07 02 	lds	r24, 0x0207
    1934:	98 17       	cp	r25, r24
    1936:	80 f4       	brcc	.+32     	; 0x1958 <__vector_12+0x7e>
    1938:	80 91 07 02 	lds	r24, 0x0207
    193c:	88 23       	and	r24, r24
    193e:	61 f0       	breq	.+24     	; 0x1958 <__vector_12+0x7e>
	{
		SPDR = tx_buffer[tx_counter];
    1940:	af e2       	ldi	r26, 0x2F	; 47
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	80 91 05 02 	lds	r24, 0x0205
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	fc 01       	movw	r30, r24
    194e:	e3 5c       	subi	r30, 0xC3	; 195
    1950:	fe 4f       	sbci	r31, 0xFE	; 254
    1952:	80 81       	ld	r24, Z
    1954:	8c 93       	st	X, r24
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <__vector_12+0x86>
	}
	else
	{
		tx_counter = 0;
    1958:	10 92 05 02 	sts	0x0205, r1
		tx_transmit_size = 0;
    195c:	10 92 07 02 	sts	0x0207, r1
	}
}
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	2f 91       	pop	r18
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <ICU_init>:
void (*ICU_CALLBACK_FUNC) (void);



extern void ICU_init(void)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	/* All configurations are done in TIMER 1 */
	/* TIMER 1 should be configured to start the timer */
	/* When the capture event happens the ICU return captured timer value */
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <ICU_getTimerCaptureVal>:

extern stdReturnType_t ICU_getTimerCaptureVal(u16 * data)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <ICU_getTimerCaptureVal+0x6>
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
	*data = ((u16)ICR1H<<8)| ((u16)ICR1L);
    1998:	e7 e4       	ldi	r30, 0x47	; 71
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	38 2f       	mov	r19, r24
    19a4:	22 27       	eor	r18, r18
    19a6:	e8 e4       	ldi	r30, 0x48	; 72
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	82 2b       	or	r24, r18
    19b2:	93 2b       	or	r25, r19
    19b4:	e9 81       	ldd	r30, Y+1	; 0x01
    19b6:	fa 81       	ldd	r31, Y+2	; 0x02
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
	return SUCCESS;
    19bc:	80 e0       	ldi	r24, 0x00	; 0
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <ICU_isCaptureUpdated>:

extern stdReturnType_t ICU_isCaptureUpdated(u8 * status)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <ICU_isCaptureUpdated+0x6>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
	*status = GET_BIT(TIFR,5);
    19d6:	e8 e5       	ldi	r30, 0x58	; 88
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	82 95       	swap	r24
    19de:	86 95       	lsr	r24
    19e0:	87 70       	andi	r24, 0x07	; 7
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	e9 81       	ldd	r30, Y+1	; 0x01
    19e6:	fa 81       	ldd	r31, Y+2	; 0x02
    19e8:	80 83       	st	Z, r24

	return SUCCESS;
    19ea:	80 e0       	ldi	r24, 0x00	; 0
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <ICU_clearCaptureIntFlag>:
extern stdReturnType_t ICU_clearCaptureIntFlag(void)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	/* clear interrupt flag */
	SET_BIT(TIFR,5);
    19fe:	a8 e5       	ldi	r26, 0x58	; 88
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e8 e5       	ldi	r30, 0x58	; 88
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 62       	ori	r24, 0x20	; 32
    1a0a:	8c 93       	st	X, r24

	return SUCCESS;
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <ICU_captureIntStatus>:

extern stdReturnType_t ICU_captureIntStatus(u8 status)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	/* Clear interrupt enable */
	CLR_BIT(TIMSK,5);
    1a20:	a9 e5       	ldi	r26, 0x59	; 89
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e9 e5       	ldi	r30, 0x59	; 89
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 7d       	andi	r24, 0xDF	; 223
    1a2c:	8c 93       	st	X, r24
	/* update interrupt status */
	TIMSK |= (status<<5);
    1a2e:	a9 e5       	ldi	r26, 0x59	; 89
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e9 e5       	ldi	r30, 0x59	; 89
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	28 2f       	mov	r18, r24
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	82 95       	swap	r24
    1a46:	92 95       	swap	r25
    1a48:	90 7f       	andi	r25, 0xF0	; 240
    1a4a:	98 27       	eor	r25, r24
    1a4c:	80 7f       	andi	r24, 0xF0	; 240
    1a4e:	98 27       	eor	r25, r24
    1a50:	82 2b       	or	r24, r18
    1a52:	8c 93       	st	X, r24

	return SUCCESS;
    1a54:	80 e0       	ldi	r24, 0x00	; 0
}
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <ICU_setEdgeTrigger>:

extern stdReturnType_t ICU_setEdgeTrigger(EdgeTrigger_t edge)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
	/* Clear edge trigger */
	CLR_BIT(TCCR1B,6);
    1a6a:	ae e4       	ldi	r26, 0x4E	; 78
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	ee e4       	ldi	r30, 0x4E	; 78
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	8f 7b       	andi	r24, 0xBF	; 191
    1a76:	8c 93       	st	X, r24
	/* update edge trigger status */
	TCCR1B |= (edge<<6);
    1a78:	ae e4       	ldi	r26, 0x4E	; 78
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	ee e4       	ldi	r30, 0x4E	; 78
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	28 2f       	mov	r18, r24
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	00 24       	eor	r0, r0
    1a8c:	96 95       	lsr	r25
    1a8e:	87 95       	ror	r24
    1a90:	07 94       	ror	r0
    1a92:	96 95       	lsr	r25
    1a94:	87 95       	ror	r24
    1a96:	07 94       	ror	r0
    1a98:	98 2f       	mov	r25, r24
    1a9a:	80 2d       	mov	r24, r0
    1a9c:	82 2b       	or	r24, r18
    1a9e:	8c 93       	st	X, r24
	/* clear interrupt flag */
	SET_BIT(TIFR,5);
    1aa0:	a8 e5       	ldi	r26, 0x58	; 88
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e8 e5       	ldi	r30, 0x58	; 88
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	80 62       	ori	r24, 0x20	; 32
    1aac:	8c 93       	st	X, r24

	return SUCCESS;
    1aae:	80 e0       	ldi	r24, 0x00	; 0
}
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <ICU_setCallBack>:

extern void ICU_setCallBack(void (*ptrCpy) (void))
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <ICU_setCallBack+0x6>
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
  ICU_CALLBACK_FUNC = ptrCpy;
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	90 93 0f 02 	sts	0x020F, r25
    1ace:	80 93 0e 02 	sts	0x020E, r24
}
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <__vector_6>:



void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	2f 93       	push	r18
    1ae8:	3f 93       	push	r19
    1aea:	4f 93       	push	r20
    1aec:	5f 93       	push	r21
    1aee:	6f 93       	push	r22
    1af0:	7f 93       	push	r23
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	af 93       	push	r26
    1af8:	bf 93       	push	r27
    1afa:	ef 93       	push	r30
    1afc:	ff 93       	push	r31
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
	ICU_CALLBACK_FUNC();
    1b06:	e0 91 0e 02 	lds	r30, 0x020E
    1b0a:	f0 91 0f 02 	lds	r31, 0x020F
    1b0e:	09 95       	icall
}
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	ff 91       	pop	r31
    1b16:	ef 91       	pop	r30
    1b18:	bf 91       	pop	r27
    1b1a:	af 91       	pop	r26
    1b1c:	9f 91       	pop	r25
    1b1e:	8f 91       	pop	r24
    1b20:	7f 91       	pop	r23
    1b22:	6f 91       	pop	r22
    1b24:	5f 91       	pop	r21
    1b26:	4f 91       	pop	r20
    1b28:	3f 91       	pop	r19
    1b2a:	2f 91       	pop	r18
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <TWI_Init>:
#include <avr/io.h>
#include "I2C.h"
#include "I2C_cfg.h"

void TWI_Init(void)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	// TWI initialization
	// Bit Rate: 400.000 kHz
	TWBR = 72;
    1b3e:	e0 e2       	ldi	r30, 0x20	; 32
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	88 e4       	ldi	r24, 0x48	; 72
    1b44:	80 83       	st	Z, r24
	// Two Wire Bus Slave Address: 0x1
	// General Call Recognition: Off
	TWAR = (TWI_MASTER_ADDRESS<<1);
    1b46:	e2 e2       	ldi	r30, 0x22	; 34
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	80 83       	st	Z, r24
	// Generate Acknowledge Pulse: On
	// TWI Interrupt: Off
	TWCR = 0x44;
    1b4e:	e6 e5       	ldi	r30, 0x56	; 86
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	84 e4       	ldi	r24, 0x44	; 68
    1b54:	80 83       	st	Z, r24
	TWSR = 0x00;
    1b56:	e1 e2       	ldi	r30, 0x21	; 33
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	10 82       	st	Z, r1
	TWSR &= (~((1 << TWPS1) | (1 << TWPS0)));
    1b5c:	a1 e2       	ldi	r26, 0x21	; 33
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e1 e2       	ldi	r30, 0x21	; 33
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8c 7f       	andi	r24, 0xFC	; 252
    1b68:	8c 93       	st	X, r24
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <TWI_Start>:

void TWI_Start(void)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	// Send Start Condition
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1b78:	a6 e5       	ldi	r26, 0x56	; 86
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e6 e5       	ldi	r30, 0x56	; 86
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	84 6a       	ori	r24, 0xA4	; 164
    1b84:	8c 93       	st	X, r24

	// Wait for TWINT flag set in TWCR Register
	while (!(TWCR & (1 << TWINT)));
    1b86:	e6 e5       	ldi	r30, 0x56	; 86
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	88 23       	and	r24, r24
    1b8e:	dc f7       	brge	.-10     	; 0x1b86 <TWI_Start+0x16>

}
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <TWI_Stop>:

void TWI_Stop(void)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
	// Send Stop Condition
	TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    1b9e:	a6 e5       	ldi	r26, 0x56	; 86
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e6 e5       	ldi	r30, 0x56	; 86
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	84 69       	ori	r24, 0x94	; 148
    1baa:	8c 93       	st	X, r24
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <TWI_Write>:

void TWI_Write(u8 data)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	0f 92       	push	r0
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	89 83       	std	Y+1, r24	; 0x01
	// Put data On TWI Register

	TWDR = data;
    1bbe:	e3 e2       	ldi	r30, 0x23	; 35
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	80 83       	st	Z, r24
	// Send Data
	TWCR = (TWCR & ~(1<<TWSTA)) | (1 << TWINT) | (1 << TWEN);
    1bc6:	a6 e5       	ldi	r26, 0x56	; 86
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e6 e5       	ldi	r30, 0x56	; 86
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8b 75       	andi	r24, 0x5B	; 91
    1bd2:	84 68       	ori	r24, 0x84	; 132
    1bd4:	8c 93       	st	X, r24
	// Wait for TWINT flag set in TWCR Register
	while (!(TWCR & (1 << TWINT)));
    1bd6:	e6 e5       	ldi	r30, 0x56	; 86
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 23       	and	r24, r24
    1bde:	dc f7       	brge	.-10     	; 0x1bd6 <TWI_Write+0x24>
}
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <TWI_ReadACK>:

u8 TWI_ReadACK(void)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);    //enable Ack
    1bf0:	e6 e5       	ldi	r30, 0x56	; 86
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	84 ec       	ldi	r24, 0xC4	; 196
    1bf6:	80 83       	st	Z, r24
	// Wait for TWINT flag set in TWCR Register
	while (!(TWCR & (1 << TWINT)));
    1bf8:	e6 e5       	ldi	r30, 0x56	; 86
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	88 23       	and	r24, r24
    1c00:	dc f7       	brge	.-10     	; 0x1bf8 <TWI_ReadACK+0x10>
	// Read Data
	return TWDR;
    1c02:	e3 e2       	ldi	r30, 0x23	; 35
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <TWI_ReadNACK>:

u8 TWI_ReadNACK(void)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    1c16:	e6 e5       	ldi	r30, 0x56	; 86
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	84 e8       	ldi	r24, 0x84	; 132
    1c1c:	80 83       	st	Z, r24
	// Wait for TWINT flag set in TWCR Register
	while (!(TWCR & (1 << TWINT)));
    1c1e:	e6 e5       	ldi	r30, 0x56	; 86
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	88 23       	and	r24, r24
    1c26:	dc f7       	brge	.-10     	; 0x1c1e <TWI_ReadNACK+0x10>
	// Read Data
	return TWDR;
    1c28:	e3 e2       	ldi	r30, 0x23	; 35
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <TWI_GetStatus>:

u8 TWI_GetStatus(void)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
	u8 status;
	status = TWSR & 0xF8;
    1c3e:	e1 e2       	ldi	r30, 0x21	; 33
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	88 7f       	andi	r24, 0xF8	; 248
    1c46:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <DIO_init>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			IN: direction : the direction of the pin INPUT/OUTPUT.
 */
stdReturnType_t DIO_init(portX_t PortName, pinX_t pinNum, pinDir_t direction)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <DIO_init+0x6>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <DIO_init+0x8>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <DIO_init+0xa>
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    1c62:	6b 83       	std	Y+3, r22	; 0x03
    1c64:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO: Validation of input */

	switch(PortName)
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	3e 83       	std	Y+6, r19	; 0x06
    1c72:	2d 83       	std	Y+5, r18	; 0x05
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <DIO_init+0x2e>
    1c7e:	4b c0       	rjmp	.+150    	; 0x1d16 <DIO_init+0xc4>
    1c80:	2d 81       	ldd	r18, Y+5	; 0x05
    1c82:	3e 81       	ldd	r19, Y+6	; 0x06
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <DIO_init+0x42>
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	71 f0       	breq	.+28     	; 0x1cae <DIO_init+0x5c>
    1c92:	dd c0       	rjmp	.+442    	; 0x1e4e <DIO_init+0x1fc>
    1c94:	2d 81       	ldd	r18, Y+5	; 0x05
    1c96:	3e 81       	ldd	r19, Y+6	; 0x06
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <DIO_init+0x4e>
    1c9e:	a3 c0       	rjmp	.+326    	; 0x1de6 <DIO_init+0x194>
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <DIO_init+0x5a>
    1caa:	69 c0       	rjmp	.+210    	; 0x1d7e <DIO_init+0x12c>
    1cac:	d0 c0       	rjmp	.+416    	; 0x1e4e <DIO_init+0x1fc>
	{
		case PORT_A:
			if(INPUT == direction)
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	88 23       	and	r24, r24
    1cb2:	b1 f4       	brne	.+44     	; 0x1ce0 <DIO_init+0x8e>
			{
				CLR_BIT(DDRA, pinNum);
    1cb4:	aa e3       	ldi	r26, 0x3A	; 58
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	ea e3       	ldi	r30, 0x3A	; 58
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_init+0x80>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_init+0x7c>
    1cd6:	80 95       	com	r24
    1cd8:	84 23       	and	r24, r20
    1cda:	8c 93       	st	X, r24
				status = SUCCESS;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
    1cde:	b9 c0       	rjmp	.+370    	; 0x1e52 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	a9 f4       	brne	.+42     	; 0x1d10 <DIO_init+0xbe>
			{
				SET_BIT(DDRA, pinNum);
    1ce6:	aa e3       	ldi	r26, 0x3A	; 58
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	ea e3       	ldi	r30, 0x3A	; 58
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_init+0xb2>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_init+0xae>
    1d08:	84 2b       	or	r24, r20
    1d0a:	8c 93       	st	X, r24
				status = SUCCESS;
    1d0c:	19 82       	std	Y+1, r1	; 0x01
    1d0e:	a1 c0       	rjmp	.+322    	; 0x1e52 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	9e c0       	rjmp	.+316    	; 0x1e52 <DIO_init+0x200>
			}
			break;

		case PORT_B:
			if(INPUT == direction)
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	88 23       	and	r24, r24
    1d1a:	b1 f4       	brne	.+44     	; 0x1d48 <DIO_init+0xf6>
			{
				CLR_BIT(DDRB, pinNum);
    1d1c:	a7 e3       	ldi	r26, 0x37	; 55
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e7 e3       	ldi	r30, 0x37	; 55
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	48 2f       	mov	r20, r24
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 2e       	mov	r0, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <DIO_init+0xe8>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <DIO_init+0xe4>
    1d3e:	80 95       	com	r24
    1d40:	84 23       	and	r24, r20
    1d42:	8c 93       	st	X, r24
				status = SUCCESS;
    1d44:	19 82       	std	Y+1, r1	; 0x01
    1d46:	85 c0       	rjmp	.+266    	; 0x1e52 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	a9 f4       	brne	.+42     	; 0x1d78 <DIO_init+0x126>
			{
				SET_BIT(DDRB, pinNum);
    1d4e:	a7 e3       	ldi	r26, 0x37	; 55
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e7 e3       	ldi	r30, 0x37	; 55
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_init+0x11a>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_init+0x116>
    1d70:	84 2b       	or	r24, r20
    1d72:	8c 93       	st	X, r24
				status = SUCCESS;
    1d74:	19 82       	std	Y+1, r1	; 0x01
    1d76:	6d c0       	rjmp	.+218    	; 0x1e52 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	6a c0       	rjmp	.+212    	; 0x1e52 <DIO_init+0x200>
			}
			break;

		case PORT_C:
			if(INPUT == direction)
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	88 23       	and	r24, r24
    1d82:	b1 f4       	brne	.+44     	; 0x1db0 <DIO_init+0x15e>
			{
				CLR_BIT(DDRC, pinNum);
    1d84:	a4 e3       	ldi	r26, 0x34	; 52
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e4 e3       	ldi	r30, 0x34	; 52
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 2e       	mov	r0, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_init+0x150>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	0a 94       	dec	r0
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <DIO_init+0x14c>
    1da6:	80 95       	com	r24
    1da8:	84 23       	and	r24, r20
    1daa:	8c 93       	st	X, r24
				status = SUCCESS;
    1dac:	19 82       	std	Y+1, r1	; 0x01
    1dae:	51 c0       	rjmp	.+162    	; 0x1e52 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	a9 f4       	brne	.+42     	; 0x1de0 <DIO_init+0x18e>
			{
				SET_BIT(DDRC, pinNum);
    1db6:	a4 e3       	ldi	r26, 0x34	; 52
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e4 e3       	ldi	r30, 0x34	; 52
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	48 2f       	mov	r20, r24
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	02 2e       	mov	r0, r18
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <DIO_init+0x182>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	0a 94       	dec	r0
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <DIO_init+0x17e>
    1dd8:	84 2b       	or	r24, r20
    1dda:	8c 93       	st	X, r24
				status = SUCCESS;
    1ddc:	19 82       	std	Y+1, r1	; 0x01
    1dde:	39 c0       	rjmp	.+114    	; 0x1e52 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	36 c0       	rjmp	.+108    	; 0x1e52 <DIO_init+0x200>
			}
			break;

		case PORT_D:
			if(INPUT == direction)
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	88 23       	and	r24, r24
    1dea:	b1 f4       	brne	.+44     	; 0x1e18 <DIO_init+0x1c6>
			{
				CLR_BIT(DDRD, pinNum);
    1dec:	a1 e3       	ldi	r26, 0x31	; 49
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e1 e3       	ldi	r30, 0x31	; 49
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <DIO_init+0x1b8>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <DIO_init+0x1b4>
    1e0e:	80 95       	com	r24
    1e10:	84 23       	and	r24, r20
    1e12:	8c 93       	st	X, r24
				status = SUCCESS;
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	1d c0       	rjmp	.+58     	; 0x1e52 <DIO_init+0x200>
			}
			else if (OUTPUT == direction)
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	a9 f4       	brne	.+42     	; 0x1e48 <DIO_init+0x1f6>
			{
				SET_BIT(DDRD, pinNum);
    1e1e:	a1 e3       	ldi	r26, 0x31	; 49
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e1 e3       	ldi	r30, 0x31	; 49
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <DIO_init+0x1ea>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <DIO_init+0x1e6>
    1e40:	84 2b       	or	r24, r20
    1e42:	8c 93       	st	X, r24
				status = SUCCESS;
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	05 c0       	rjmp	.+10     	; 0x1e52 <DIO_init+0x200>
			}
			else
			{
				status = ERROR;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_init+0x200>
			}
			break;

		default:
		status = ERROR;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
	}


	return status;
    1e52:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e54:	26 96       	adiw	r28, 0x06	; 6
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <DIO_read>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			OUT: ppinState : pointer to the direction of the pin HIGH/LOW.
 */
stdReturnType_t DIO_read(portX_t PortName, pinX_t pinNum, pinState_t * ppinState)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	27 97       	sbiw	r28, 0x07	; 7
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
    1e7c:	6b 83       	std	Y+3, r22	; 0x03
    1e7e:	5d 83       	std	Y+5, r21	; 0x05
    1e80:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	89 83       	std	Y+1, r24	; 0x01

    /*@TODO: Validation of input */
	if(NULL != ppinState)
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <DIO_read+0x2a>
    1e8e:	78 c0       	rjmp	.+240    	; 0x1f80 <DIO_read+0x11a>
	{

		switch(PortName)
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	3f 83       	std	Y+7, r19	; 0x07
    1e98:	2e 83       	std	Y+6, r18	; 0x06
    1e9a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e9c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e9e:	41 30       	cpi	r20, 0x01	; 1
    1ea0:	51 05       	cpc	r21, r1
    1ea2:	61 f1       	breq	.+88     	; 0x1efc <DIO_read+0x96>
    1ea4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea8:	82 30       	cpi	r24, 0x02	; 2
    1eaa:	91 05       	cpc	r25, r1
    1eac:	34 f4       	brge	.+12     	; 0x1eba <DIO_read+0x54>
    1eae:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb0:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb2:	21 15       	cp	r18, r1
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	69 f0       	breq	.+26     	; 0x1ed2 <DIO_read+0x6c>
    1eb8:	60 c0       	rjmp	.+192    	; 0x1f7a <DIO_read+0x114>
    1eba:	4e 81       	ldd	r20, Y+6	; 0x06
    1ebc:	5f 81       	ldd	r21, Y+7	; 0x07
    1ebe:	42 30       	cpi	r20, 0x02	; 2
    1ec0:	51 05       	cpc	r21, r1
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <DIO_read+0x60>
    1ec4:	45 c0       	rjmp	.+138    	; 0x1f50 <DIO_read+0xea>
    1ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eca:	83 30       	cpi	r24, 0x03	; 3
    1ecc:	91 05       	cpc	r25, r1
    1ece:	59 f1       	breq	.+86     	; 0x1f26 <DIO_read+0xc0>
    1ed0:	54 c0       	rjmp	.+168    	; 0x1f7a <DIO_read+0x114>
		{
			case PORT_A:
				{
					*ppinState = (pinState_t) GET_BIT(PINA, pinNum);
    1ed2:	e9 e3       	ldi	r30, 0x39	; 57
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a9 01       	movw	r20, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_read+0x84>
    1ee6:	55 95       	asr	r21
    1ee8:	47 95       	ror	r20
    1eea:	8a 95       	dec	r24
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <DIO_read+0x80>
    1eee:	ca 01       	movw	r24, r20
    1ef0:	81 70       	andi	r24, 0x01	; 1
    1ef2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ef6:	80 83       	st	Z, r24
					status = SUCCESS;
    1ef8:	19 82       	std	Y+1, r1	; 0x01
    1efa:	44 c0       	rjmp	.+136    	; 0x1f84 <DIO_read+0x11e>
					break;
				}

			case PORT_B:
				{
					*ppinState = (pinState_t) GET_BIT(PINB, pinNum);
    1efc:	e6 e3       	ldi	r30, 0x36	; 54
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a9 01       	movw	r20, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <DIO_read+0xae>
    1f10:	55 95       	asr	r21
    1f12:	47 95       	ror	r20
    1f14:	8a 95       	dec	r24
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <DIO_read+0xaa>
    1f18:	ca 01       	movw	r24, r20
    1f1a:	81 70       	andi	r24, 0x01	; 1
    1f1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f20:	80 83       	st	Z, r24
					status = SUCCESS;
    1f22:	19 82       	std	Y+1, r1	; 0x01
    1f24:	2f c0       	rjmp	.+94     	; 0x1f84 <DIO_read+0x11e>
					break;
				}

			case PORT_C:
				{
					*ppinState = (pinState_t) GET_BIT(PINC, pinNum);
    1f26:	e3 e3       	ldi	r30, 0x33	; 51
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	88 2f       	mov	r24, r24
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a9 01       	movw	r20, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <DIO_read+0xd8>
    1f3a:	55 95       	asr	r21
    1f3c:	47 95       	ror	r20
    1f3e:	8a 95       	dec	r24
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <DIO_read+0xd4>
    1f42:	ca 01       	movw	r24, r20
    1f44:	81 70       	andi	r24, 0x01	; 1
    1f46:	ec 81       	ldd	r30, Y+4	; 0x04
    1f48:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4a:	80 83       	st	Z, r24
					status = SUCCESS;
    1f4c:	19 82       	std	Y+1, r1	; 0x01
    1f4e:	1a c0       	rjmp	.+52     	; 0x1f84 <DIO_read+0x11e>
				}
				break;

			case PORT_D:
				{
					*ppinState = (pinState_t) GET_BIT(PIND, pinNum);
    1f50:	e0 e3       	ldi	r30, 0x30	; 48
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	88 2f       	mov	r24, r24
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a9 01       	movw	r20, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <DIO_read+0x102>
    1f64:	55 95       	asr	r21
    1f66:	47 95       	ror	r20
    1f68:	8a 95       	dec	r24
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <DIO_read+0xfe>
    1f6c:	ca 01       	movw	r24, r20
    1f6e:	81 70       	andi	r24, 0x01	; 1
    1f70:	ec 81       	ldd	r30, Y+4	; 0x04
    1f72:	fd 81       	ldd	r31, Y+5	; 0x05
    1f74:	80 83       	st	Z, r24
					status = SUCCESS;
    1f76:	19 82       	std	Y+1, r1	; 0x01
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <DIO_read+0x11e>
					break;
				}

			default:
			status = ERROR;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_read+0x11e>
		}
	}
	else
	{
		status = ERROR;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
	}


		return status;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f86:	27 96       	adiw	r28, 0x07	; 7
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <DIO_write>:
 * 			IN: PortName : the name of the port.
 * 			IN: pinNum : the pin number.
 * 			IN: pinState : the value of the pin.
 */
stdReturnType_t DIO_write(portX_t portName, pinX_t pinNum, pinState_t pinState)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <DIO_write+0x6>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <DIO_write+0x8>
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <DIO_write+0xa>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
    1fa8:	6b 83       	std	Y+3, r22	; 0x03
    1faa:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t status = ERROR;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO: Validation of input */

	switch(portName)
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	3e 83       	std	Y+6, r19	; 0x06
    1fb8:	2d 83       	std	Y+5, r18	; 0x05
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <DIO_write+0x2e>
    1fc4:	4b c0       	rjmp	.+150    	; 0x205c <DIO_write+0xc4>
    1fc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	31 05       	cpc	r19, r1
    1fce:	2c f4       	brge	.+10     	; 0x1fda <DIO_write+0x42>
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	71 f0       	breq	.+28     	; 0x1ff4 <DIO_write+0x5c>
    1fd8:	dd c0       	rjmp	.+442    	; 0x2194 <DIO_write+0x1fc>
    1fda:	2d 81       	ldd	r18, Y+5	; 0x05
    1fdc:	3e 81       	ldd	r19, Y+6	; 0x06
    1fde:	22 30       	cpi	r18, 0x02	; 2
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <DIO_write+0x4e>
    1fe4:	a3 c0       	rjmp	.+326    	; 0x212c <DIO_write+0x194>
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	83 30       	cpi	r24, 0x03	; 3
    1fec:	91 05       	cpc	r25, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <DIO_write+0x5a>
    1ff0:	69 c0       	rjmp	.+210    	; 0x20c4 <DIO_write+0x12c>
    1ff2:	d0 c0       	rjmp	.+416    	; 0x2194 <DIO_write+0x1fc>
	{
		case PORT_A:
			if(PIN_IS_LOW == pinState)
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	88 23       	and	r24, r24
    1ff8:	b1 f4       	brne	.+44     	; 0x2026 <DIO_write+0x8e>
			{
				CLR_BIT(PORTA, pinNum);
    1ffa:	ab e3       	ldi	r26, 0x3B	; 59
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	eb e3       	ldi	r30, 0x3B	; 59
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	48 2f       	mov	r20, r24
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 2e       	mov	r0, r18
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <DIO_write+0x80>
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	0a 94       	dec	r0
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <DIO_write+0x7c>
    201c:	80 95       	com	r24
    201e:	84 23       	and	r24, r20
    2020:	8c 93       	st	X, r24
				status = SUCCESS;
    2022:	19 82       	std	Y+1, r1	; 0x01
    2024:	b9 c0       	rjmp	.+370    	; 0x2198 <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    2026:	8c 81       	ldd	r24, Y+4	; 0x04
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	a9 f4       	brne	.+42     	; 0x2056 <DIO_write+0xbe>
			{
				SET_BIT(PORTA, pinNum);
    202c:	ab e3       	ldi	r26, 0x3B	; 59
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	eb e3       	ldi	r30, 0x3B	; 59
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <DIO_write+0xb2>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <DIO_write+0xae>
    204e:	84 2b       	or	r24, r20
    2050:	8c 93       	st	X, r24
				status = SUCCESS;
    2052:	19 82       	std	Y+1, r1	; 0x01
    2054:	a1 c0       	rjmp	.+322    	; 0x2198 <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	9e c0       	rjmp	.+316    	; 0x2198 <DIO_write+0x200>
			}
			break;

		case PORT_B:
			if(PIN_IS_LOW == pinState)
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	88 23       	and	r24, r24
    2060:	b1 f4       	brne	.+44     	; 0x208e <DIO_write+0xf6>
			{
				CLR_BIT(PORTB, pinNum);
    2062:	a8 e3       	ldi	r26, 0x38	; 56
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e8 e3       	ldi	r30, 0x38	; 56
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	48 2f       	mov	r20, r24
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	02 2e       	mov	r0, r18
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <DIO_write+0xe8>
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	0a 94       	dec	r0
    2082:	e2 f7       	brpl	.-8      	; 0x207c <DIO_write+0xe4>
    2084:	80 95       	com	r24
    2086:	84 23       	and	r24, r20
    2088:	8c 93       	st	X, r24
				status = SUCCESS;
    208a:	19 82       	std	Y+1, r1	; 0x01
    208c:	85 c0       	rjmp	.+266    	; 0x2198 <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	a9 f4       	brne	.+42     	; 0x20be <DIO_write+0x126>
			{
				SET_BIT(PORTB, pinNum);
    2094:	a8 e3       	ldi	r26, 0x38	; 56
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e8 e3       	ldi	r30, 0x38	; 56
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <DIO_write+0x11a>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <DIO_write+0x116>
    20b6:	84 2b       	or	r24, r20
    20b8:	8c 93       	st	X, r24
				status = SUCCESS;
    20ba:	19 82       	std	Y+1, r1	; 0x01
    20bc:	6d c0       	rjmp	.+218    	; 0x2198 <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	6a c0       	rjmp	.+212    	; 0x2198 <DIO_write+0x200>
			}
			break;

		case PORT_C:
			if(PIN_IS_LOW == pinState)
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	88 23       	and	r24, r24
    20c8:	b1 f4       	brne	.+44     	; 0x20f6 <DIO_write+0x15e>
			{
				CLR_BIT(PORTC, pinNum);
    20ca:	a5 e3       	ldi	r26, 0x35	; 53
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e5 e3       	ldi	r30, 0x35	; 53
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	48 2f       	mov	r20, r24
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 2e       	mov	r0, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <DIO_write+0x150>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	0a 94       	dec	r0
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <DIO_write+0x14c>
    20ec:	80 95       	com	r24
    20ee:	84 23       	and	r24, r20
    20f0:	8c 93       	st	X, r24
				status = SUCCESS;
    20f2:	19 82       	std	Y+1, r1	; 0x01
    20f4:	51 c0       	rjmp	.+162    	; 0x2198 <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	a9 f4       	brne	.+42     	; 0x2126 <DIO_write+0x18e>
			{
				SET_BIT(PORTC, pinNum);
    20fc:	a5 e3       	ldi	r26, 0x35	; 53
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e3       	ldi	r30, 0x35	; 53
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	48 2f       	mov	r20, r24
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <DIO_write+0x182>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <DIO_write+0x17e>
    211e:	84 2b       	or	r24, r20
    2120:	8c 93       	st	X, r24
				status = SUCCESS;
    2122:	19 82       	std	Y+1, r1	; 0x01
    2124:	39 c0       	rjmp	.+114    	; 0x2198 <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	36 c0       	rjmp	.+108    	; 0x2198 <DIO_write+0x200>
			}
			break;

		case PORT_D:
			if(PIN_IS_LOW == pinState)
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	88 23       	and	r24, r24
    2130:	b1 f4       	brne	.+44     	; 0x215e <DIO_write+0x1c6>
			{
				CLR_BIT(PORTD, pinNum);
    2132:	a2 e3       	ldi	r26, 0x32	; 50
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e2 e3       	ldi	r30, 0x32	; 50
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	48 2f       	mov	r20, r24
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	02 2e       	mov	r0, r18
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <DIO_write+0x1b8>
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	0a 94       	dec	r0
    2152:	e2 f7       	brpl	.-8      	; 0x214c <DIO_write+0x1b4>
    2154:	80 95       	com	r24
    2156:	84 23       	and	r24, r20
    2158:	8c 93       	st	X, r24
				status = SUCCESS;
    215a:	19 82       	std	Y+1, r1	; 0x01
    215c:	1d c0       	rjmp	.+58     	; 0x2198 <DIO_write+0x200>
			}
			else if (PIN_IS_HIGH == pinState)
    215e:	8c 81       	ldd	r24, Y+4	; 0x04
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	a9 f4       	brne	.+42     	; 0x218e <DIO_write+0x1f6>
			{
				SET_BIT(PORTD, pinNum);
    2164:	a2 e3       	ldi	r26, 0x32	; 50
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e2 e3       	ldi	r30, 0x32	; 50
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <DIO_write+0x1ea>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <DIO_write+0x1e6>
    2186:	84 2b       	or	r24, r20
    2188:	8c 93       	st	X, r24
				status = SUCCESS;
    218a:	19 82       	std	Y+1, r1	; 0x01
    218c:	05 c0       	rjmp	.+10     	; 0x2198 <DIO_write+0x200>
			}
			else
			{
				status = ERROR;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_write+0x200>
			}
			break;

		default:
		status = ERROR;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	89 83       	std	Y+1, r24	; 0x01
	}

return status;
    2198:	89 81       	ldd	r24, Y+1	; 0x01

}
    219a:	26 96       	adiw	r28, 0x06	; 6
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <ADC_init>:
/*************************************/
/* Description : This function is    */
/* used to initialize ADC            */
/*************************************/
extern void ADC_init()
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62

  /* Disable interrupt */
  CLR_BIT(ADCSRA,3);
    21b4:	a6 e2       	ldi	r26, 0x26	; 38
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e6 e2       	ldi	r30, 0x26	; 38
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	87 7f       	andi	r24, 0xF7	; 247
    21c0:	8c 93       	st	X, r24
  /* Clear interrupt flag */
  SET_BIT(ADCSRA,4);
    21c2:	a6 e2       	ldi	r26, 0x26	; 38
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e6 e2       	ldi	r30, 0x26	; 38
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	80 61       	ori	r24, 0x10	; 16
    21ce:	8c 93       	st	X, r24

  /* Enable ADC */
  ADC_enable();
    21d0:	0e 94 a5 11 	call	0x234a	; 0x234a <ADC_enable>

  /* Configure resolution */
  #if ADC_u8_RESOLUTION_MODE == ADC_8_BIT_MODE
    SET_BIT(ADMUX,5);
  #elif ADC_u8_RESOLUTION_MODE == ADC_10_BIT_MODE
    CLR_BIT(ADMUX,5);
    21d4:	a7 e2       	ldi	r26, 0x27	; 39
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e7 e2       	ldi	r30, 0x27	; 39
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	8f 7d       	andi	r24, 0xDF	; 223
    21e0:	8c 93       	st	X, r24
  #elif ADC_u8_PRESCALER_DIVISION == ADC_u8_PRESCALER_8
    SET_BIT(ADCSRA,0);
    SET_BIT(ADCSRA,1);
    CLR_BIT(ADCSRA,2);
  #elif ADC_u8_PRESCALER_DIVISION == ADC_u8_PRESCALER_16
    CLR_BIT(ADCSRA,0);
    21e2:	a6 e2       	ldi	r26, 0x26	; 38
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e6 e2       	ldi	r30, 0x26	; 38
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8e 7f       	andi	r24, 0xFE	; 254
    21ee:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA,1);
    21f0:	a6 e2       	ldi	r26, 0x26	; 38
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e6 e2       	ldi	r30, 0x26	; 38
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8d 7f       	andi	r24, 0xFD	; 253
    21fc:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,2);
    21fe:	a6 e2       	ldi	r26, 0x26	; 38
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e6 e2       	ldi	r30, 0x26	; 38
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	84 60       	ori	r24, 0x04	; 4
    220a:	8c 93       	st	X, r24
  /* Configure voltage reference */
  #if ADC_REFERENCE_VOLTAGE == ADC_AREF
    CLR_BIT(ADMUX,7);
    CLR_BIT(ADMUX,6);
  #elif ADC_REFERENCE_VOLTAGE == ADC_AVCC
    CLR_BIT(ADMUX,7);
    220c:	a7 e2       	ldi	r26, 0x27	; 39
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e7 e2       	ldi	r30, 0x27	; 39
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	8f 77       	andi	r24, 0x7F	; 127
    2218:	8c 93       	st	X, r24
    SET_BIT(ADMUX,6);
    221a:	a7 e2       	ldi	r26, 0x27	; 39
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e7 e2       	ldi	r30, 0x27	; 39
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 64       	ori	r24, 0x40	; 64
    2226:	8c 93       	st	X, r24

  /* Configure operation mode */
  #if ADC_OPERATION_MODE == ADC_SINGLE_CONVERSION
    CLR_BIT(ADCSRA,5);
  #elif ADC_OPERATION_MODE == ADC_AUTO_TRIGGER
    SET_BIT(ADCSRA,5);
    2228:	a6 e2       	ldi	r26, 0x26	; 38
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e6 e2       	ldi	r30, 0x26	; 38
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 62       	ori	r24, 0x20	; 32
    2234:	8c 93       	st	X, r24
  #endif

  /* Configure triggering mode */
  #if ADC_TRIGERRING_MODE == ADC_FREE_RUNNING_MODE
    CLR_BIT(SFIOR,5);
    2236:	a0 e5       	ldi	r26, 0x50	; 80
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e0 e5       	ldi	r30, 0x50	; 80
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	8f 7d       	andi	r24, 0xDF	; 223
    2242:	8c 93       	st	X, r24
    CLR_BIT(SFIOR,6);
    2244:	a0 e5       	ldi	r26, 0x50	; 80
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e0 e5       	ldi	r30, 0x50	; 80
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	8f 7b       	andi	r24, 0xBF	; 191
    2250:	8c 93       	st	X, r24
    CLR_BIT(SFIOR,7);
    2252:	a0 e5       	ldi	r26, 0x50	; 80
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e0 e5       	ldi	r30, 0x50	; 80
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8f 77       	andi	r24, 0x7F	; 127
    225e:	8c 93       	st	X, r24
    CLR_BIT(SFIOR,5);
    SET_BIT(SFIOR,6);
    SET_BIT(SFIOR,7);
  #endif

}
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <ADC_u8StartConversion>:
/*************************************/
/* Description : This function is    */
/* used to start ADC conversion      */
/*************************************/
extern u8 ADC_u8StartConversion(u8 u8Channel,u16 *u16Val)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <ADC_u8StartConversion+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <ADC_u8StartConversion+0x8>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	7b 83       	std	Y+3, r23	; 0x03
    2276:	6a 83       	std	Y+2, r22	; 0x02

  /* Select channel */
  ADMUX = (ADMUX & 0b11100000) | u8Channel;
    2278:	a7 e2       	ldi	r26, 0x27	; 39
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e7 e2       	ldi	r30, 0x27	; 39
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	98 2f       	mov	r25, r24
    2284:	90 7e       	andi	r25, 0xE0	; 224
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	89 2b       	or	r24, r25
    228a:	8c 93       	st	X, r24

  /* Start conversion */
  SET_BIT(ADCSRA,6);
    228c:	a6 e2       	ldi	r26, 0x26	; 38
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e6 e2       	ldi	r30, 0x26	; 38
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	80 64       	ori	r24, 0x40	; 64
    2298:	8c 93       	st	X, r24

  /* Check that interrupt is not enabled */
  if(GET_BIT(ADCSRA,3))
    229a:	e6 e2       	ldi	r30, 0x26	; 38
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	86 95       	lsr	r24
    22a2:	86 95       	lsr	r24
    22a4:	86 95       	lsr	r24
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	81 70       	andi	r24, 0x01	; 1
    22ac:	90 70       	andi	r25, 0x00	; 0
    22ae:	88 23       	and	r24, r24
    22b0:	19 f0       	breq	.+6      	; 0x22b8 <ADC_u8StartConversion+0x52>
  {
    return ADC_NOT_OK;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	8c 83       	std	Y+4, r24	; 0x04
    22b6:	19 c0       	rjmp	.+50     	; 0x22ea <ADC_u8StartConversion+0x84>
  }
  else
  {
    /* Wait until conversion completes */
    while(!GET_BIT(ADCSRA,4)){}
    22b8:	e6 e2       	ldi	r30, 0x26	; 38
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	82 95       	swap	r24
    22c0:	8f 70       	andi	r24, 0x0F	; 15
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	81 70       	andi	r24, 0x01	; 1
    22c8:	90 70       	andi	r25, 0x00	; 0
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	a9 f3       	breq	.-22     	; 0x22b8 <ADC_u8StartConversion+0x52>

    /* Clear interrupt flag */
    SET_BIT(ADCSRA,4);
    22ce:	a6 e2       	ldi	r26, 0x26	; 38
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e6 e2       	ldi	r30, 0x26	; 38
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	80 61       	ori	r24, 0x10	; 16
    22da:	8c 93       	st	X, r24

    /* Read ADC value */
    *u16Val = ADC_u16GetLastValue();
    22dc:	0e 94 7d 11 	call	0x22fa	; 0x22fa <ADC_u16GetLastValue>
    22e0:	ea 81       	ldd	r30, Y+2	; 0x02
    22e2:	fb 81       	ldd	r31, Y+3	; 0x03
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
    return ADC_OK;
    22e8:	1c 82       	std	Y+4, r1	; 0x04
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
  }
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <ADC_u16GetLastValue>:
/*************************************/
/* Description : This function is    */
/* used to get last converted value  */
/*************************************/
extern u16 ADC_u16GetLastValue(void)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <ADC_u16GetLastValue+0x6>
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
  u16Result = 0;
    2304:	10 92 09 02 	sts	0x0209, r1
    2308:	10 92 08 02 	sts	0x0208, r1

  #if ADC_u8_RESOLUTION_MODE == ADC_8_BIT_MODE
  u16Result = (u16) ADCH;
  return u16Result;
  #elif ADC_u8_RESOLUTION_MODE == ADC_10_BIT_MODE
  right = ADCL;
    230c:	e4 e2       	ldi	r30, 0x24	; 36
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	89 83       	std	Y+1, r24	; 0x01
  left = ADCH;
    2314:	e5 e2       	ldi	r30, 0x25	; 37
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	8a 83       	std	Y+2, r24	; 0x02
  u16Result = (((u16)left)<<8) | ((u16)right);
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	38 2f       	mov	r19, r24
    2324:	22 27       	eor	r18, r18
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	82 2b       	or	r24, r18
    232e:	93 2b       	or	r25, r19
    2330:	90 93 09 02 	sts	0x0209, r25
    2334:	80 93 08 02 	sts	0x0208, r24
  return u16Result;
    2338:	80 91 08 02 	lds	r24, 0x0208
    233c:	90 91 09 02 	lds	r25, 0x0209
  #endif
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <ADC_enable>:
/*************************************/
/* Description : This function is    */
/* used to enable ADC                */
/*************************************/
extern void ADC_enable(void)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA,7);
    2352:	a6 e2       	ldi	r26, 0x26	; 38
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e6 e2       	ldi	r30, 0x26	; 38
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	80 68       	ori	r24, 0x80	; 128
    235e:	8c 93       	st	X, r24
}
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <ADC_disable>:
/*************************************/
/* Description : This function is    */
/* used to disable ADC               */
/*************************************/
extern void ADC_disable(void)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA,7);
    236e:	a6 e2       	ldi	r26, 0x26	; 38
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e6 e2       	ldi	r30, 0x26	; 38
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	8f 77       	andi	r24, 0x7F	; 127
    237a:	8c 93       	st	X, r24
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <ADC_enableInterrupt>:
/*************************************/
/* Description : This function is    */
/* used to enable ADC interrupt      */
/*************************************/
extern void ADC_enableInterrupt(void)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA,3);
    238a:	a6 e2       	ldi	r26, 0x26	; 38
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e6 e2       	ldi	r30, 0x26	; 38
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	88 60       	ori	r24, 0x08	; 8
    2396:	8c 93       	st	X, r24
}
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <ADC_disableInterrupt>:
/*************************************/
/* Description : This function is    */
/* used to disable ADC interrupt     */
/*************************************/
extern void ADC_disableInterrupt(void)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA,3);
    23a6:	a6 e2       	ldi	r26, 0x26	; 38
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e6 e2       	ldi	r30, 0x26	; 38
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	87 7f       	andi	r24, 0xF7	; 247
    23b2:	8c 93       	st	X, r24
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <ADC_voidSetCallBack>:
/*************************************/
/* Description : This function is    */
/* used to set ADC ISR callback      */
/*************************************/
extern void ADC_voidSetCallBack(void (*ptrCpy) (void))
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <ADC_voidSetCallBack+0x6>
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
  ADC_CALLBACK_FUNC = ptrCpy;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	90 93 11 02 	sts	0x0211, r25
    23d0:	80 93 10 02 	sts	0x0210, r24
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <__vector_16>:
/* Description : This function is    */
/* the ISR ADC conversion            */
/*************************************/
void __vector_16 (void) __attribute__((signal,used));
void __vector_16 (void)
{
    23de:	1f 92       	push	r1
    23e0:	0f 92       	push	r0
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	0f 92       	push	r0
    23e6:	11 24       	eor	r1, r1
    23e8:	2f 93       	push	r18
    23ea:	3f 93       	push	r19
    23ec:	4f 93       	push	r20
    23ee:	5f 93       	push	r21
    23f0:	6f 93       	push	r22
    23f2:	7f 93       	push	r23
    23f4:	8f 93       	push	r24
    23f6:	9f 93       	push	r25
    23f8:	af 93       	push	r26
    23fa:	bf 93       	push	r27
    23fc:	ef 93       	push	r30
    23fe:	ff 93       	push	r31
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
  ADC_CALLBACK_FUNC();
    2408:	e0 91 10 02 	lds	r30, 0x0210
    240c:	f0 91 11 02 	lds	r31, 0x0211
    2410:	09 95       	icall
}
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	ff 91       	pop	r31
    2418:	ef 91       	pop	r30
    241a:	bf 91       	pop	r27
    241c:	af 91       	pop	r26
    241e:	9f 91       	pop	r25
    2420:	8f 91       	pop	r24
    2422:	7f 91       	pop	r23
    2424:	6f 91       	pop	r22
    2426:	5f 91       	pop	r21
    2428:	4f 91       	pop	r20
    242a:	3f 91       	pop	r19
    242c:	2f 91       	pop	r18
    242e:	0f 90       	pop	r0
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	0f 90       	pop	r0
    2434:	1f 90       	pop	r1
    2436:	18 95       	reti

00002438 <initSevenSegment>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t initSevenSegment(segments_t segmentID)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <initSevenSegment+0x6>
    243e:	00 d0       	rcall	.+0      	; 0x2440 <initSevenSegment+0x8>
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	89 83       	std	Y+1, r24	; 0x01

	switch(segmentID)
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	3c 83       	std	Y+4, r19	; 0x04
    2452:	2b 83       	std	Y+3, r18	; 0x03
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	31 f0       	breq	.+12     	; 0x2468 <initSevenSegment+0x30>
    245c:	2b 81       	ldd	r18, Y+3	; 0x03
    245e:	3c 81       	ldd	r19, Y+4	; 0x04
    2460:	21 30       	cpi	r18, 0x01	; 1
    2462:	31 05       	cpc	r19, r1
    2464:	a9 f1       	breq	.+106    	; 0x24d0 <initSevenSegment+0x98>
    2466:	68 c0       	rjmp	.+208    	; 0x2538 <initSevenSegment+0x100>
	{
		case SEVEN_SEGMENT0:
			retStatus = DIO_init(SEVEN_SEG0_ENABLE_PORT, SEVEN_SEG0_ENABLE_PIN, OUTPUT);
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	62 e0       	ldi	r22, 0x02	; 2
    246c:	41 e0       	ldi	r20, 0x01	; 1
    246e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    2472:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINA_PORT, SEVEN_SEG0_PINA_PIN, OUTPUT);
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	64 e0       	ldi	r22, 0x04	; 4
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    247e:	98 2f       	mov	r25, r24
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	89 2b       	or	r24, r25
    2484:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINB_PORT, SEVEN_SEG0_PINB_PIN, OUTPUT);
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	65 e0       	ldi	r22, 0x05	; 5
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    2490:	98 2f       	mov	r25, r24
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	89 2b       	or	r24, r25
    2496:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PINC_PORT, SEVEN_SEG0_PINC_PIN, OUTPUT);
    2498:	83 e0       	ldi	r24, 0x03	; 3
    249a:	66 e0       	ldi	r22, 0x06	; 6
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    24a2:	98 2f       	mov	r25, r24
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	89 2b       	or	r24, r25
    24a8:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_PIND_PORT, SEVEN_SEG0_PIND_PIN, OUTPUT);
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	67 e0       	ldi	r22, 0x07	; 7
    24ae:	41 e0       	ldi	r20, 0x01	; 1
    24b0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    24b4:	98 2f       	mov	r25, r24
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	89 2b       	or	r24, r25
    24ba:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG0_DB_PORT, SEVEN_SEG0_DB_PIN, OUTPUT);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    24c6:	98 2f       	mov	r25, r24
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	89 2b       	or	r24, r25
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	36 c0       	rjmp	.+108    	; 0x253c <initSevenSegment+0x104>
			break;

		case SEVEN_SEGMENT1:
			retStatus = DIO_init(SEVEN_SEG1_ENABLE_PORT, SEVEN_SEG1_ENABLE_PIN, OUTPUT);
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	63 e0       	ldi	r22, 0x03	; 3
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    24da:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINA_PORT, SEVEN_SEG1_PINA_PIN, OUTPUT);
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	64 e0       	ldi	r22, 0x04	; 4
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    24e6:	98 2f       	mov	r25, r24
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	89 2b       	or	r24, r25
    24ec:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINB_PORT, SEVEN_SEG1_PINB_PIN, OUTPUT);
    24ee:	83 e0       	ldi	r24, 0x03	; 3
    24f0:	65 e0       	ldi	r22, 0x05	; 5
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    24f8:	98 2f       	mov	r25, r24
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	89 2b       	or	r24, r25
    24fe:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PINC_PORT, SEVEN_SEG1_PINC_PIN, OUTPUT);
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	66 e0       	ldi	r22, 0x06	; 6
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    250a:	98 2f       	mov	r25, r24
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	89 2b       	or	r24, r25
    2510:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_PIND_PORT, SEVEN_SEG1_PIND_PIN, OUTPUT);
    2512:	83 e0       	ldi	r24, 0x03	; 3
    2514:	67 e0       	ldi	r22, 0x07	; 7
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    251c:	98 2f       	mov	r25, r24
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	89 2b       	or	r24, r25
    2522:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_init(SEVEN_SEG1_DB_PORT, SEVEN_SEG1_DB_PIN, OUTPUT);
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    252e:	98 2f       	mov	r25, r24
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	89 2b       	or	r24, r25
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	02 c0       	rjmp	.+4      	; 0x253c <initSevenSegment+0x104>
			break;

		default:
			/* invalid segment ID*/
			retStatus = ERROR;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
}
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <controlSevenSegment>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: state : the state of seven segments ENABLED/DISABLED.
 *
 */
stdReturnType_t controlSevenSegment(segments_t segmentID, segmentState_t state)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	00 d0       	rcall	.+0      	; 0x2552 <controlSevenSegment+0x6>
    2552:	00 d0       	rcall	.+0      	; 0x2554 <controlSevenSegment+0x8>
    2554:	0f 92       	push	r0
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	8a 83       	std	Y+2, r24	; 0x02
    255c:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus;

	switch(segmentID)
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	3d 83       	std	Y+5, r19	; 0x05
    2566:	2c 83       	std	Y+4, r18	; 0x04
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	31 f0       	breq	.+12     	; 0x257c <controlSevenSegment+0x30>
    2570:	2c 81       	ldd	r18, Y+4	; 0x04
    2572:	3d 81       	ldd	r19, Y+5	; 0x05
    2574:	21 30       	cpi	r18, 0x01	; 1
    2576:	31 05       	cpc	r19, r1
    2578:	41 f0       	breq	.+16     	; 0x258a <controlSevenSegment+0x3e>
    257a:	0e c0       	rjmp	.+28     	; 0x2598 <controlSevenSegment+0x4c>
	{
		case SEVEN_SEGMENT0:
			DIO_write(SEVEN_SEG0_ENABLE_PORT, SEVEN_SEG0_ENABLE_PIN, (pinState_t)state);
    257c:	83 e0       	ldi	r24, 0x03	; 3
    257e:	62 e0       	ldi	r22, 0x02	; 2
    2580:	4b 81       	ldd	r20, Y+3	; 0x03
    2582:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
			retStatus = SUCCESS;
    2586:	19 82       	std	Y+1, r1	; 0x01
    2588:	09 c0       	rjmp	.+18     	; 0x259c <controlSevenSegment+0x50>
			break;

		case SEVEN_SEGMENT1:
			DIO_write(SEVEN_SEG1_ENABLE_PORT, SEVEN_SEG1_ENABLE_PIN, (pinState_t)state);
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	63 e0       	ldi	r22, 0x03	; 3
    258e:	4b 81       	ldd	r20, Y+3	; 0x03
    2590:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
			retStatus = SUCCESS;
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	02 c0       	rjmp	.+4      	; 0x259c <controlSevenSegment+0x50>
			break;

		default:
			retStatus = ERROR;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return retStatus;
    259c:	89 81       	ldd	r24, Y+1	; 0x01
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <writeToSevenSegment>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: num : the num to write and should be [0:9].
 *
 */
stdReturnType_t writeToSevenSegment(segments_t segmentID, SegmentNumbers_t num)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <writeToSevenSegment+0x6>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <writeToSevenSegment+0x8>
    25b6:	0f 92       	push	r0
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	8a 83       	std	Y+2, r24	; 0x02
    25be:	6b 83       	std	Y+3, r22	; 0x03
 stdReturnType_t retStatus = ERROR;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	89 83       	std	Y+1, r24	; 0x01

	switch(segmentID)
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	3d 83       	std	Y+5, r19	; 0x05
    25cc:	2c 83       	std	Y+4, r18	; 0x04
    25ce:	8c 81       	ldd	r24, Y+4	; 0x04
    25d0:	9d 81       	ldd	r25, Y+5	; 0x05
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	31 f0       	breq	.+12     	; 0x25e2 <writeToSevenSegment+0x34>
    25d6:	2c 81       	ldd	r18, Y+4	; 0x04
    25d8:	3d 81       	ldd	r19, Y+5	; 0x05
    25da:	21 30       	cpi	r18, 0x01	; 1
    25dc:	31 05       	cpc	r19, r1
    25de:	a9 f1       	breq	.+106    	; 0x264a <writeToSevenSegment+0x9c>
    25e0:	68 c0       	rjmp	.+208    	; 0x26b2 <writeToSevenSegment+0x104>
	{
		case SEVEN_SEGMENT0:
			retStatus  = DIO_write(SEVEN_SEG0_PINA_PORT, SEVEN_SEG0_PINA_PIN, GET_PIN_VAL(num, 0));
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	98 2f       	mov	r25, r24
    25e6:	91 70       	andi	r25, 0x01	; 1
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	64 e0       	ldi	r22, 0x04	; 4
    25ec:	49 2f       	mov	r20, r25
    25ee:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    25f2:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PINB_PORT, SEVEN_SEG0_PINB_PIN, GET_PIN_VAL(num, 1));
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	86 95       	lsr	r24
    25f8:	98 2f       	mov	r25, r24
    25fa:	91 70       	andi	r25, 0x01	; 1
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	65 e0       	ldi	r22, 0x05	; 5
    2600:	49 2f       	mov	r20, r25
    2602:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2606:	98 2f       	mov	r25, r24
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	89 2b       	or	r24, r25
    260c:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PINC_PORT, SEVEN_SEG0_PINC_PIN, GET_PIN_VAL(num, 2));
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	86 95       	lsr	r24
    2612:	86 95       	lsr	r24
    2614:	98 2f       	mov	r25, r24
    2616:	91 70       	andi	r25, 0x01	; 1
    2618:	83 e0       	ldi	r24, 0x03	; 3
    261a:	66 e0       	ldi	r22, 0x06	; 6
    261c:	49 2f       	mov	r20, r25
    261e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2622:	98 2f       	mov	r25, r24
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	89 2b       	or	r24, r25
    2628:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG0_PIND_PORT, SEVEN_SEG0_PIND_PIN, GET_PIN_VAL(num, 3));
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	86 95       	lsr	r24
    262e:	86 95       	lsr	r24
    2630:	86 95       	lsr	r24
    2632:	98 2f       	mov	r25, r24
    2634:	91 70       	andi	r25, 0x01	; 1
    2636:	83 e0       	ldi	r24, 0x03	; 3
    2638:	67 e0       	ldi	r22, 0x07	; 7
    263a:	49 2f       	mov	r20, r25
    263c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2640:	98 2f       	mov	r25, r24
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	89 2b       	or	r24, r25
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	36 c0       	rjmp	.+108    	; 0x26b6 <writeToSevenSegment+0x108>
			break;

		case SEVEN_SEGMENT1:
			retStatus  = DIO_write(SEVEN_SEG1_PINA_PORT, SEVEN_SEG1_PINA_PIN, GET_PIN_VAL(num, 0));
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	98 2f       	mov	r25, r24
    264e:	91 70       	andi	r25, 0x01	; 1
    2650:	83 e0       	ldi	r24, 0x03	; 3
    2652:	64 e0       	ldi	r22, 0x04	; 4
    2654:	49 2f       	mov	r20, r25
    2656:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    265a:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PINB_PORT, SEVEN_SEG1_PINB_PIN, GET_PIN_VAL(num, 1));
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	86 95       	lsr	r24
    2660:	98 2f       	mov	r25, r24
    2662:	91 70       	andi	r25, 0x01	; 1
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	65 e0       	ldi	r22, 0x05	; 5
    2668:	49 2f       	mov	r20, r25
    266a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    266e:	98 2f       	mov	r25, r24
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	89 2b       	or	r24, r25
    2674:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PINC_PORT, SEVEN_SEG1_PINC_PIN, GET_PIN_VAL(num, 2));
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	86 95       	lsr	r24
    267a:	86 95       	lsr	r24
    267c:	98 2f       	mov	r25, r24
    267e:	91 70       	andi	r25, 0x01	; 1
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	66 e0       	ldi	r22, 0x06	; 6
    2684:	49 2f       	mov	r20, r25
    2686:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    268a:	98 2f       	mov	r25, r24
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	89 2b       	or	r24, r25
    2690:	89 83       	std	Y+1, r24	; 0x01
			retStatus |= DIO_write(SEVEN_SEG1_PIND_PORT, SEVEN_SEG1_PIND_PIN, GET_PIN_VAL(num, 3));
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	86 95       	lsr	r24
    2696:	86 95       	lsr	r24
    2698:	86 95       	lsr	r24
    269a:	98 2f       	mov	r25, r24
    269c:	91 70       	andi	r25, 0x01	; 1
    269e:	83 e0       	ldi	r24, 0x03	; 3
    26a0:	67 e0       	ldi	r22, 0x07	; 7
    26a2:	49 2f       	mov	r20, r25
    26a4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    26a8:	98 2f       	mov	r25, r24
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	89 2b       	or	r24, r25
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <writeToSevenSegment+0x108>
			break;

		default:
			retStatus = ERROR;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

 return retStatus;
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <writeDecimalPoint>:
 * 			IN: segmentID : the name of the needed seven segments.
 * 			IN: state : the state of decimal point.
 *
 */
static stdReturnType_t writeDecimalPoint(segments_t segmentID, segmentState_t state)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <writeDecimalPoint+0x6>
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <writeDecimalPoint+0x8>
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	8a 83       	std	Y+2, r24	; 0x02
    26d8:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	89 83       	std	Y+1, r24	; 0x01

		switch(segmentID)
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	3d 83       	std	Y+5, r19	; 0x05
    26e6:	2c 83       	std	Y+4, r18	; 0x04
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	9d 81       	ldd	r25, Y+5	; 0x05
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	31 f0       	breq	.+12     	; 0x26fc <writeDecimalPoint+0x34>
    26f0:	2c 81       	ldd	r18, Y+4	; 0x04
    26f2:	3d 81       	ldd	r19, Y+5	; 0x05
    26f4:	21 30       	cpi	r18, 0x01	; 1
    26f6:	31 05       	cpc	r19, r1
    26f8:	41 f0       	breq	.+16     	; 0x270a <writeDecimalPoint+0x42>
    26fa:	0e c0       	rjmp	.+28     	; 0x2718 <writeDecimalPoint+0x50>
		{
			case SEVEN_SEGMENT0:
				retStatus  = DIO_write(SEVEN_SEG0_DB_PORT, SEVEN_SEG0_DB_PIN, state);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	4b 81       	ldd	r20, Y+3	; 0x03
    2702:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	09 c0       	rjmp	.+18     	; 0x271c <writeDecimalPoint+0x54>
				break;

			case SEVEN_SEGMENT1:
				retStatus  = DIO_write(SEVEN_SEG1_DB_PORT, SEVEN_SEG1_DB_PIN, state);
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	4b 81       	ldd	r20, Y+3	; 0x03
    2710:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	02 c0       	rjmp	.+4      	; 0x271c <writeDecimalPoint+0x54>
				break;

			default:
				retStatus = ERROR;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	89 83       	std	Y+1, r24	; 0x01
				break;
		}

	 return retStatus;
    271c:	89 81       	ldd	r24, Y+1	; 0x01
}
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <TurnOnDecimalPoint>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t TurnOnDecimalPoint(segments_t segmentID)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	0f 92       	push	r0
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	89 83       	std	Y+1, r24	; 0x01
	return writeDecimalPoint(segmentID, SEGMENT_ENABLED);
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <writeDecimalPoint>
}
    2742:	0f 90       	pop	r0
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <TurnOffDecimalPoint>:
 * params:
 * 			IN: segmentID : the name of the needed seven segments.
 *
 */
stdReturnType_t TurnOffDecimalPoint(segments_t segmentID)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	0f 92       	push	r0
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	89 83       	std	Y+1, r24	; 0x01
	return writeDecimalPoint(segmentID, SEGMANT_DISABLED);
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <writeDecimalPoint>
}
    275e:	0f 90       	pop	r0
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <initLed>:
 * params:
 * 			IN: ledID : the name of the needed LED.
 *
 */
stdReturnType_t initLed(ledX_t ledID)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <initLed+0x6>
    276c:	00 d0       	rcall	.+0      	; 0x276e <initLed+0x8>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	89 83       	std	Y+1, r24	; 0x01

	switch(ledID)
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	3c 83       	std	Y+4, r19	; 0x04
    2780:	2b 83       	std	Y+3, r18	; 0x03
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	81 30       	cpi	r24, 0x01	; 1
    2788:	91 05       	cpc	r25, r1
    278a:	81 f0       	breq	.+32     	; 0x27ac <initLed+0x46>
    278c:	2b 81       	ldd	r18, Y+3	; 0x03
    278e:	3c 81       	ldd	r19, Y+4	; 0x04
    2790:	22 30       	cpi	r18, 0x02	; 2
    2792:	31 05       	cpc	r19, r1
    2794:	91 f0       	breq	.+36     	; 0x27ba <initLed+0x54>
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	9c 81       	ldd	r25, Y+4	; 0x04
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	a9 f4       	brne	.+42     	; 0x27c8 <initLed+0x62>
	{
		case LED0:
			retStatus = DIO_init(LED0_PORT, LED0_PIN, OUTPUT);
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	65 e0       	ldi	r22, 0x05	; 5
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	10 c0       	rjmp	.+32     	; 0x27cc <initLed+0x66>
			break;

		case LED1:
			retStatus = DIO_init(LED1_PORT, LED1_PIN, OUTPUT);
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	66 e0       	ldi	r22, 0x06	; 6
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	09 c0       	rjmp	.+18     	; 0x27cc <initLed+0x66>
			break;

		case LED2:
			retStatus = DIO_init(LED2_PORT, LED2_PIN, OUTPUT);
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	67 e0       	ldi	r22, 0x07	; 7
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <initLed+0x66>
			break;

		default:
			/* ERROR given ledID is not supported */
			retStatus = ERROR;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <changeLedState>:
 * params:
 * 			IN: ledID : the name of the needed LED.
 * 			IN: pinState : the value of the pin HIGH/LOW.
 */
static stdReturnType_t changeLedState(ledX_t ledID, pinState_t pinState)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <changeLedState+0x6>
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <changeLedState+0x8>
    27e4:	0f 92       	push	r0
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	8a 83       	std	Y+2, r24	; 0x02
    27ec:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	89 83       	std	Y+1, r24	; 0x01

	/*@TODO : check pinState */

	switch(ledID)
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	3d 83       	std	Y+5, r19	; 0x05
    27fa:	2c 83       	std	Y+4, r18	; 0x04
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	91 05       	cpc	r25, r1
    2804:	81 f0       	breq	.+32     	; 0x2826 <changeLedState+0x4a>
    2806:	2c 81       	ldd	r18, Y+4	; 0x04
    2808:	3d 81       	ldd	r19, Y+5	; 0x05
    280a:	22 30       	cpi	r18, 0x02	; 2
    280c:	31 05       	cpc	r19, r1
    280e:	91 f0       	breq	.+36     	; 0x2834 <changeLedState+0x58>
    2810:	8c 81       	ldd	r24, Y+4	; 0x04
    2812:	9d 81       	ldd	r25, Y+5	; 0x05
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	a9 f4       	brne	.+42     	; 0x2842 <changeLedState+0x66>
	{
		case LED0:
			retStatus = DIO_write(LED0_PORT, LED0_PIN, pinState);
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	65 e0       	ldi	r22, 0x05	; 5
    281c:	4b 81       	ldd	r20, Y+3	; 0x03
    281e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	10 c0       	rjmp	.+32     	; 0x2846 <changeLedState+0x6a>
			break;

		case LED1:
			retStatus = DIO_write(LED1_PORT, LED1_PIN, pinState);
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	66 e0       	ldi	r22, 0x06	; 6
    282a:	4b 81       	ldd	r20, Y+3	; 0x03
    282c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <changeLedState+0x6a>
			break;

		case LED2:
			retStatus = DIO_write(LED2_PORT, LED2_PIN, pinState);
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	67 e0       	ldi	r22, 0x07	; 7
    2838:	4b 81       	ldd	r20, Y+3	; 0x03
    283a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	02 c0       	rjmp	.+4      	; 0x2846 <changeLedState+0x6a>
			break;

		default:
			/* ERROR given ledID is not supported */
			retStatus = ERROR;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	89 83       	std	Y+1, r24	; 0x01
			break;
	}


	return retStatus;
    2846:	89 81       	ldd	r24, Y+1	; 0x01
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <turnOnLed>:
 * brief: used to turn given LED ON.
 * params:
 * 			IN: ledID : the name of the needed LED.
 */
stdReturnType_t turnOnLed(ledX_t ledID)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	0f 92       	push	r0
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	89 83       	std	Y+1, r24	; 0x01
	return changeLedState(ledID, PIN_IS_HIGH);
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	0e 94 ee 13 	call	0x27dc	; 0x27dc <changeLedState>
}
    286c:	0f 90       	pop	r0
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <turnOffLed>:
 * brief: used to turn given LED OFF.
 * params:
 * 			IN: ledID : the name of the needed LED.
 */
stdReturnType_t turnOffLed(ledX_t ledID)
{
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	0f 92       	push	r0
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	89 83       	std	Y+1, r24	; 0x01
	return changeLedState(ledID, PIN_IS_LOW);
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	0e 94 ee 13 	call	0x27dc	; 0x27dc <changeLedState>
}
    2888:	0f 90       	pop	r0
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <toogleLed>:

stdReturnType_t toogleLed(ledX_t ledID)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	6e 97       	sbiw	r28, 0x1e	; 30
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	8e 8f       	std	Y+30, r24	; 0x1e
	stdReturnType_t stats = ERROR;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	8d 8f       	std	Y+29, r24	; 0x1d
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e2       	ldi	r26, 0x20	; 32
    28b0:	b1 e4       	ldi	r27, 0x41	; 65
    28b2:	89 8f       	std	Y+25, r24	; 0x19
    28b4:	9a 8f       	std	Y+26, r25	; 0x1a
    28b6:	ab 8f       	std	Y+27, r26	; 0x1b
    28b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	69 8d       	ldd	r22, Y+25	; 0x19
    28bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	55 e4       	ldi	r21, 0x45	; 69
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8d 8b       	std	Y+21, r24	; 0x15
    28d4:	9e 8b       	std	Y+22, r25	; 0x16
    28d6:	af 8b       	std	Y+23, r26	; 0x17
    28d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28da:	6d 89       	ldd	r22, Y+21	; 0x15
    28dc:	7e 89       	ldd	r23, Y+22	; 0x16
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <toogleLed+0x6c>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9c 8b       	std	Y+20, r25	; 0x14
    28f8:	8b 8b       	std	Y+19, r24	; 0x13
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <toogleLed+0xea>
	else if (__tmp > 65535)
    28fc:	6d 89       	ldd	r22, Y+21	; 0x15
    28fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2900:	8f 89       	ldd	r24, Y+23	; 0x17
    2902:	98 8d       	ldd	r25, Y+24	; 0x18
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <toogleLed+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	69 8d       	ldd	r22, Y+25	; 0x19
    2916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	0f c0       	rjmp	.+30     	; 0x295c <toogleLed+0xcc>
    293e:	80 e9       	ldi	r24, 0x90	; 144
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	9a 8b       	std	Y+18, r25	; 0x12
    2944:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2946:	89 89       	ldd	r24, Y+17	; 0x11
    2948:	9a 89       	ldd	r25, Y+18	; 0x12
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <toogleLed+0xba>
    294e:	9a 8b       	std	Y+18, r25	; 0x12
    2950:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8b 89       	ldd	r24, Y+19	; 0x13
    2954:	9c 89       	ldd	r25, Y+20	; 0x14
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <toogleLed+0xae>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <toogleLed+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6d 89       	ldd	r22, Y+21	; 0x15
    2968:	7e 89       	ldd	r23, Y+22	; 0x16
    296a:	8f 89       	ldd	r24, Y+23	; 0x17
    296c:	98 8d       	ldd	r25, Y+24	; 0x18
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9c 8b       	std	Y+20, r25	; 0x14
    2978:	8b 8b       	std	Y+19, r24	; 0x13
    297a:	8b 89       	ldd	r24, Y+19	; 0x13
    297c:	9c 89       	ldd	r25, Y+20	; 0x14
    297e:	98 8b       	std	Y+16, r25	; 0x10
    2980:	8f 87       	std	Y+15, r24	; 0x0f
    2982:	8f 85       	ldd	r24, Y+15	; 0x0f
    2984:	98 89       	ldd	r25, Y+16	; 0x10
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <toogleLed+0xf6>
    298a:	98 8b       	std	Y+16, r25	; 0x10
    298c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	turnOnLed(ledID);
    298e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2990:	0e 94 2c 14 	call	0x2858	; 0x2858 <turnOnLed>
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	a0 e2       	ldi	r26, 0x20	; 32
    299a:	b1 e4       	ldi	r27, 0x41	; 65
    299c:	8b 87       	std	Y+11, r24	; 0x0b
    299e:	9c 87       	std	Y+12, r25	; 0x0c
    29a0:	ad 87       	std	Y+13, r26	; 0x0d
    29a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a e7       	ldi	r20, 0x7A	; 122
    29b2:	55 e4       	ldi	r21, 0x45	; 69
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	8f 83       	std	Y+7, r24	; 0x07
    29be:	98 87       	std	Y+8, r25	; 0x08
    29c0:	a9 87       	std	Y+9, r26	; 0x09
    29c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c4:	6f 81       	ldd	r22, Y+7	; 0x07
    29c6:	78 85       	ldd	r23, Y+8	; 0x08
    29c8:	89 85       	ldd	r24, Y+9	; 0x09
    29ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <toogleLed+0x156>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <toogleLed+0x1d4>
	else if (__tmp > 65535)
    29e6:	6f 81       	ldd	r22, Y+7	; 0x07
    29e8:	78 85       	ldd	r23, Y+8	; 0x08
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <toogleLed+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <toogleLed+0x1b6>
    2a28:	80 e9       	ldi	r24, 0x90	; 144
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	9c 83       	std	Y+4, r25	; 0x04
    2a2e:	8b 83       	std	Y+3, r24	; 0x03
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	9c 81       	ldd	r25, Y+4	; 0x04
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <toogleLed+0x1a4>
    2a38:	9c 83       	std	Y+4, r25	; 0x04
    2a3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9e 83       	std	Y+6, r25	; 0x06
    2a44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8d 81       	ldd	r24, Y+5	; 0x05
    2a48:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <toogleLed+0x198>
    2a4e:	14 c0       	rjmp	.+40     	; 0x2a78 <toogleLed+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	6f 81       	ldd	r22, Y+7	; 0x07
    2a52:	78 85       	ldd	r23, Y+8	; 0x08
    2a54:	89 85       	ldd	r24, Y+9	; 0x09
    2a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9e 83       	std	Y+6, r25	; 0x06
    2a62:	8d 83       	std	Y+5, r24	; 0x05
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	9e 81       	ldd	r25, Y+6	; 0x06
    2a68:	9a 83       	std	Y+2, r25	; 0x02
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <toogleLed+0x1e0>
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
  stats|=	turnOffLed(ledID);
    2a78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a7a:	0e 94 3a 14 	call	0x2874	; 0x2874 <turnOffLed>
    2a7e:	98 2f       	mov	r25, r24
    2a80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a82:	89 2b       	or	r24, r25
    2a84:	8d 8f       	std	Y+29, r24	; 0x1d
	stats = SUCCESS;
    2a86:	1d 8e       	std	Y+29, r1	; 0x1d
	return stats;
    2a88:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2a8a:	6e 96       	adiw	r28, 0x1e	; 30
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <LCD_outToDataLines>:

static stdReturnType_t LCD_sendCommand(u8 command);
static stdReturnType_t LCD_outToDataLines(u8 val);

static stdReturnType_t LCD_outToDataLines(u8 val)
{
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	c4 56       	subi	r28, 0x64	; 100
    2aaa:	d0 40       	sbci	r29, 0x00	; 0
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ec 59       	subi	r30, 0x9C	; 156
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 83       	st	Z, r24
	stdReturnType_t retStatus = ERROR;
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ed 59       	subi	r30, 0x9D	; 157
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	80 83       	st	Z, r24

	/* write data to LCD so RW=0 */
	retStatus = DIO_write(LCD_CTRL_LINES_PORT, LCD_RW_PIN, WRITE_DATA);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	62 e0       	ldi	r22, 0x02	; 2
    2acc:	40 e0       	ldi	r20, 0x00	; 0
    2ace:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ed 59       	subi	r30, 0x9D	; 157
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 83       	st	Z, r24
    2ada:	fe 01       	movw	r30, r28
    2adc:	e1 5a       	subi	r30, 0xA1	; 161
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 e8       	ldi	r26, 0x80	; 128
    2ae6:	bf e3       	ldi	r27, 0x3F	; 63
    2ae8:	80 83       	st	Z, r24
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	a2 83       	std	Z+2, r26	; 0x02
    2aee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	8e 01       	movw	r16, r28
    2af2:	05 5a       	subi	r16, 0xA5	; 165
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	e1 5a       	subi	r30, 0xA1	; 161
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a e7       	ldi	r20, 0x7A	; 122
    2b0a:	55 e4       	ldi	r21, 0x45	; 69
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	f8 01       	movw	r30, r16
    2b16:	80 83       	st	Z, r24
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	a2 83       	std	Z+2, r26	; 0x02
    2b1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e5 5a       	subi	r30, 0xA5	; 165
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e8       	ldi	r20, 0x80	; 128
    2b32:	5f e3       	ldi	r21, 0x3F	; 63
    2b34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b38:	88 23       	and	r24, r24
    2b3a:	44 f4       	brge	.+16     	; 0x2b4c <LCD_outToDataLines+0xb0>
		__ticks = 1;
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e7 5a       	subi	r30, 0xA7	; 167
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	64 c0       	rjmp	.+200    	; 0x2c14 <LCD_outToDataLines+0x178>
	else if (__tmp > 65535)
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e5 5a       	subi	r30, 0xA5	; 165
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	3f ef       	ldi	r19, 0xFF	; 255
    2b5e:	4f e7       	ldi	r20, 0x7F	; 127
    2b60:	57 e4       	ldi	r21, 0x47	; 71
    2b62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b66:	18 16       	cp	r1, r24
    2b68:	0c f0       	brlt	.+2      	; 0x2b6c <LCD_outToDataLines+0xd0>
    2b6a:	43 c0       	rjmp	.+134    	; 0x2bf2 <LCD_outToDataLines+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e1 5a       	subi	r30, 0xA1	; 161
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	60 81       	ld	r22, Z
    2b74:	71 81       	ldd	r23, Z+1	; 0x01
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	93 81       	ldd	r25, Z+3	; 0x03
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e2       	ldi	r20, 0x20	; 32
    2b80:	51 e4       	ldi	r21, 0x41	; 65
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	8e 01       	movw	r16, r28
    2b8c:	07 5a       	subi	r16, 0xA7	; 167
    2b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	f8 01       	movw	r30, r16
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
    2ba2:	1f c0       	rjmp	.+62     	; 0x2be2 <LCD_outToDataLines+0x146>
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e9 5a       	subi	r30, 0xA9	; 169
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 e9       	ldi	r24, 0x90	; 144
    2bac:	91 e0       	ldi	r25, 0x01	; 1
    2bae:	91 83       	std	Z+1, r25	; 0x01
    2bb0:	80 83       	st	Z, r24
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e9 5a       	subi	r30, 0xA9	; 169
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <LCD_outToDataLines+0x120>
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e9 5a       	subi	r30, 0xA9	; 169
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bca:	de 01       	movw	r26, r28
    2bcc:	a7 5a       	subi	r26, 0xA7	; 167
    2bce:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e7 5a       	subi	r30, 0xA7	; 167
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	11 96       	adiw	r26, 0x01	; 1
    2bde:	9c 93       	st	X, r25
    2be0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	fe 01       	movw	r30, r28
    2be4:	e7 5a       	subi	r30, 0xA7	; 167
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	91 81       	ldd	r25, Z+1	; 0x01
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	d1 f6       	brne	.-76     	; 0x2ba4 <LCD_outToDataLines+0x108>
    2bf0:	27 c0       	rjmp	.+78     	; 0x2c40 <LCD_outToDataLines+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	8e 01       	movw	r16, r28
    2bf4:	07 5a       	subi	r16, 0xA7	; 167
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e5 5a       	subi	r30, 0xA5	; 165
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	f8 01       	movw	r30, r16
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	80 83       	st	Z, r24
    2c14:	de 01       	movw	r26, r28
    2c16:	ab 5a       	subi	r26, 0xAB	; 171
    2c18:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e7 5a       	subi	r30, 0xA7	; 167
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	91 81       	ldd	r25, Z+1	; 0x01
    2c24:	8d 93       	st	X+, r24
    2c26:	9c 93       	st	X, r25
    2c28:	fe 01       	movw	r30, r28
    2c2a:	eb 5a       	subi	r30, 0xAB	; 171
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <LCD_outToDataLines+0x196>
    2c36:	fe 01       	movw	r30, r28
    2c38:	eb 5a       	subi	r30, 0xAB	; 171
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	/* Enable LCD E=1 */
	retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, ENABLE_LCD);
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	63 e0       	ldi	r22, 0x03	; 3
    2c44:	41 e0       	ldi	r20, 0x01	; 1
    2c46:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2c4a:	98 2f       	mov	r25, r24
    2c4c:	de 01       	movw	r26, r28
    2c4e:	ad 59       	subi	r26, 0x9D	; 157
    2c50:	bf 4f       	sbci	r27, 0xFF	; 255
    2c52:	fe 01       	movw	r30, r28
    2c54:	ed 59       	subi	r30, 0x9D	; 157
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	89 2b       	or	r24, r25
    2c5c:	8c 93       	st	X, r24
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ef 5a       	subi	r30, 0xAF	; 175
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	a0 e8       	ldi	r26, 0x80	; 128
    2c6a:	bf e3       	ldi	r27, 0x3F	; 63
    2c6c:	80 83       	st	Z, r24
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	a2 83       	std	Z+2, r26	; 0x02
    2c72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c74:	8e 01       	movw	r16, r28
    2c76:	03 5b       	subi	r16, 0xB3	; 179
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ef 5a       	subi	r30, 0xAF	; 175
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	93 81       	ldd	r25, Z+3	; 0x03
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4a e7       	ldi	r20, 0x7A	; 122
    2c8e:	55 e4       	ldi	r21, 0x45	; 69
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	f8 01       	movw	r30, r16
    2c9a:	80 83       	st	Z, r24
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	a2 83       	std	Z+2, r26	; 0x02
    2ca0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e3 5b       	subi	r30, 0xB3	; 179
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	60 81       	ld	r22, Z
    2caa:	71 81       	ldd	r23, Z+1	; 0x01
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	44 f4       	brge	.+16     	; 0x2cd0 <LCD_outToDataLines+0x234>
		__ticks = 1;
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	e5 5b       	subi	r30, 0xB5	; 181
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	80 83       	st	Z, r24
    2cce:	64 c0       	rjmp	.+200    	; 0x2d98 <LCD_outToDataLines+0x2fc>
	else if (__tmp > 65535)
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e3 5b       	subi	r30, 0xB3	; 179
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	3f ef       	ldi	r19, 0xFF	; 255
    2ce2:	4f e7       	ldi	r20, 0x7F	; 127
    2ce4:	57 e4       	ldi	r21, 0x47	; 71
    2ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cea:	18 16       	cp	r1, r24
    2cec:	0c f0       	brlt	.+2      	; 0x2cf0 <LCD_outToDataLines+0x254>
    2cee:	43 c0       	rjmp	.+134    	; 0x2d76 <LCD_outToDataLines+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ef 5a       	subi	r30, 0xAF	; 175
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	8e 01       	movw	r16, r28
    2d10:	05 5b       	subi	r16, 0xB5	; 181
    2d12:	1f 4f       	sbci	r17, 0xFF	; 255
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	f8 01       	movw	r30, r16
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	1f c0       	rjmp	.+62     	; 0x2d66 <LCD_outToDataLines+0x2ca>
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e7 5b       	subi	r30, 0xB7	; 183
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 e9       	ldi	r24, 0x90	; 144
    2d30:	91 e0       	ldi	r25, 0x01	; 1
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	fe 01       	movw	r30, r28
    2d38:	e7 5b       	subi	r30, 0xB7	; 183
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <LCD_outToDataLines+0x2a4>
    2d44:	fe 01       	movw	r30, r28
    2d46:	e7 5b       	subi	r30, 0xB7	; 183
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4e:	de 01       	movw	r26, r28
    2d50:	a5 5b       	subi	r26, 0xB5	; 181
    2d52:	bf 4f       	sbci	r27, 0xFF	; 255
    2d54:	fe 01       	movw	r30, r28
    2d56:	e5 5b       	subi	r30, 0xB5	; 181
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	11 96       	adiw	r26, 0x01	; 1
    2d62:	9c 93       	st	X, r25
    2d64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	fe 01       	movw	r30, r28
    2d68:	e5 5b       	subi	r30, 0xB5	; 181
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	d1 f6       	brne	.-76     	; 0x2d28 <LCD_outToDataLines+0x28c>
    2d74:	27 c0       	rjmp	.+78     	; 0x2dc4 <LCD_outToDataLines+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	8e 01       	movw	r16, r28
    2d78:	05 5b       	subi	r16, 0xB5	; 181
    2d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e3 5b       	subi	r30, 0xB3	; 179
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	f8 01       	movw	r30, r16
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	80 83       	st	Z, r24
    2d98:	de 01       	movw	r26, r28
    2d9a:	a9 5b       	subi	r26, 0xB9	; 185
    2d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e5 5b       	subi	r30, 0xB5	; 181
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	8d 93       	st	X+, r24
    2daa:	9c 93       	st	X, r25
    2dac:	fe 01       	movw	r30, r28
    2dae:	e9 5b       	subi	r30, 0xB9	; 185
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <LCD_outToDataLines+0x31a>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e9 5b       	subi	r30, 0xB9	; 185
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	 #if (LCD_DATA_BITS_MODE == 4)
		/* First output the highest 4 bits of the required command to the data bus D4:D7 */
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB4_PIN, (pinState_t)GET_BIT(val,4));
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	ec 59       	subi	r30, 0x9C	; 156
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	82 95       	swap	r24
    2dce:	8f 70       	andi	r24, 0x0F	; 15
    2dd0:	98 2f       	mov	r25, r24
    2dd2:	91 70       	andi	r25, 0x01	; 1
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	64 e0       	ldi	r22, 0x04	; 4
    2dd8:	49 2f       	mov	r20, r25
    2dda:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2dde:	98 2f       	mov	r25, r24
    2de0:	de 01       	movw	r26, r28
    2de2:	ad 59       	subi	r26, 0x9D	; 157
    2de4:	bf 4f       	sbci	r27, 0xFF	; 255
    2de6:	fe 01       	movw	r30, r28
    2de8:	ed 59       	subi	r30, 0x9D	; 157
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	89 2b       	or	r24, r25
    2df0:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB5_PIN, (pinState_t)GET_BIT(val,5));
    2df2:	fe 01       	movw	r30, r28
    2df4:	ec 59       	subi	r30, 0x9C	; 156
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	82 95       	swap	r24
    2dfc:	86 95       	lsr	r24
    2dfe:	87 70       	andi	r24, 0x07	; 7
    2e00:	98 2f       	mov	r25, r24
    2e02:	91 70       	andi	r25, 0x01	; 1
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	65 e0       	ldi	r22, 0x05	; 5
    2e08:	49 2f       	mov	r20, r25
    2e0a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2e0e:	98 2f       	mov	r25, r24
    2e10:	de 01       	movw	r26, r28
    2e12:	ad 59       	subi	r26, 0x9D	; 157
    2e14:	bf 4f       	sbci	r27, 0xFF	; 255
    2e16:	fe 01       	movw	r30, r28
    2e18:	ed 59       	subi	r30, 0x9D	; 157
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	89 2b       	or	r24, r25
    2e20:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB6_PIN, (pinState_t)GET_BIT(val,6));
    2e22:	fe 01       	movw	r30, r28
    2e24:	ec 59       	subi	r30, 0x9C	; 156
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	80 81       	ld	r24, Z
    2e2a:	82 95       	swap	r24
    2e2c:	86 95       	lsr	r24
    2e2e:	86 95       	lsr	r24
    2e30:	83 70       	andi	r24, 0x03	; 3
    2e32:	98 2f       	mov	r25, r24
    2e34:	91 70       	andi	r25, 0x01	; 1
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	66 e0       	ldi	r22, 0x06	; 6
    2e3a:	49 2f       	mov	r20, r25
    2e3c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2e40:	98 2f       	mov	r25, r24
    2e42:	de 01       	movw	r26, r28
    2e44:	ad 59       	subi	r26, 0x9D	; 157
    2e46:	bf 4f       	sbci	r27, 0xFF	; 255
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ed 59       	subi	r30, 0x9D	; 157
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 81       	ld	r24, Z
    2e50:	89 2b       	or	r24, r25
    2e52:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB7_PIN, (pinState_t)GET_BIT(val,7));
    2e54:	fe 01       	movw	r30, r28
    2e56:	ec 59       	subi	r30, 0x9C	; 156
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 81       	ld	r24, Z
    2e5c:	98 2f       	mov	r25, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	99 27       	eor	r25, r25
    2e62:	99 1f       	adc	r25, r25
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	67 e0       	ldi	r22, 0x07	; 7
    2e68:	49 2f       	mov	r20, r25
    2e6a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2e6e:	98 2f       	mov	r25, r24
    2e70:	de 01       	movw	r26, r28
    2e72:	ad 59       	subi	r26, 0x9D	; 157
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	ed 59       	subi	r30, 0x9D	; 157
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	89 2b       	or	r24, r25
    2e80:	8c 93       	st	X, r24
    2e82:	fe 01       	movw	r30, r28
    2e84:	ed 5b       	subi	r30, 0xBD	; 189
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e8       	ldi	r26, 0x80	; 128
    2e8e:	bf e3       	ldi	r27, 0x3F	; 63
    2e90:	80 83       	st	Z, r24
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	a2 83       	std	Z+2, r26	; 0x02
    2e96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	8e 01       	movw	r16, r28
    2e9a:	01 5c       	subi	r16, 0xC1	; 193
    2e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	ed 5b       	subi	r30, 0xBD	; 189
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4a e7       	ldi	r20, 0x7A	; 122
    2eb2:	55 e4       	ldi	r21, 0x45	; 69
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	80 83       	st	Z, r24
    2ec0:	91 83       	std	Z+1, r25	; 0x01
    2ec2:	a2 83       	std	Z+2, r26	; 0x02
    2ec4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	ff 96       	adiw	r30, 0x3f	; 63
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e8       	ldi	r20, 0x80	; 128
    2ed8:	5f e3       	ldi	r21, 0x3F	; 63
    2eda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ede:	88 23       	and	r24, r24
    2ee0:	2c f4       	brge	.+10     	; 0x2eec <LCD_outToDataLines+0x450>
		__ticks = 1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	9e af       	std	Y+62, r25	; 0x3e
    2ee8:	8d af       	std	Y+61, r24	; 0x3d
    2eea:	46 c0       	rjmp	.+140    	; 0x2f78 <LCD_outToDataLines+0x4dc>
	else if (__tmp > 65535)
    2eec:	fe 01       	movw	r30, r28
    2eee:	ff 96       	adiw	r30, 0x3f	; 63
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	3f ef       	ldi	r19, 0xFF	; 255
    2efc:	4f e7       	ldi	r20, 0x7F	; 127
    2efe:	57 e4       	ldi	r21, 0x47	; 71
    2f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f04:	18 16       	cp	r1, r24
    2f06:	64 f5       	brge	.+88     	; 0x2f60 <LCD_outToDataLines+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ed 5b       	subi	r30, 0xBD	; 189
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	40 e2       	ldi	r20, 0x20	; 32
    2f1c:	51 e4       	ldi	r21, 0x41	; 65
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9e af       	std	Y+62, r25	; 0x3e
    2f34:	8d af       	std	Y+61, r24	; 0x3d
    2f36:	0f c0       	rjmp	.+30     	; 0x2f56 <LCD_outToDataLines+0x4ba>
    2f38:	80 e9       	ldi	r24, 0x90	; 144
    2f3a:	91 e0       	ldi	r25, 0x01	; 1
    2f3c:	9c af       	std	Y+60, r25	; 0x3c
    2f3e:	8b af       	std	Y+59, r24	; 0x3b
    2f40:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f42:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LCD_outToDataLines+0x4a8>
    2f48:	9c af       	std	Y+60, r25	; 0x3c
    2f4a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	9e af       	std	Y+62, r25	; 0x3e
    2f54:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f56:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f58:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	69 f7       	brne	.-38     	; 0x2f38 <LCD_outToDataLines+0x49c>
    2f5e:	16 c0       	rjmp	.+44     	; 0x2f8c <LCD_outToDataLines+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f60:	fe 01       	movw	r30, r28
    2f62:	ff 96       	adiw	r30, 0x3f	; 63
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	9e af       	std	Y+62, r25	; 0x3e
    2f76:	8d af       	std	Y+61, r24	; 0x3d
    2f78:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f7c:	9a af       	std	Y+58, r25	; 0x3a
    2f7e:	89 af       	std	Y+57, r24	; 0x39
    2f80:	89 ad       	ldd	r24, Y+57	; 0x39
    2f82:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <LCD_outToDataLines+0x4e8>
    2f88:	9a af       	std	Y+58, r25	; 0x3a
    2f8a:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		/* disable LCD E=0 */
		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	63 e0       	ldi	r22, 0x03	; 3
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    2f96:	98 2f       	mov	r25, r24
    2f98:	de 01       	movw	r26, r28
    2f9a:	ad 59       	subi	r26, 0x9D	; 157
    2f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	ed 59       	subi	r30, 0x9D	; 157
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 81       	ld	r24, Z
    2fa6:	89 2b       	or	r24, r25
    2fa8:	8c 93       	st	X, r24
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 e2       	ldi	r26, 0x20	; 32
    2fb0:	b1 e4       	ldi	r27, 0x41	; 65
    2fb2:	8d ab       	std	Y+53, r24	; 0x35
    2fb4:	9e ab       	std	Y+54, r25	; 0x36
    2fb6:	af ab       	std	Y+55, r26	; 0x37
    2fb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	6d a9       	ldd	r22, Y+53	; 0x35
    2fbc:	7e a9       	ldd	r23, Y+54	; 0x36
    2fbe:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4a e7       	ldi	r20, 0x7A	; 122
    2fc8:	55 e4       	ldi	r21, 0x45	; 69
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	89 ab       	std	Y+49, r24	; 0x31
    2fd4:	9a ab       	std	Y+50, r25	; 0x32
    2fd6:	ab ab       	std	Y+51, r26	; 0x33
    2fd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fda:	69 a9       	ldd	r22, Y+49	; 0x31
    2fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fde:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e8       	ldi	r20, 0x80	; 128
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fee:	88 23       	and	r24, r24
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <LCD_outToDataLines+0x560>
		__ticks = 1;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	98 ab       	std	Y+48, r25	; 0x30
    2ff8:	8f a7       	std	Y+47, r24	; 0x2f
    2ffa:	3f c0       	rjmp	.+126    	; 0x307a <LCD_outToDataLines+0x5de>
	else if (__tmp > 65535)
    2ffc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ffe:	7a a9       	ldd	r23, Y+50	; 0x32
    3000:	8b a9       	ldd	r24, Y+51	; 0x33
    3002:	9c a9       	ldd	r25, Y+52	; 0x34
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	3f ef       	ldi	r19, 0xFF	; 255
    3008:	4f e7       	ldi	r20, 0x7F	; 127
    300a:	57 e4       	ldi	r21, 0x47	; 71
    300c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3010:	18 16       	cp	r1, r24
    3012:	4c f5       	brge	.+82     	; 0x3066 <LCD_outToDataLines+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3014:	6d a9       	ldd	r22, Y+53	; 0x35
    3016:	7e a9       	ldd	r23, Y+54	; 0x36
    3018:	8f a9       	ldd	r24, Y+55	; 0x37
    301a:	98 ad       	ldd	r25, Y+56	; 0x38
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e2       	ldi	r20, 0x20	; 32
    3022:	51 e4       	ldi	r21, 0x41	; 65
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	98 ab       	std	Y+48, r25	; 0x30
    303a:	8f a7       	std	Y+47, r24	; 0x2f
    303c:	0f c0       	rjmp	.+30     	; 0x305c <LCD_outToDataLines+0x5c0>
    303e:	80 e9       	ldi	r24, 0x90	; 144
    3040:	91 e0       	ldi	r25, 0x01	; 1
    3042:	9e a7       	std	Y+46, r25	; 0x2e
    3044:	8d a7       	std	Y+45, r24	; 0x2d
    3046:	8d a5       	ldd	r24, Y+45	; 0x2d
    3048:	9e a5       	ldd	r25, Y+46	; 0x2e
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <LCD_outToDataLines+0x5ae>
    304e:	9e a7       	std	Y+46, r25	; 0x2e
    3050:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	8f a5       	ldd	r24, Y+47	; 0x2f
    3054:	98 a9       	ldd	r25, Y+48	; 0x30
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	98 ab       	std	Y+48, r25	; 0x30
    305a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305c:	8f a5       	ldd	r24, Y+47	; 0x2f
    305e:	98 a9       	ldd	r25, Y+48	; 0x30
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	69 f7       	brne	.-38     	; 0x303e <LCD_outToDataLines+0x5a2>
    3064:	14 c0       	rjmp	.+40     	; 0x308e <LCD_outToDataLines+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3066:	69 a9       	ldd	r22, Y+49	; 0x31
    3068:	7a a9       	ldd	r23, Y+50	; 0x32
    306a:	8b a9       	ldd	r24, Y+51	; 0x33
    306c:	9c a9       	ldd	r25, Y+52	; 0x34
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	98 ab       	std	Y+48, r25	; 0x30
    3078:	8f a7       	std	Y+47, r24	; 0x2f
    307a:	8f a5       	ldd	r24, Y+47	; 0x2f
    307c:	98 a9       	ldd	r25, Y+48	; 0x30
    307e:	9c a7       	std	Y+44, r25	; 0x2c
    3080:	8b a7       	std	Y+43, r24	; 0x2b
    3082:	8b a5       	ldd	r24, Y+43	; 0x2b
    3084:	9c a5       	ldd	r25, Y+44	; 0x2c
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <LCD_outToDataLines+0x5ea>
    308a:	9c a7       	std	Y+44, r25	; 0x2c
    308c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10); /* delay for processing Th = 13ns */

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, ENABLE_LCD); /* Enable LCD E=1 */
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	63 e0       	ldi	r22, 0x03	; 3
    3092:	41 e0       	ldi	r20, 0x01	; 1
    3094:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    3098:	98 2f       	mov	r25, r24
    309a:	de 01       	movw	r26, r28
    309c:	ad 59       	subi	r26, 0x9D	; 157
    309e:	bf 4f       	sbci	r27, 0xFF	; 255
    30a0:	fe 01       	movw	r30, r28
    30a2:	ed 59       	subi	r30, 0x9D	; 157
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	89 2b       	or	r24, r25
    30aa:	8c 93       	st	X, r24
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	a0 e8       	ldi	r26, 0x80	; 128
    30b2:	bf e3       	ldi	r27, 0x3F	; 63
    30b4:	8f a3       	std	Y+39, r24	; 0x27
    30b6:	98 a7       	std	Y+40, r25	; 0x28
    30b8:	a9 a7       	std	Y+41, r26	; 0x29
    30ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30bc:	6f a1       	ldd	r22, Y+39	; 0x27
    30be:	78 a5       	ldd	r23, Y+40	; 0x28
    30c0:	89 a5       	ldd	r24, Y+41	; 0x29
    30c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	4a e7       	ldi	r20, 0x7A	; 122
    30ca:	55 e4       	ldi	r21, 0x45	; 69
    30cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	8b a3       	std	Y+35, r24	; 0x23
    30d6:	9c a3       	std	Y+36, r25	; 0x24
    30d8:	ad a3       	std	Y+37, r26	; 0x25
    30da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30dc:	6b a1       	ldd	r22, Y+35	; 0x23
    30de:	7c a1       	ldd	r23, Y+36	; 0x24
    30e0:	8d a1       	ldd	r24, Y+37	; 0x25
    30e2:	9e a1       	ldd	r25, Y+38	; 0x26
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e8       	ldi	r20, 0x80	; 128
    30ea:	5f e3       	ldi	r21, 0x3F	; 63
    30ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30f0:	88 23       	and	r24, r24
    30f2:	2c f4       	brge	.+10     	; 0x30fe <LCD_outToDataLines+0x662>
		__ticks = 1;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9a a3       	std	Y+34, r25	; 0x22
    30fa:	89 a3       	std	Y+33, r24	; 0x21
    30fc:	3f c0       	rjmp	.+126    	; 0x317c <LCD_outToDataLines+0x6e0>
	else if (__tmp > 65535)
    30fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3100:	7c a1       	ldd	r23, Y+36	; 0x24
    3102:	8d a1       	ldd	r24, Y+37	; 0x25
    3104:	9e a1       	ldd	r25, Y+38	; 0x26
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	3f ef       	ldi	r19, 0xFF	; 255
    310a:	4f e7       	ldi	r20, 0x7F	; 127
    310c:	57 e4       	ldi	r21, 0x47	; 71
    310e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3112:	18 16       	cp	r1, r24
    3114:	4c f5       	brge	.+82     	; 0x3168 <LCD_outToDataLines+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3116:	6f a1       	ldd	r22, Y+39	; 0x27
    3118:	78 a5       	ldd	r23, Y+40	; 0x28
    311a:	89 a5       	ldd	r24, Y+41	; 0x29
    311c:	9a a5       	ldd	r25, Y+42	; 0x2a
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e2       	ldi	r20, 0x20	; 32
    3124:	51 e4       	ldi	r21, 0x41	; 65
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	bc 01       	movw	r22, r24
    3130:	cd 01       	movw	r24, r26
    3132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	9a a3       	std	Y+34, r25	; 0x22
    313c:	89 a3       	std	Y+33, r24	; 0x21
    313e:	0f c0       	rjmp	.+30     	; 0x315e <LCD_outToDataLines+0x6c2>
    3140:	80 e9       	ldi	r24, 0x90	; 144
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	98 a3       	std	Y+32, r25	; 0x20
    3146:	8f 8f       	std	Y+31, r24	; 0x1f
    3148:	8f 8d       	ldd	r24, Y+31	; 0x1f
    314a:	98 a1       	ldd	r25, Y+32	; 0x20
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	f1 f7       	brne	.-4      	; 0x314c <LCD_outToDataLines+0x6b0>
    3150:	98 a3       	std	Y+32, r25	; 0x20
    3152:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3154:	89 a1       	ldd	r24, Y+33	; 0x21
    3156:	9a a1       	ldd	r25, Y+34	; 0x22
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	9a a3       	std	Y+34, r25	; 0x22
    315c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315e:	89 a1       	ldd	r24, Y+33	; 0x21
    3160:	9a a1       	ldd	r25, Y+34	; 0x22
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	69 f7       	brne	.-38     	; 0x3140 <LCD_outToDataLines+0x6a4>
    3166:	14 c0       	rjmp	.+40     	; 0x3190 <LCD_outToDataLines+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3168:	6b a1       	ldd	r22, Y+35	; 0x23
    316a:	7c a1       	ldd	r23, Y+36	; 0x24
    316c:	8d a1       	ldd	r24, Y+37	; 0x25
    316e:	9e a1       	ldd	r25, Y+38	; 0x26
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	9a a3       	std	Y+34, r25	; 0x22
    317a:	89 a3       	std	Y+33, r24	; 0x21
    317c:	89 a1       	ldd	r24, Y+33	; 0x21
    317e:	9a a1       	ldd	r25, Y+34	; 0x22
    3180:	9e 8f       	std	Y+30, r25	; 0x1e
    3182:	8d 8f       	std	Y+29, r24	; 0x1d
    3184:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3186:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <LCD_outToDataLines+0x6ec>
    318c:	9e 8f       	std	Y+30, r25	; 0x1e
    318e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		/* Secondly output the lowest 4 bits of the required command to the data bus D4:D7 */
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB4_PIN, (pinState_t)GET_BIT(val,0));
    3190:	fe 01       	movw	r30, r28
    3192:	ec 59       	subi	r30, 0x9C	; 156
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 81       	ld	r24, Z
    3198:	98 2f       	mov	r25, r24
    319a:	91 70       	andi	r25, 0x01	; 1
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	64 e0       	ldi	r22, 0x04	; 4
    31a0:	49 2f       	mov	r20, r25
    31a2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    31a6:	98 2f       	mov	r25, r24
    31a8:	de 01       	movw	r26, r28
    31aa:	ad 59       	subi	r26, 0x9D	; 157
    31ac:	bf 4f       	sbci	r27, 0xFF	; 255
    31ae:	fe 01       	movw	r30, r28
    31b0:	ed 59       	subi	r30, 0x9D	; 157
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	80 81       	ld	r24, Z
    31b6:	89 2b       	or	r24, r25
    31b8:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB5_PIN, (pinState_t)GET_BIT(val,1));
    31ba:	fe 01       	movw	r30, r28
    31bc:	ec 59       	subi	r30, 0x9C	; 156
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	86 95       	lsr	r24
    31c4:	98 2f       	mov	r25, r24
    31c6:	91 70       	andi	r25, 0x01	; 1
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	65 e0       	ldi	r22, 0x05	; 5
    31cc:	49 2f       	mov	r20, r25
    31ce:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    31d2:	98 2f       	mov	r25, r24
    31d4:	de 01       	movw	r26, r28
    31d6:	ad 59       	subi	r26, 0x9D	; 157
    31d8:	bf 4f       	sbci	r27, 0xFF	; 255
    31da:	fe 01       	movw	r30, r28
    31dc:	ed 59       	subi	r30, 0x9D	; 157
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 81       	ld	r24, Z
    31e2:	89 2b       	or	r24, r25
    31e4:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB6_PIN, (pinState_t)GET_BIT(val,2));
    31e6:	fe 01       	movw	r30, r28
    31e8:	ec 59       	subi	r30, 0x9C	; 156
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	80 81       	ld	r24, Z
    31ee:	86 95       	lsr	r24
    31f0:	86 95       	lsr	r24
    31f2:	98 2f       	mov	r25, r24
    31f4:	91 70       	andi	r25, 0x01	; 1
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	66 e0       	ldi	r22, 0x06	; 6
    31fa:	49 2f       	mov	r20, r25
    31fc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    3200:	98 2f       	mov	r25, r24
    3202:	de 01       	movw	r26, r28
    3204:	ad 59       	subi	r26, 0x9D	; 157
    3206:	bf 4f       	sbci	r27, 0xFF	; 255
    3208:	fe 01       	movw	r30, r28
    320a:	ed 59       	subi	r30, 0x9D	; 157
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	80 81       	ld	r24, Z
    3210:	89 2b       	or	r24, r25
    3212:	8c 93       	st	X, r24
		retStatus |= DIO_write(LCD_DATA_LINES_PORT, LCD_DB7_PIN, (pinState_t)GET_BIT(val,3));
    3214:	fe 01       	movw	r30, r28
    3216:	ec 59       	subi	r30, 0x9C	; 156
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	86 95       	lsr	r24
    321e:	86 95       	lsr	r24
    3220:	86 95       	lsr	r24
    3222:	98 2f       	mov	r25, r24
    3224:	91 70       	andi	r25, 0x01	; 1
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	67 e0       	ldi	r22, 0x07	; 7
    322a:	49 2f       	mov	r20, r25
    322c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    3230:	98 2f       	mov	r25, r24
    3232:	de 01       	movw	r26, r28
    3234:	ad 59       	subi	r26, 0x9D	; 157
    3236:	bf 4f       	sbci	r27, 0xFF	; 255
    3238:	fe 01       	movw	r30, r28
    323a:	ed 59       	subi	r30, 0x9D	; 157
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 81       	ld	r24, Z
    3240:	89 2b       	or	r24, r25
    3242:	8c 93       	st	X, r24
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	a0 e8       	ldi	r26, 0x80	; 128
    324a:	bf e3       	ldi	r27, 0x3F	; 63
    324c:	89 8f       	std	Y+25, r24	; 0x19
    324e:	9a 8f       	std	Y+26, r25	; 0x1a
    3250:	ab 8f       	std	Y+27, r26	; 0x1b
    3252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3254:	69 8d       	ldd	r22, Y+25	; 0x19
    3256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	4a e7       	ldi	r20, 0x7A	; 122
    3262:	55 e4       	ldi	r21, 0x45	; 69
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	8d 8b       	std	Y+21, r24	; 0x15
    326e:	9e 8b       	std	Y+22, r25	; 0x16
    3270:	af 8b       	std	Y+23, r26	; 0x17
    3272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e8       	ldi	r20, 0x80	; 128
    3282:	5f e3       	ldi	r21, 0x3F	; 63
    3284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3288:	88 23       	and	r24, r24
    328a:	2c f4       	brge	.+10     	; 0x3296 <LCD_outToDataLines+0x7fa>
		__ticks = 1;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	3f c0       	rjmp	.+126    	; 0x3314 <LCD_outToDataLines+0x878>
	else if (__tmp > 65535)
    3296:	6d 89       	ldd	r22, Y+21	; 0x15
    3298:	7e 89       	ldd	r23, Y+22	; 0x16
    329a:	8f 89       	ldd	r24, Y+23	; 0x17
    329c:	98 8d       	ldd	r25, Y+24	; 0x18
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	3f ef       	ldi	r19, 0xFF	; 255
    32a2:	4f e7       	ldi	r20, 0x7F	; 127
    32a4:	57 e4       	ldi	r21, 0x47	; 71
    32a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32aa:	18 16       	cp	r1, r24
    32ac:	4c f5       	brge	.+82     	; 0x3300 <LCD_outToDataLines+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	69 8d       	ldd	r22, Y+25	; 0x19
    32b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e2       	ldi	r20, 0x20	; 32
    32bc:	51 e4       	ldi	r21, 0x41	; 65
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	0f c0       	rjmp	.+30     	; 0x32f6 <LCD_outToDataLines+0x85a>
    32d8:	80 e9       	ldi	r24, 0x90	; 144
    32da:	91 e0       	ldi	r25, 0x01	; 1
    32dc:	9a 8b       	std	Y+18, r25	; 0x12
    32de:	89 8b       	std	Y+17, r24	; 0x11
    32e0:	89 89       	ldd	r24, Y+17	; 0x11
    32e2:	9a 89       	ldd	r25, Y+18	; 0x12
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <LCD_outToDataLines+0x848>
    32e8:	9a 8b       	std	Y+18, r25	; 0x12
    32ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ec:	8b 89       	ldd	r24, Y+19	; 0x13
    32ee:	9c 89       	ldd	r25, Y+20	; 0x14
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	9c 8b       	std	Y+20, r25	; 0x14
    32f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f6:	8b 89       	ldd	r24, Y+19	; 0x13
    32f8:	9c 89       	ldd	r25, Y+20	; 0x14
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	69 f7       	brne	.-38     	; 0x32d8 <LCD_outToDataLines+0x83c>
    32fe:	14 c0       	rjmp	.+40     	; 0x3328 <LCD_outToDataLines+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3300:	6d 89       	ldd	r22, Y+21	; 0x15
    3302:	7e 89       	ldd	r23, Y+22	; 0x16
    3304:	8f 89       	ldd	r24, Y+23	; 0x17
    3306:	98 8d       	ldd	r25, Y+24	; 0x18
    3308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	9c 8b       	std	Y+20, r25	; 0x14
    3312:	8b 8b       	std	Y+19, r24	; 0x13
    3314:	8b 89       	ldd	r24, Y+19	; 0x13
    3316:	9c 89       	ldd	r25, Y+20	; 0x14
    3318:	98 8b       	std	Y+16, r25	; 0x10
    331a:	8f 87       	std	Y+15, r24	; 0x0f
    331c:	8f 85       	ldd	r24, Y+15	; 0x0f
    331e:	98 89       	ldd	r25, Y+16	; 0x10
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <LCD_outToDataLines+0x884>
    3324:	98 8b       	std	Y+16, r25	; 0x10
    3326:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD); /* disable LCD E=0 */
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	63 e0       	ldi	r22, 0x03	; 3
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    3332:	98 2f       	mov	r25, r24
    3334:	de 01       	movw	r26, r28
    3336:	ad 59       	subi	r26, 0x9D	; 157
    3338:	bf 4f       	sbci	r27, 0xFF	; 255
    333a:	fe 01       	movw	r30, r28
    333c:	ed 59       	subi	r30, 0x9D	; 157
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	80 81       	ld	r24, Z
    3342:	89 2b       	or	r24, r25
    3344:	8c 93       	st	X, r24
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	a0 e8       	ldi	r26, 0x80	; 128
    334c:	bf e3       	ldi	r27, 0x3F	; 63
    334e:	8b 87       	std	Y+11, r24	; 0x0b
    3350:	9c 87       	std	Y+12, r25	; 0x0c
    3352:	ad 87       	std	Y+13, r26	; 0x0d
    3354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3356:	6b 85       	ldd	r22, Y+11	; 0x0b
    3358:	7c 85       	ldd	r23, Y+12	; 0x0c
    335a:	8d 85       	ldd	r24, Y+13	; 0x0d
    335c:	9e 85       	ldd	r25, Y+14	; 0x0e
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	4a e7       	ldi	r20, 0x7A	; 122
    3364:	55 e4       	ldi	r21, 0x45	; 69
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	8f 83       	std	Y+7, r24	; 0x07
    3370:	98 87       	std	Y+8, r25	; 0x08
    3372:	a9 87       	std	Y+9, r26	; 0x09
    3374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3376:	6f 81       	ldd	r22, Y+7	; 0x07
    3378:	78 85       	ldd	r23, Y+8	; 0x08
    337a:	89 85       	ldd	r24, Y+9	; 0x09
    337c:	9a 85       	ldd	r25, Y+10	; 0x0a
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e8       	ldi	r20, 0x80	; 128
    3384:	5f e3       	ldi	r21, 0x3F	; 63
    3386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    338a:	88 23       	and	r24, r24
    338c:	2c f4       	brge	.+10     	; 0x3398 <LCD_outToDataLines+0x8fc>
		__ticks = 1;
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
    3396:	3f c0       	rjmp	.+126    	; 0x3416 <LCD_outToDataLines+0x97a>
	else if (__tmp > 65535)
    3398:	6f 81       	ldd	r22, Y+7	; 0x07
    339a:	78 85       	ldd	r23, Y+8	; 0x08
    339c:	89 85       	ldd	r24, Y+9	; 0x09
    339e:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	3f ef       	ldi	r19, 0xFF	; 255
    33a4:	4f e7       	ldi	r20, 0x7F	; 127
    33a6:	57 e4       	ldi	r21, 0x47	; 71
    33a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ac:	18 16       	cp	r1, r24
    33ae:	4c f5       	brge	.+82     	; 0x3402 <LCD_outToDataLines+0x966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e2       	ldi	r20, 0x20	; 32
    33be:	51 e4       	ldi	r21, 0x41	; 65
    33c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	bc 01       	movw	r22, r24
    33ca:	cd 01       	movw	r24, r26
    33cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9e 83       	std	Y+6, r25	; 0x06
    33d6:	8d 83       	std	Y+5, r24	; 0x05
    33d8:	0f c0       	rjmp	.+30     	; 0x33f8 <LCD_outToDataLines+0x95c>
    33da:	80 e9       	ldi	r24, 0x90	; 144
    33dc:	91 e0       	ldi	r25, 0x01	; 1
    33de:	9c 83       	std	Y+4, r25	; 0x04
    33e0:	8b 83       	std	Y+3, r24	; 0x03
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	9c 81       	ldd	r25, Y+4	; 0x04
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	f1 f7       	brne	.-4      	; 0x33e6 <LCD_outToDataLines+0x94a>
    33ea:	9c 83       	std	Y+4, r25	; 0x04
    33ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	69 f7       	brne	.-38     	; 0x33da <LCD_outToDataLines+0x93e>
    3400:	14 c0       	rjmp	.+40     	; 0x342a <LCD_outToDataLines+0x98e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3402:	6f 81       	ldd	r22, Y+7	; 0x07
    3404:	78 85       	ldd	r23, Y+8	; 0x08
    3406:	89 85       	ldd	r24, Y+9	; 0x09
    3408:	9a 85       	ldd	r25, Y+10	; 0x0a
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
    3416:	8d 81       	ldd	r24, Y+5	; 0x05
    3418:	9e 81       	ldd	r25, Y+6	; 0x06
    341a:	9a 83       	std	Y+2, r25	; 0x02
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	f1 f7       	brne	.-4      	; 0x3422 <LCD_outToDataLines+0x986>
    3426:	9a 83       	std	Y+2, r25	; 0x02
    3428:	89 83       	std	Y+1, r24	; 0x01

		retStatus |= DIO_write(LCD_CTRL_LINES_PORT, LCD_E_PIN, DISABLE_LCD); /* disable LCD E=0 *//* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif

	return retStatus;
    342a:	fe 01       	movw	r30, r28
    342c:	ed 59       	subi	r30, 0x9D	; 157
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 81       	ld	r24, Z
}
    3432:	cc 59       	subi	r28, 0x9C	; 156
    3434:	df 4f       	sbci	r29, 0xFF	; 255
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	08 95       	ret

0000344a <LCD_sendCommand>:

static stdReturnType_t LCD_sendCommand(u8 command)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	00 d0       	rcall	.+0      	; 0x3450 <LCD_sendCommand+0x6>
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	89 83       	std	Y+1, r24	; 0x01

	/* Sending instruction mode, RS=0 */
	retStatus = DIO_write(LCD_CTRL_LINES_PORT, LCD_RS_PIN, SELECT_INSTRUCTION_REGISTER);
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	61 e0       	ldi	r22, 0x01	; 1
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    3464:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_outToDataLines(command);
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <LCD_outToDataLines>
    346c:	98 2f       	mov	r25, r24
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	89 2b       	or	r24, r25
    3472:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    3474:	89 81       	ldd	r24, Y+1	; 0x01
}
    3476:	0f 90       	pop	r0
    3478:	0f 90       	pop	r0
    347a:	cf 91       	pop	r28
    347c:	df 91       	pop	r29
    347e:	08 95       	ret

00003480 <LCD_init>:

stdReturnType_t LCD_init(void)
{
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	0f 92       	push	r0
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
	stdReturnType_t retStatus = ERROR;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	89 83       	std	Y+1, r24	; 0x01

	/* Configure the control pins(E,RS,RW) as output pins */
	retStatus =  DIO_init(LCD_CTRL_LINES_PORT, LCD_E_PIN, OUTPUT);
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	63 e0       	ldi	r22, 0x03	; 3
    3492:	41 e0       	ldi	r20, 0x01	; 1
    3494:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    3498:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_CTRL_LINES_PORT, LCD_RS_PIN, OUTPUT);
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	61 e0       	ldi	r22, 0x01	; 1
    349e:	41 e0       	ldi	r20, 0x01	; 1
    34a0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    34a4:	98 2f       	mov	r25, r24
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	89 2b       	or	r24, r25
    34aa:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_CTRL_LINES_PORT, LCD_RW_PIN, OUTPUT);
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	62 e0       	ldi	r22, 0x02	; 2
    34b0:	41 e0       	ldi	r20, 0x01	; 1
    34b2:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    34b6:	98 2f       	mov	r25, r24
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	89 2b       	or	r24, r25
    34bc:	89 83       	std	Y+1, r24	; 0x01

	/* Configure the highest 4 data lines as output */
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB4_PIN, OUTPUT);
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	64 e0       	ldi	r22, 0x04	; 4
    34c2:	41 e0       	ldi	r20, 0x01	; 1
    34c4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    34c8:	98 2f       	mov	r25, r24
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	89 2b       	or	r24, r25
    34ce:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB5_PIN, OUTPUT);
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	65 e0       	ldi	r22, 0x05	; 5
    34d4:	41 e0       	ldi	r20, 0x01	; 1
    34d6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    34da:	98 2f       	mov	r25, r24
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	89 2b       	or	r24, r25
    34e0:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB6_PIN, OUTPUT);
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	66 e0       	ldi	r22, 0x06	; 6
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    34ec:	98 2f       	mov	r25, r24
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	89 2b       	or	r24, r25
    34f2:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= DIO_init(LCD_DATA_LINES_PORT, LCD_DB7_PIN, OUTPUT);
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	67 e0       	ldi	r22, 0x07	; 7
    34f8:	41 e0       	ldi	r20, 0x01	; 1
    34fa:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    34fe:	98 2f       	mov	r25, r24
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	89 2b       	or	r24, r25
    3504:	89 83       	std	Y+1, r24	; 0x01

	#if (LCD_DATA_BITS_MODE == 4)
	retStatus |= LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    3506:	82 e0       	ldi	r24, 0x02	; 2
    3508:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
    350c:	98 2f       	mov	r25, r24
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	89 2b       	or	r24, r25
    3512:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line LCD + 4-bit Data Mode + 5*7 dot display Mode */
    3514:	88 e2       	ldi	r24, 0x28	; 40
    3516:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
    351a:	98 2f       	mov	r25, r24
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	89 2b       	or	r24, r25
    3520:	89 83       	std	Y+1, r24	; 0x01

	/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	retStatus |= LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
	#endif

	retStatus |= LCD_sendCommand(CURSOR_OFF); /* cursor off */
    3522:	8c e0       	ldi	r24, 0x0C	; 12
    3524:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
    3528:	98 2f       	mov	r25, r24
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	89 2b       	or	r24, r25
    352e:	89 83       	std	Y+1, r24	; 0x01
	retStatus |= LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
    3536:	98 2f       	mov	r25, r24
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	89 2b       	or	r24, r25
    353c:	89 83       	std	Y+1, r24	; 0x01
	return retStatus;
    353e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3540:	0f 90       	pop	r0
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	08 95       	ret

00003548 <LCD_clearScreen>:

stdReturnType_t LCD_clearScreen(void)
{
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CLEAR_COMMAND);
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
}
    3556:	cf 91       	pop	r28
    3558:	df 91       	pop	r29
    355a:	08 95       	ret

0000355c <LCD_turnOnCursor>:

stdReturnType_t LCD_turnOnCursor(void)
{
    355c:	df 93       	push	r29
    355e:	cf 93       	push	r28
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CURSOR_ON);
    3564:	8e e0       	ldi	r24, 0x0E	; 14
    3566:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
}
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	08 95       	ret

00003570 <LCD_turnOffCursor>:

stdReturnType_t LCD_turnOffCursor(void)
{
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
	return LCD_sendCommand(CURSOR_OFF);
    3578:	8c e0       	ldi	r24, 0x0C	; 12
    357a:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
}
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	08 95       	ret

00003584 <LCD_displayCharacter>:

stdReturnType_t LCD_displayCharacter(u8 data)
{
    3584:	df 93       	push	r29
    3586:	cf 93       	push	r28
    3588:	00 d0       	rcall	.+0      	; 0x358a <LCD_displayCharacter+0x6>
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	89 83       	std	Y+1, r24	; 0x01

	/* Sending data mode, RS=1 */
	retStatus  = DIO_write(LCD_CTRL_LINES_PORT, LCD_RS_PIN, SELECT_DATA_REGISTER);
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	61 e0       	ldi	r22, 0x01	; 1
    3598:	41 e0       	ldi	r20, 0x01	; 1
    359a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    359e:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_outToDataLines(data);
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <LCD_outToDataLines>
    35a6:	98 2f       	mov	r25, r24
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	89 2b       	or	r24, r25
    35ac:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <LCD_displayString>:

stdReturnType_t LCD_displayString(const char * data)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	00 d0       	rcall	.+0      	; 0x35c0 <LCD_displayString+0x6>
    35c0:	0f 92       	push	r0
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	9b 83       	std	Y+3, r25	; 0x03
    35c8:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = SUCCESS;
    35ca:	19 82       	std	Y+1, r1	; 0x01
    35cc:	0e c0       	rjmp	.+28     	; 0x35ea <LCD_displayString+0x30>
//		index++;
//	}

	while( '\0' != (*data) )
		{
			retStatus |= LCD_displayCharacter(*data);
    35ce:	ea 81       	ldd	r30, Y+2	; 0x02
    35d0:	fb 81       	ldd	r31, Y+3	; 0x03
    35d2:	80 81       	ld	r24, Z
    35d4:	0e 94 c2 1a 	call	0x3584	; 0x3584 <LCD_displayCharacter>
    35d8:	98 2f       	mov	r25, r24
    35da:	89 81       	ldd	r24, Y+1	; 0x01
    35dc:	89 2b       	or	r24, r25
    35de:	89 83       	std	Y+1, r24	; 0x01
			data++;
    35e0:	8a 81       	ldd	r24, Y+2	; 0x02
    35e2:	9b 81       	ldd	r25, Y+3	; 0x03
    35e4:	01 96       	adiw	r24, 0x01	; 1
    35e6:	9b 83       	std	Y+3, r25	; 0x03
    35e8:	8a 83       	std	Y+2, r24	; 0x02
//	{
//		retStatus |=  LCD_displayCharacter(data[index]);
//		index++;
//	}

	while( '\0' != (*data) )
    35ea:	ea 81       	ldd	r30, Y+2	; 0x02
    35ec:	fb 81       	ldd	r31, Y+3	; 0x03
    35ee:	80 81       	ld	r24, Z
    35f0:	88 23       	and	r24, r24
    35f2:	69 f7       	brne	.-38     	; 0x35ce <LCD_displayString+0x14>
			retStatus |= LCD_displayCharacter(*data);
			data++;
		}


	return retStatus;
    35f4:	89 81       	ldd	r24, Y+1	; 0x01

}
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	cf 91       	pop	r28
    35fe:	df 91       	pop	r29
    3600:	08 95       	ret

00003602 <LCD_setCursorPos>:

stdReturnType_t  LCD_setCursorPos(u8 row, u8 col)
{
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	00 d0       	rcall	.+0      	; 0x3608 <LCD_setCursorPos+0x6>
    3608:	00 d0       	rcall	.+0      	; 0x360a <LCD_setCursorPos+0x8>
    360a:	0f 92       	push	r0
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
    3610:	8a 83       	std	Y+2, r24	; 0x02
    3612:	6b 83       	std	Y+3, r22	; 0x03
	stdReturnType_t retStatus = ERROR;
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	89 83       	std	Y+1, r24	; 0x01

	switch (row)
    3618:	8a 81       	ldd	r24, Y+2	; 0x02
    361a:	28 2f       	mov	r18, r24
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	3d 83       	std	Y+5, r19	; 0x05
    3620:	2c 83       	std	Y+4, r18	; 0x04
    3622:	8c 81       	ldd	r24, Y+4	; 0x04
    3624:	9d 81       	ldd	r25, Y+5	; 0x05
    3626:	00 97       	sbiw	r24, 0x00	; 0
    3628:	31 f0       	breq	.+12     	; 0x3636 <LCD_setCursorPos+0x34>
    362a:	2c 81       	ldd	r18, Y+4	; 0x04
    362c:	3d 81       	ldd	r19, Y+5	; 0x05
    362e:	21 30       	cpi	r18, 0x01	; 1
    3630:	31 05       	cpc	r19, r1
    3632:	39 f0       	breq	.+14     	; 0x3642 <LCD_setCursorPos+0x40>
    3634:	0c c0       	rjmp	.+24     	; 0x364e <LCD_setCursorPos+0x4c>
	{
		case 0:
			retStatus = LCD_sendCommand(SET_CURSOR_LOCATION_L1_START + col);
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	80 58       	subi	r24, 0x80	; 128
    363a:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
    363e:	89 83       	std	Y+1, r24	; 0x01
    3640:	08 c0       	rjmp	.+16     	; 0x3652 <LCD_setCursorPos+0x50>
			break;
		case 1:
			retStatus = LCD_sendCommand(SET_CURSOR_LOCATION_L2_START + col);
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	80 54       	subi	r24, 0x40	; 64
    3646:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <LCD_setCursorPos+0x50>
			break;
		default:
			retStatus = ERROR;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return retStatus;
    3652:	89 81       	ldd	r24, Y+1	; 0x01
}
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <LCD_displayString_rowCol>:

stdReturnType_t LCD_displayString_rowCol(const char * data, u8 row, u8 col)
{
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	00 d0       	rcall	.+0      	; 0x366a <LCD_displayString_rowCol+0x6>
    366a:	00 d0       	rcall	.+0      	; 0x366c <LCD_displayString_rowCol+0x8>
    366c:	0f 92       	push	r0
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	9b 83       	std	Y+3, r25	; 0x03
    3674:	8a 83       	std	Y+2, r24	; 0x02
    3676:	6c 83       	std	Y+4, r22	; 0x04
    3678:	4d 83       	std	Y+5, r20	; 0x05
	stdReturnType_t retStatus = ERROR;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	89 83       	std	Y+1, r24	; 0x01

	retStatus = LCD_setCursorPos(row, col);
    367e:	8c 81       	ldd	r24, Y+4	; 0x04
    3680:	6d 81       	ldd	r22, Y+5	; 0x05
    3682:	0e 94 01 1b 	call	0x3602	; 0x3602 <LCD_setCursorPos>
    3686:	89 83       	std	Y+1, r24	; 0x01

	retStatus |= LCD_displayString(data);
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	9b 81       	ldd	r25, Y+3	; 0x03
    368c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <LCD_displayString>
    3690:	98 2f       	mov	r25, r24
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	89 2b       	or	r24, r25
    3696:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    3698:	89 81       	ldd	r24, Y+1	; 0x01
}
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	cf 91       	pop	r28
    36a6:	df 91       	pop	r29
    36a8:	08 95       	ret

000036aa <LCD_displayInteger>:

stdReturnType_t LCD_displayInteger(u16 val)
{
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	63 97       	sbiw	r28, 0x13	; 19
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	9b 8b       	std	Y+19, r25	; 0x13
    36c0:	8a 8b       	std	Y+18, r24	; 0x12
	stdReturnType_t retStatus = ERROR;
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	89 83       	std	Y+1, r24	; 0x01

    char AsciiBuff[16]; /* The ASCII result */
    itoa(val, AsciiBuff,10); /* 10 means base 10 i.e. decimal */
    36c6:	8a 89       	ldd	r24, Y+18	; 0x12
    36c8:	9b 89       	ldd	r25, Y+19	; 0x13
    36ca:	9e 01       	movw	r18, r28
    36cc:	2e 5f       	subi	r18, 0xFE	; 254
    36ce:	3f 4f       	sbci	r19, 0xFF	; 255
    36d0:	b9 01       	movw	r22, r18
    36d2:	4a e0       	ldi	r20, 0x0A	; 10
    36d4:	50 e0       	ldi	r21, 0x00	; 0
    36d6:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <itoa>
    retStatus = LCD_displayString(AsciiBuff);
    36da:	ce 01       	movw	r24, r28
    36dc:	02 96       	adiw	r24, 0x02	; 2
    36de:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <LCD_displayString>
    36e2:	89 83       	std	Y+1, r24	; 0x01
// for(j = 0;j<i;j++)
// {
// 	LCD_displayCharacter(arr[i-1-j]+'0');
// }

    return retStatus;
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    36e6:	63 96       	adiw	r28, 0x13	; 19
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	cf 91       	pop	r28
    36f4:	df 91       	pop	r29
    36f6:	08 95       	ret

000036f8 <LCD_writeCustomChar>:

stdReturnType_t LCD_writeCustomChar(u8 * pData, u8 index)
{
    36f8:	df 93       	push	r29
    36fa:	cf 93       	push	r28
    36fc:	00 d0       	rcall	.+0      	; 0x36fe <LCD_writeCustomChar+0x6>
    36fe:	00 d0       	rcall	.+0      	; 0x3700 <LCD_writeCustomChar+0x8>
    3700:	0f 92       	push	r0
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	9c 83       	std	Y+4, r25	; 0x04
    3708:	8b 83       	std	Y+3, r24	; 0x03
    370a:	6d 83       	std	Y+5, r22	; 0x05
	stdReturnType_t retStatus = ERROR;
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3710:	19 82       	std	Y+1, r1	; 0x01

	/* Set address in CGRAM */
	retStatus = LCD_sendCommand(CUSTOM_CHAR_RANGE_START | (index * 8));
    3712:	8d 81       	ldd	r24, Y+5	; 0x05
    3714:	88 2f       	mov	r24, r24
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	88 0f       	add	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	88 0f       	add	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	80 64       	ori	r24, 0x40	; 64
    3726:	0e 94 25 1a 	call	0x344a	; 0x344a <LCD_sendCommand>
    372a:	8a 83       	std	Y+2, r24	; 0x02
	/* Write received bytes in CGRAM */
	for(i = 0;i<8;i++)
    372c:	19 82       	std	Y+1, r1	; 0x01
    372e:	11 c0       	rjmp	.+34     	; 0x3752 <LCD_writeCustomChar+0x5a>
	{
		retStatus |= LCD_displayCharacter(*pData);
    3730:	eb 81       	ldd	r30, Y+3	; 0x03
    3732:	fc 81       	ldd	r31, Y+4	; 0x04
    3734:	80 81       	ld	r24, Z
    3736:	0e 94 c2 1a 	call	0x3584	; 0x3584 <LCD_displayCharacter>
    373a:	98 2f       	mov	r25, r24
    373c:	8a 81       	ldd	r24, Y+2	; 0x02
    373e:	89 2b       	or	r24, r25
    3740:	8a 83       	std	Y+2, r24	; 0x02
		pData++;
    3742:	8b 81       	ldd	r24, Y+3	; 0x03
    3744:	9c 81       	ldd	r25, Y+4	; 0x04
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	9c 83       	std	Y+4, r25	; 0x04
    374a:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;

	/* Set address in CGRAM */
	retStatus = LCD_sendCommand(CUSTOM_CHAR_RANGE_START | (index * 8));
	/* Write received bytes in CGRAM */
	for(i = 0;i<8;i++)
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	8f 5f       	subi	r24, 0xFF	; 255
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	88 30       	cpi	r24, 0x08	; 8
    3756:	60 f3       	brcs	.-40     	; 0x3730 <LCD_writeCustomChar+0x38>
	{
		retStatus |= LCD_displayCharacter(*pData);
		pData++;
	}

	return retStatus;
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
}
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <LCD_displayCustomChar>:

stdReturnType_t LCD_displayCustomChar(u8 index,u8 row,u8 col)
{
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	00 d0       	rcall	.+0      	; 0x3770 <LCD_displayCustomChar+0x6>
    3770:	00 d0       	rcall	.+0      	; 0x3772 <LCD_displayCustomChar+0x8>
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	8a 83       	std	Y+2, r24	; 0x02
    3778:	6b 83       	std	Y+3, r22	; 0x03
    377a:	4c 83       	std	Y+4, r20	; 0x04
	stdReturnType_t retStatus = ERROR;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	89 83       	std	Y+1, r24	; 0x01

	/* Set address in DDRAM */
	retStatus = LCD_setCursorPos(row, col);
    3780:	8b 81       	ldd	r24, Y+3	; 0x03
    3782:	6c 81       	ldd	r22, Y+4	; 0x04
    3784:	0e 94 01 1b 	call	0x3602	; 0x3602 <LCD_setCursorPos>
    3788:	89 83       	std	Y+1, r24	; 0x01
	/* Write custom character on screen */
	retStatus |= LCD_displayCharacter(index);
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	0e 94 c2 1a 	call	0x3584	; 0x3584 <LCD_displayCharacter>
    3790:	98 2f       	mov	r25, r24
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	89 2b       	or	r24, r25
    3796:	89 83       	std	Y+1, r24	; 0x01

	return retStatus;
    3798:	89 81       	ldd	r24, Y+1	; 0x01
}
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <initKeypad>:
		KEYPAD_COL1_PIN,
		KEYPAD_COL2_PIN,
		KEYPAD_COL3_PIN,
};

stdReturnType_t initKeypad(void) {
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	0f 92       	push	r0
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62

	stdReturnType_t status = ERROR;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	89 83       	std	Y+1, r24	; 0x01

	// init column  as input

	status = DIO_init(KEYPAD_PORT, KEYPAD_COL0_PIN, INPUT);
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	40 e0       	ldi	r20, 0x00	; 0
    37bc:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    37c0:	89 83       	std	Y+1, r24	; 0x01

	status |= DIO_init(KEYPAD_PORT, KEYPAD_COL1_PIN, INPUT);
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	61 e0       	ldi	r22, 0x01	; 1
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    37cc:	98 2f       	mov	r25, r24
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	89 2b       	or	r24, r25
    37d2:	89 83       	std	Y+1, r24	; 0x01
	status |= DIO_init(KEYPAD_PORT, KEYPAD_COL2_PIN, INPUT);
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	62 e0       	ldi	r22, 0x02	; 2
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    37de:	98 2f       	mov	r25, r24
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	89 2b       	or	r24, r25
    37e4:	89 83       	std	Y+1, r24	; 0x01
    #if (NUM_OF_COL == 4)
		status |= DIO_init(KEYPAD_PORT, KEYPAD_COL3_PIN, INPUT);
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	63 e0       	ldi	r22, 0x03	; 3
    37ea:	40 e0       	ldi	r20, 0x00	; 0
    37ec:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    37f0:	98 2f       	mov	r25, r24
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	89 2b       	or	r24, r25
    37f6:	89 83       	std	Y+1, r24	; 0x01
	#endif
	status = SUCCESS;
    37f8:	19 82       	std	Y+1, r1	; 0x01

	//Enable initernal pull up
	DIO_write(KEYPAD_PORT, KEYPAD_COL0_PIN, PIN_IS_HIGH);
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_COL1_PIN, PIN_IS_HIGH);
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	61 e0       	ldi	r22, 0x01	; 1
    3808:	41 e0       	ldi	r20, 0x01	; 1
    380a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_COL2_PIN, PIN_IS_HIGH);
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	62 e0       	ldi	r22, 0x02	; 2
    3812:	41 e0       	ldi	r20, 0x01	; 1
    3814:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
	#if (NUM_OF_COL == 4)
		DIO_write(KEYPAD_PORT, KEYPAD_COL3_PIN, PIN_IS_HIGH);
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	63 e0       	ldi	r22, 0x03	; 3
    381c:	41 e0       	ldi	r20, 0x01	; 1
    381e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
	#endif
	status = SUCCESS;
    3822:	19 82       	std	Y+1, r1	; 0x01
	//init row as INPUT
	status = DIO_init(KEYPAD_PORT,KEYPAD_ROW0_PIN,OUTPUT);
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	64 e0       	ldi	r22, 0x04	; 4
    3828:	41 e0       	ldi	r20, 0x01	; 1
    382a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    382e:	89 83       	std	Y+1, r24	; 0x01

	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW1_PIN,OUTPUT);
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	65 e0       	ldi	r22, 0x05	; 5
    3834:	41 e0       	ldi	r20, 0x01	; 1
    3836:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    383a:	98 2f       	mov	r25, r24
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	89 2b       	or	r24, r25
    3840:	89 83       	std	Y+1, r24	; 0x01
	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW2_PIN,OUTPUT);
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	66 e0       	ldi	r22, 0x06	; 6
    3846:	41 e0       	ldi	r20, 0x01	; 1
    3848:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    384c:	98 2f       	mov	r25, r24
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	89 2b       	or	r24, r25
    3852:	89 83       	std	Y+1, r24	; 0x01
	#if(NUM_OF_ROW == 4)
	status |= DIO_init(KEYPAD_PORT,KEYPAD_ROW3_PIN,OUTPUT);
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	67 e0       	ldi	r22, 0x07	; 7
    3858:	41 e0       	ldi	r20, 0x01	; 1
    385a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    385e:	98 2f       	mov	r25, r24
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	89 2b       	or	r24, r25
    3864:	89 83       	std	Y+1, r24	; 0x01
	#endif
	//Enable initernal pull up
	DIO_write(KEYPAD_PORT, KEYPAD_ROW0_PIN, PIN_IS_HIGH);
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	64 e0       	ldi	r22, 0x04	; 4
    386a:	41 e0       	ldi	r20, 0x01	; 1
    386c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_ROW1_PIN, PIN_IS_HIGH);
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	65 e0       	ldi	r22, 0x05	; 5
    3874:	41 e0       	ldi	r20, 0x01	; 1
    3876:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
	DIO_write(KEYPAD_PORT, KEYPAD_ROW2_PIN, PIN_IS_HIGH);
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	66 e0       	ldi	r22, 0x06	; 6
    387e:	41 e0       	ldi	r20, 0x01	; 1
    3880:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
	#if (NUM_OF_ROW == 4)
		DIO_write(KEYPAD_PORT, KEYPAD_ROW3_PIN, PIN_IS_HIGH);
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	67 e0       	ldi	r22, 0x07	; 7
    3888:	41 e0       	ldi	r20, 0x01	; 1
    388a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
	#endif

	status = SUCCESS;
    388e:	19 82       	std	Y+1, r1	; 0x01

	return status;
    3890:	89 81       	ldd	r24, Y+1	; 0x01
}
    3892:	0f 90       	pop	r0
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	08 95       	ret

0000389a <GetPressedKey>:


stdReturnType_t GetPressedKey(u8 *ppressed)
{
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
    38a2:	2a 97       	sbiw	r28, 0x0a	; 10
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	9e 83       	std	Y+6, r25	; 0x06
    38b0:	8d 83       	std	Y+5, r24	; 0x05
	stdReturnType_t retstatus = ERROR;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	8b 83       	std	Y+3, r24	; 0x03

	u8 col = 0;
    38b6:	1a 82       	std	Y+2, r1	; 0x02
	u8 row = 0;
    38b8:	19 82       	std	Y+1, r1	; 0x01
	pinState_t pinsate;

	*ppressed = 'H';
    38ba:	ed 81       	ldd	r30, Y+5	; 0x05
    38bc:	fe 81       	ldd	r31, Y+6	; 0x06
    38be:	88 e4       	ldi	r24, 0x48	; 72
    38c0:	80 83       	st	Z, r24

	for(row = 0; row < NUM_OF_ROW; row++)
    38c2:	19 82       	std	Y+1, r1	; 0x01
    38c4:	91 c0       	rjmp	.+290    	; 0x39e8 <GetPressedKey+0x14e>
	{
		retstatus = DIO_write(KEYPAD_PORT,KEYPAD_ROW0_PIN,( (1<<row) &1)?0:1);
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	28 2f       	mov	r18, r24
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	02 2e       	mov	r0, r18
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <GetPressedKey+0x3e>
    38d4:	95 95       	asr	r25
    38d6:	87 95       	ror	r24
    38d8:	0a 94       	dec	r0
    38da:	e2 f7       	brpl	.-8      	; 0x38d4 <GetPressedKey+0x3a>
    38dc:	81 70       	andi	r24, 0x01	; 1
    38de:	90 70       	andi	r25, 0x00	; 0
    38e0:	88 23       	and	r24, r24
    38e2:	11 f0       	breq	.+4      	; 0x38e8 <GetPressedKey+0x4e>
    38e4:	1a 86       	std	Y+10, r1	; 0x0a
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <GetPressedKey+0x52>
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	8a 87       	std	Y+10, r24	; 0x0a
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	64 e0       	ldi	r22, 0x04	; 4
    38f0:	4a 85       	ldd	r20, Y+10	; 0x0a
    38f2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    38f6:	8b 83       	std	Y+3, r24	; 0x03

		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW1_PIN,( (1<<row) &2)?0:1);
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	28 2f       	mov	r18, r24
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	82 e0       	ldi	r24, 0x02	; 2
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	02 2e       	mov	r0, r18
    3904:	02 c0       	rjmp	.+4      	; 0x390a <GetPressedKey+0x70>
    3906:	95 95       	asr	r25
    3908:	87 95       	ror	r24
    390a:	0a 94       	dec	r0
    390c:	e2 f7       	brpl	.-8      	; 0x3906 <GetPressedKey+0x6c>
    390e:	81 70       	andi	r24, 0x01	; 1
    3910:	90 70       	andi	r25, 0x00	; 0
    3912:	88 23       	and	r24, r24
    3914:	11 f0       	breq	.+4      	; 0x391a <GetPressedKey+0x80>
    3916:	19 86       	std	Y+9, r1	; 0x09
    3918:	02 c0       	rjmp	.+4      	; 0x391e <GetPressedKey+0x84>
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	89 87       	std	Y+9, r24	; 0x09
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	65 e0       	ldi	r22, 0x05	; 5
    3922:	49 85       	ldd	r20, Y+9	; 0x09
    3924:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    3928:	98 2f       	mov	r25, r24
    392a:	8b 81       	ldd	r24, Y+3	; 0x03
    392c:	89 2b       	or	r24, r25
    392e:	8b 83       	std	Y+3, r24	; 0x03
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW2_PIN,( (1<<row) &4)?0:1);
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	28 2f       	mov	r18, r24
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	84 e0       	ldi	r24, 0x04	; 4
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	02 2e       	mov	r0, r18
    393c:	02 c0       	rjmp	.+4      	; 0x3942 <GetPressedKey+0xa8>
    393e:	95 95       	asr	r25
    3940:	87 95       	ror	r24
    3942:	0a 94       	dec	r0
    3944:	e2 f7       	brpl	.-8      	; 0x393e <GetPressedKey+0xa4>
    3946:	81 70       	andi	r24, 0x01	; 1
    3948:	90 70       	andi	r25, 0x00	; 0
    394a:	88 23       	and	r24, r24
    394c:	11 f0       	breq	.+4      	; 0x3952 <GetPressedKey+0xb8>
    394e:	18 86       	std	Y+8, r1	; 0x08
    3950:	02 c0       	rjmp	.+4      	; 0x3956 <GetPressedKey+0xbc>
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	88 87       	std	Y+8, r24	; 0x08
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	66 e0       	ldi	r22, 0x06	; 6
    395a:	48 85       	ldd	r20, Y+8	; 0x08
    395c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    3960:	98 2f       	mov	r25, r24
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	89 2b       	or	r24, r25
    3966:	8b 83       	std	Y+3, r24	; 0x03
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW3_PIN,( (1<<row) &8)?0:1);
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	28 2f       	mov	r18, r24
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	88 e0       	ldi	r24, 0x08	; 8
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	02 2e       	mov	r0, r18
    3974:	02 c0       	rjmp	.+4      	; 0x397a <GetPressedKey+0xe0>
    3976:	95 95       	asr	r25
    3978:	87 95       	ror	r24
    397a:	0a 94       	dec	r0
    397c:	e2 f7       	brpl	.-8      	; 0x3976 <GetPressedKey+0xdc>
    397e:	81 70       	andi	r24, 0x01	; 1
    3980:	90 70       	andi	r25, 0x00	; 0
    3982:	88 23       	and	r24, r24
    3984:	11 f0       	breq	.+4      	; 0x398a <GetPressedKey+0xf0>
    3986:	1f 82       	std	Y+7, r1	; 0x07
    3988:	02 c0       	rjmp	.+4      	; 0x398e <GetPressedKey+0xf4>
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	8f 83       	std	Y+7, r24	; 0x07
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	67 e0       	ldi	r22, 0x07	; 7
    3992:	4f 81       	ldd	r20, Y+7	; 0x07
    3994:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <DIO_write>
    3998:	9b 81       	ldd	r25, Y+3	; 0x03
    399a:	89 2b       	or	r24, r25
    399c:	8b 83       	std	Y+3, r24	; 0x03

		for (col = 0; col < NUM_OF_COL; col ++)
    399e:	1a 82       	std	Y+2, r1	; 0x02
    39a0:	1d c0       	rjmp	.+58     	; 0x39dc <GetPressedKey+0x142>
		{

			retstatus |= DIO_read(KEYPAD_PORT,colpins[col],&pinsate);
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
    39a4:	88 2f       	mov	r24, r24
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	fc 01       	movw	r30, r24
    39aa:	e8 59       	subi	r30, 0x98	; 152
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	90 81       	ld	r25, Z
    39b0:	9e 01       	movw	r18, r28
    39b2:	2c 5f       	subi	r18, 0xFC	; 252
    39b4:	3f 4f       	sbci	r19, 0xFF	; 255
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	69 2f       	mov	r22, r25
    39ba:	a9 01       	movw	r20, r18
    39bc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <DIO_read>
    39c0:	98 2f       	mov	r25, r24
    39c2:	8b 81       	ldd	r24, Y+3	; 0x03
    39c4:	89 2b       	or	r24, r25
    39c6:	8b 83       	std	Y+3, r24	; 0x03

			if(PIN_IS_LOW == pinsate)
    39c8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ca:	88 23       	and	r24, r24
    39cc:	21 f4       	brne	.+8      	; 0x39d6 <GetPressedKey+0x13c>
				//*ppressed = KEyPad_4X4[row][col];
				#elif(NUM_OF_COL == 3)
				//*ppressed = KEyPad_4X3[row][col];
				#endif

				row = NUM_OF_ROW;
    39ce:	84 e0       	ldi	r24, 0x04	; 4
    39d0:	89 83       	std	Y+1, r24	; 0x01
				col = NUM_OF_COL;
    39d2:	84 e0       	ldi	r24, 0x04	; 4
    39d4:	8a 83       	std	Y+2, r24	; 0x02

		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW1_PIN,( (1<<row) &2)?0:1);
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW2_PIN,( (1<<row) &4)?0:1);
		retstatus |= DIO_write(KEYPAD_PORT,KEYPAD_ROW3_PIN,( (1<<row) &8)?0:1);

		for (col = 0; col < NUM_OF_COL; col ++)
    39d6:	8a 81       	ldd	r24, Y+2	; 0x02
    39d8:	8f 5f       	subi	r24, 0xFF	; 255
    39da:	8a 83       	std	Y+2, r24	; 0x02
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	84 30       	cpi	r24, 0x04	; 4
    39e0:	00 f3       	brcs	.-64     	; 0x39a2 <GetPressedKey+0x108>
	u8 row = 0;
	pinState_t pinsate;

	*ppressed = 'H';

	for(row = 0; row < NUM_OF_ROW; row++)
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	8f 5f       	subi	r24, 0xFF	; 255
    39e6:	89 83       	std	Y+1, r24	; 0x01
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	84 30       	cpi	r24, 0x04	; 4
    39ec:	08 f4       	brcc	.+2      	; 0x39f0 <GetPressedKey+0x156>
    39ee:	6b cf       	rjmp	.-298    	; 0x38c6 <GetPressedKey+0x2c>
				col = NUM_OF_COL;
			}
		}
	}

	return retstatus;
    39f0:	8b 81       	ldd	r24, Y+3	; 0x03

}
    39f2:	2a 96       	adiw	r28, 0x0a	; 10
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <initButton>:
 * params:
 * 			IN: buttonID : the name of the needed button.
 *
 */
stdReturnType_t initButton(buttonX_t buttonID)
{
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	00 d0       	rcall	.+0      	; 0x3a0a <initButton+0x6>
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <initButton+0x8>
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
    3a10:	8a 83       	std	Y+2, r24	; 0x02
	stdReturnType_t retStatus = ERROR;
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	89 83       	std	Y+1, r24	; 0x01

	switch(buttonID)
    3a16:	8a 81       	ldd	r24, Y+2	; 0x02
    3a18:	28 2f       	mov	r18, r24
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	3c 83       	std	Y+4, r19	; 0x04
    3a1e:	2b 83       	std	Y+3, r18	; 0x03
    3a20:	8b 81       	ldd	r24, Y+3	; 0x03
    3a22:	9c 81       	ldd	r25, Y+4	; 0x04
    3a24:	81 30       	cpi	r24, 0x01	; 1
    3a26:	91 05       	cpc	r25, r1
    3a28:	81 f0       	breq	.+32     	; 0x3a4a <initButton+0x46>
    3a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    3a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    3a2e:	22 30       	cpi	r18, 0x02	; 2
    3a30:	31 05       	cpc	r19, r1
    3a32:	91 f0       	breq	.+36     	; 0x3a58 <initButton+0x54>
    3a34:	8b 81       	ldd	r24, Y+3	; 0x03
    3a36:	9c 81       	ldd	r25, Y+4	; 0x04
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	a9 f4       	brne	.+42     	; 0x3a66 <initButton+0x62>
	{
		case BUTTON0:
			retStatus = DIO_init(BUTTON0_PORT, BUTTON0_PIN, INPUT);
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
    3a40:	40 e0       	ldi	r20, 0x00	; 0
    3a42:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    3a46:	89 83       	std	Y+1, r24	; 0x01
    3a48:	10 c0       	rjmp	.+32     	; 0x3a6a <initButton+0x66>
			break;

		case BUTTON1:
			retStatus = DIO_init(BUTTON1_PORT, BUTTON1_PIN, INPUT);
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	61 e0       	ldi	r22, 0x01	; 1
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    3a54:	89 83       	std	Y+1, r24	; 0x01
    3a56:	09 c0       	rjmp	.+18     	; 0x3a6a <initButton+0x66>
			break;

		case BUTTON2:
			retStatus = DIO_init(BUTTON2_PORT, BUTTON2_PIN, INPUT);
    3a58:	82 e0       	ldi	r24, 0x02	; 2
    3a5a:	62 e0       	ldi	r22, 0x02	; 2
    3a5c:	40 e0       	ldi	r20, 0x00	; 0
    3a5e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <DIO_init>
    3a62:	89 83       	std	Y+1, r24	; 0x01
    3a64:	02 c0       	rjmp	.+4      	; 0x3a6a <initButton+0x66>
			break;

		default:
			/* ERROR given buttonID is not supported */
			retStatus = ERROR;
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return retStatus;
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <getButtonState>:
 * params:
 * 			IN: buttonID : the name of the needed button.
 * 			OUT: pbuttonState : pointer to the button state BUTTON_PRESSED/BUTTON_NOT_PRESSED.
 */
stdReturnType_t getButtonState(buttonX_t buttonID, buttonState_t * pbuttonState)
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	cd b7       	in	r28, 0x3d	; 61
    3a80:	de b7       	in	r29, 0x3e	; 62
    3a82:	e1 97       	sbiw	r28, 0x31	; 49
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	de bf       	out	0x3e, r29	; 62
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	cd bf       	out	0x3d, r28	; 61
    3a8e:	8d a7       	std	Y+45, r24	; 0x2d
    3a90:	7f a7       	std	Y+47, r23	; 0x2f
    3a92:	6e a7       	std	Y+46, r22	; 0x2e
	stdReturnType_t retStatus = ERROR;
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	8b a7       	std	Y+43, r24	; 0x2b
	pinState_t pinState;

	/* Read button pin state */
	switch(buttonID)
    3a98:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	39 ab       	std	Y+49, r19	; 0x31
    3aa0:	28 ab       	std	Y+48, r18	; 0x30
    3aa2:	88 a9       	ldd	r24, Y+48	; 0x30
    3aa4:	99 a9       	ldd	r25, Y+49	; 0x31
    3aa6:	81 30       	cpi	r24, 0x01	; 1
    3aa8:	91 05       	cpc	r25, r1
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <getButtonState+0x34>
    3aac:	94 c0       	rjmp	.+296    	; 0x3bd6 <getButtonState+0x15c>
    3aae:	28 a9       	ldd	r18, Y+48	; 0x30
    3ab0:	39 a9       	ldd	r19, Y+49	; 0x31
    3ab2:	22 30       	cpi	r18, 0x02	; 2
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <getButtonState+0x40>
    3ab8:	17 c1       	rjmp	.+558    	; 0x3ce8 <getButtonState+0x26e>
    3aba:	88 a9       	ldd	r24, Y+48	; 0x30
    3abc:	99 a9       	ldd	r25, Y+49	; 0x31
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	09 f0       	breq	.+2      	; 0x3ac4 <getButtonState+0x4a>
    3ac2:	9b c1       	rjmp	.+822    	; 0x3dfa <getButtonState+0x380>
	{
		case BUTTON0:
			retStatus = DIO_read(BUTTON0_PORT,BUTTON0,&pinState);
    3ac4:	9e 01       	movw	r18, r28
    3ac6:	24 5d       	subi	r18, 0xD4	; 212
    3ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aca:	82 e0       	ldi	r24, 0x02	; 2
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	a9 01       	movw	r20, r18
    3ad0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <DIO_read>
    3ad4:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    3ad6:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	09 f0       	breq	.+2      	; 0x3ade <getButtonState+0x64>
    3adc:	90 c1       	rjmp	.+800    	; 0x3dfe <getButtonState+0x384>
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	a0 ef       	ldi	r26, 0xF0	; 240
    3ae4:	b1 e4       	ldi	r27, 0x41	; 65
    3ae6:	8f a3       	std	Y+39, r24	; 0x27
    3ae8:	98 a7       	std	Y+40, r25	; 0x28
    3aea:	a9 a7       	std	Y+41, r26	; 0x29
    3aec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aee:	6f a1       	ldd	r22, Y+39	; 0x27
    3af0:	78 a5       	ldd	r23, Y+40	; 0x28
    3af2:	89 a5       	ldd	r24, Y+41	; 0x29
    3af4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	4a e7       	ldi	r20, 0x7A	; 122
    3afc:	55 e4       	ldi	r21, 0x45	; 69
    3afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	8b a3       	std	Y+35, r24	; 0x23
    3b08:	9c a3       	std	Y+36, r25	; 0x24
    3b0a:	ad a3       	std	Y+37, r26	; 0x25
    3b0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b0e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b10:	7c a1       	ldd	r23, Y+36	; 0x24
    3b12:	8d a1       	ldd	r24, Y+37	; 0x25
    3b14:	9e a1       	ldd	r25, Y+38	; 0x26
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	40 e8       	ldi	r20, 0x80	; 128
    3b1c:	5f e3       	ldi	r21, 0x3F	; 63
    3b1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b22:	88 23       	and	r24, r24
    3b24:	2c f4       	brge	.+10     	; 0x3b30 <getButtonState+0xb6>
		__ticks = 1;
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	9a a3       	std	Y+34, r25	; 0x22
    3b2c:	89 a3       	std	Y+33, r24	; 0x21
    3b2e:	3f c0       	rjmp	.+126    	; 0x3bae <getButtonState+0x134>
	else if (__tmp > 65535)
    3b30:	6b a1       	ldd	r22, Y+35	; 0x23
    3b32:	7c a1       	ldd	r23, Y+36	; 0x24
    3b34:	8d a1       	ldd	r24, Y+37	; 0x25
    3b36:	9e a1       	ldd	r25, Y+38	; 0x26
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	3f ef       	ldi	r19, 0xFF	; 255
    3b3c:	4f e7       	ldi	r20, 0x7F	; 127
    3b3e:	57 e4       	ldi	r21, 0x47	; 71
    3b40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b44:	18 16       	cp	r1, r24
    3b46:	4c f5       	brge	.+82     	; 0x3b9a <getButtonState+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b48:	6f a1       	ldd	r22, Y+39	; 0x27
    3b4a:	78 a5       	ldd	r23, Y+40	; 0x28
    3b4c:	89 a5       	ldd	r24, Y+41	; 0x29
    3b4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e2       	ldi	r20, 0x20	; 32
    3b56:	51 e4       	ldi	r21, 0x41	; 65
    3b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	bc 01       	movw	r22, r24
    3b62:	cd 01       	movw	r24, r26
    3b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	9a a3       	std	Y+34, r25	; 0x22
    3b6e:	89 a3       	std	Y+33, r24	; 0x21
    3b70:	0f c0       	rjmp	.+30     	; 0x3b90 <getButtonState+0x116>
    3b72:	80 e9       	ldi	r24, 0x90	; 144
    3b74:	91 e0       	ldi	r25, 0x01	; 1
    3b76:	98 a3       	std	Y+32, r25	; 0x20
    3b78:	8f 8f       	std	Y+31, r24	; 0x1f
    3b7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b7c:	98 a1       	ldd	r25, Y+32	; 0x20
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <getButtonState+0x104>
    3b82:	98 a3       	std	Y+32, r25	; 0x20
    3b84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b86:	89 a1       	ldd	r24, Y+33	; 0x21
    3b88:	9a a1       	ldd	r25, Y+34	; 0x22
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	9a a3       	std	Y+34, r25	; 0x22
    3b8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b90:	89 a1       	ldd	r24, Y+33	; 0x21
    3b92:	9a a1       	ldd	r25, Y+34	; 0x22
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	69 f7       	brne	.-38     	; 0x3b72 <getButtonState+0xf8>
    3b98:	14 c0       	rjmp	.+40     	; 0x3bc2 <getButtonState+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    3ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	9a a3       	std	Y+34, r25	; 0x22
    3bac:	89 a3       	std	Y+33, r24	; 0x21
    3bae:	89 a1       	ldd	r24, Y+33	; 0x21
    3bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    3bb2:	9e 8f       	std	Y+30, r25	; 0x1e
    3bb4:	8d 8f       	std	Y+29, r24	; 0x1d
    3bb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bba:	01 97       	sbiw	r24, 0x01	; 1
    3bbc:	f1 f7       	brne	.-4      	; 0x3bba <getButtonState+0x140>
    3bbe:	9e 8f       	std	Y+30, r25	; 0x1e
    3bc0:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON0_PORT,BUTTON0,&pinState);
    3bc2:	9e 01       	movw	r18, r28
    3bc4:	24 5d       	subi	r18, 0xD4	; 212
    3bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	60 e0       	ldi	r22, 0x00	; 0
    3bcc:	a9 01       	movw	r20, r18
    3bce:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <DIO_read>
    3bd2:	8b a7       	std	Y+43, r24	; 0x2b
    3bd4:	14 c1       	rjmp	.+552    	; 0x3dfe <getButtonState+0x384>
			}

			break;

		case BUTTON1:
			retStatus = DIO_read(BUTTON1_PORT, BUTTON1_PIN, &pinState);
    3bd6:	9e 01       	movw	r18, r28
    3bd8:	24 5d       	subi	r18, 0xD4	; 212
    3bda:	3f 4f       	sbci	r19, 0xFF	; 255
    3bdc:	82 e0       	ldi	r24, 0x02	; 2
    3bde:	61 e0       	ldi	r22, 0x01	; 1
    3be0:	a9 01       	movw	r20, r18
    3be2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <DIO_read>
    3be6:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    3be8:	8c a5       	ldd	r24, Y+44	; 0x2c
    3bea:	81 30       	cpi	r24, 0x01	; 1
    3bec:	09 f0       	breq	.+2      	; 0x3bf0 <getButtonState+0x176>
    3bee:	07 c1       	rjmp	.+526    	; 0x3dfe <getButtonState+0x384>
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a0 ef       	ldi	r26, 0xF0	; 240
    3bf6:	b1 e4       	ldi	r27, 0x41	; 65
    3bf8:	89 8f       	std	Y+25, r24	; 0x19
    3bfa:	9a 8f       	std	Y+26, r25	; 0x1a
    3bfc:	ab 8f       	std	Y+27, r26	; 0x1b
    3bfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c00:	69 8d       	ldd	r22, Y+25	; 0x19
    3c02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	4a e7       	ldi	r20, 0x7A	; 122
    3c0e:	55 e4       	ldi	r21, 0x45	; 69
    3c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	8d 8b       	std	Y+21, r24	; 0x15
    3c1a:	9e 8b       	std	Y+22, r25	; 0x16
    3c1c:	af 8b       	std	Y+23, r26	; 0x17
    3c1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c20:	6d 89       	ldd	r22, Y+21	; 0x15
    3c22:	7e 89       	ldd	r23, Y+22	; 0x16
    3c24:	8f 89       	ldd	r24, Y+23	; 0x17
    3c26:	98 8d       	ldd	r25, Y+24	; 0x18
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	40 e8       	ldi	r20, 0x80	; 128
    3c2e:	5f e3       	ldi	r21, 0x3F	; 63
    3c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c34:	88 23       	and	r24, r24
    3c36:	2c f4       	brge	.+10     	; 0x3c42 <getButtonState+0x1c8>
		__ticks = 1;
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9c 8b       	std	Y+20, r25	; 0x14
    3c3e:	8b 8b       	std	Y+19, r24	; 0x13
    3c40:	3f c0       	rjmp	.+126    	; 0x3cc0 <getButtonState+0x246>
	else if (__tmp > 65535)
    3c42:	6d 89       	ldd	r22, Y+21	; 0x15
    3c44:	7e 89       	ldd	r23, Y+22	; 0x16
    3c46:	8f 89       	ldd	r24, Y+23	; 0x17
    3c48:	98 8d       	ldd	r25, Y+24	; 0x18
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	3f ef       	ldi	r19, 0xFF	; 255
    3c4e:	4f e7       	ldi	r20, 0x7F	; 127
    3c50:	57 e4       	ldi	r21, 0x47	; 71
    3c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c56:	18 16       	cp	r1, r24
    3c58:	4c f5       	brge	.+82     	; 0x3cac <getButtonState+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5a:	69 8d       	ldd	r22, Y+25	; 0x19
    3c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e2       	ldi	r20, 0x20	; 32
    3c68:	51 e4       	ldi	r21, 0x41	; 65
    3c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	9c 8b       	std	Y+20, r25	; 0x14
    3c80:	8b 8b       	std	Y+19, r24	; 0x13
    3c82:	0f c0       	rjmp	.+30     	; 0x3ca2 <getButtonState+0x228>
    3c84:	80 e9       	ldi	r24, 0x90	; 144
    3c86:	91 e0       	ldi	r25, 0x01	; 1
    3c88:	9a 8b       	std	Y+18, r25	; 0x12
    3c8a:	89 8b       	std	Y+17, r24	; 0x11
    3c8c:	89 89       	ldd	r24, Y+17	; 0x11
    3c8e:	9a 89       	ldd	r25, Y+18	; 0x12
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <getButtonState+0x216>
    3c94:	9a 8b       	std	Y+18, r25	; 0x12
    3c96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c98:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	9c 8b       	std	Y+20, r25	; 0x14
    3ca0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	69 f7       	brne	.-38     	; 0x3c84 <getButtonState+0x20a>
    3caa:	14 c0       	rjmp	.+40     	; 0x3cd4 <getButtonState+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cac:	6d 89       	ldd	r22, Y+21	; 0x15
    3cae:	7e 89       	ldd	r23, Y+22	; 0x16
    3cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    3cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	9c 8b       	std	Y+20, r25	; 0x14
    3cbe:	8b 8b       	std	Y+19, r24	; 0x13
    3cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cc4:	98 8b       	std	Y+16, r25	; 0x10
    3cc6:	8f 87       	std	Y+15, r24	; 0x0f
    3cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cca:	98 89       	ldd	r25, Y+16	; 0x10
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <getButtonState+0x252>
    3cd0:	98 8b       	std	Y+16, r25	; 0x10
    3cd2:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON1_PORT, BUTTON1_PIN, &pinState);
    3cd4:	9e 01       	movw	r18, r28
    3cd6:	24 5d       	subi	r18, 0xD4	; 212
    3cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cda:	82 e0       	ldi	r24, 0x02	; 2
    3cdc:	61 e0       	ldi	r22, 0x01	; 1
    3cde:	a9 01       	movw	r20, r18
    3ce0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <DIO_read>
    3ce4:	8b a7       	std	Y+43, r24	; 0x2b
    3ce6:	8b c0       	rjmp	.+278    	; 0x3dfe <getButtonState+0x384>
				/* Do nothing */
			}
			break;

		case BUTTON2:
			retStatus = DIO_read(BUTTON2_PORT, BUTTON2_PIN, &pinState);
    3ce8:	9e 01       	movw	r18, r28
    3cea:	24 5d       	subi	r18, 0xD4	; 212
    3cec:	3f 4f       	sbci	r19, 0xFF	; 255
    3cee:	82 e0       	ldi	r24, 0x02	; 2
    3cf0:	62 e0       	ldi	r22, 0x02	; 2
    3cf2:	a9 01       	movw	r20, r18
    3cf4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <DIO_read>
    3cf8:	8b a7       	std	Y+43, r24	; 0x2b
			if(PIN_IS_HIGH == pinState)
    3cfa:	8c a5       	ldd	r24, Y+44	; 0x2c
    3cfc:	81 30       	cpi	r24, 0x01	; 1
    3cfe:	09 f0       	breq	.+2      	; 0x3d02 <getButtonState+0x288>
    3d00:	7e c0       	rjmp	.+252    	; 0x3dfe <getButtonState+0x384>
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	a0 ef       	ldi	r26, 0xF0	; 240
    3d08:	b1 e4       	ldi	r27, 0x41	; 65
    3d0a:	8b 87       	std	Y+11, r24	; 0x0b
    3d0c:	9c 87       	std	Y+12, r25	; 0x0c
    3d0e:	ad 87       	std	Y+13, r26	; 0x0d
    3d10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	4a e7       	ldi	r20, 0x7A	; 122
    3d20:	55 e4       	ldi	r21, 0x45	; 69
    3d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	8f 83       	std	Y+7, r24	; 0x07
    3d2c:	98 87       	std	Y+8, r25	; 0x08
    3d2e:	a9 87       	std	Y+9, r26	; 0x09
    3d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d32:	6f 81       	ldd	r22, Y+7	; 0x07
    3d34:	78 85       	ldd	r23, Y+8	; 0x08
    3d36:	89 85       	ldd	r24, Y+9	; 0x09
    3d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3a:	20 e0       	ldi	r18, 0x00	; 0
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	40 e8       	ldi	r20, 0x80	; 128
    3d40:	5f e3       	ldi	r21, 0x3F	; 63
    3d42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d46:	88 23       	and	r24, r24
    3d48:	2c f4       	brge	.+10     	; 0x3d54 <getButtonState+0x2da>
		__ticks = 1;
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	9e 83       	std	Y+6, r25	; 0x06
    3d50:	8d 83       	std	Y+5, r24	; 0x05
    3d52:	3f c0       	rjmp	.+126    	; 0x3dd2 <getButtonState+0x358>
	else if (__tmp > 65535)
    3d54:	6f 81       	ldd	r22, Y+7	; 0x07
    3d56:	78 85       	ldd	r23, Y+8	; 0x08
    3d58:	89 85       	ldd	r24, Y+9	; 0x09
    3d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	3f ef       	ldi	r19, 0xFF	; 255
    3d60:	4f e7       	ldi	r20, 0x7F	; 127
    3d62:	57 e4       	ldi	r21, 0x47	; 71
    3d64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d68:	18 16       	cp	r1, r24
    3d6a:	4c f5       	brge	.+82     	; 0x3dbe <getButtonState+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 e2       	ldi	r20, 0x20	; 32
    3d7a:	51 e4       	ldi	r21, 0x41	; 65
    3d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	bc 01       	movw	r22, r24
    3d86:	cd 01       	movw	r24, r26
    3d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	9e 83       	std	Y+6, r25	; 0x06
    3d92:	8d 83       	std	Y+5, r24	; 0x05
    3d94:	0f c0       	rjmp	.+30     	; 0x3db4 <getButtonState+0x33a>
    3d96:	80 e9       	ldi	r24, 0x90	; 144
    3d98:	91 e0       	ldi	r25, 0x01	; 1
    3d9a:	9c 83       	std	Y+4, r25	; 0x04
    3d9c:	8b 83       	std	Y+3, r24	; 0x03
    3d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3da0:	9c 81       	ldd	r25, Y+4	; 0x04
    3da2:	01 97       	sbiw	r24, 0x01	; 1
    3da4:	f1 f7       	brne	.-4      	; 0x3da2 <getButtonState+0x328>
    3da6:	9c 83       	std	Y+4, r25	; 0x04
    3da8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3daa:	8d 81       	ldd	r24, Y+5	; 0x05
    3dac:	9e 81       	ldd	r25, Y+6	; 0x06
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	9e 83       	std	Y+6, r25	; 0x06
    3db2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db4:	8d 81       	ldd	r24, Y+5	; 0x05
    3db6:	9e 81       	ldd	r25, Y+6	; 0x06
    3db8:	00 97       	sbiw	r24, 0x00	; 0
    3dba:	69 f7       	brne	.-38     	; 0x3d96 <getButtonState+0x31c>
    3dbc:	14 c0       	rjmp	.+40     	; 0x3de6 <getButtonState+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc0:	78 85       	ldd	r23, Y+8	; 0x08
    3dc2:	89 85       	ldd	r24, Y+9	; 0x09
    3dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	9e 83       	std	Y+6, r25	; 0x06
    3dd0:	8d 83       	std	Y+5, r24	; 0x05
    3dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	89 83       	std	Y+1, r24	; 0x01
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
    3ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	f1 f7       	brne	.-4      	; 0x3dde <getButtonState+0x364>
    3de2:	9a 83       	std	Y+2, r25	; 0x02
    3de4:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);
				retStatus = DIO_read(BUTTON2_PORT, BUTTON2_PIN, &pinState);
    3de6:	9e 01       	movw	r18, r28
    3de8:	24 5d       	subi	r18, 0xD4	; 212
    3dea:	3f 4f       	sbci	r19, 0xFF	; 255
    3dec:	82 e0       	ldi	r24, 0x02	; 2
    3dee:	62 e0       	ldi	r22, 0x02	; 2
    3df0:	a9 01       	movw	r20, r18
    3df2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <DIO_read>
    3df6:	8b a7       	std	Y+43, r24	; 0x2b
    3df8:	02 c0       	rjmp	.+4      	; 0x3dfe <getButtonState+0x384>
			}
			break;

		default:
			/* ERROR given buttonID is not supported */
			retStatus = ERROR;
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	8b a7       	std	Y+43, r24	; 0x2b
			break;
	}

	/* Check button state */
	if( (SUCCESS == retStatus) && (PIN_IS_HIGH == pinState))
    3dfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e00:	88 23       	and	r24, r24
    3e02:	49 f4       	brne	.+18     	; 0x3e16 <getButtonState+0x39c>
    3e04:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e06:	81 30       	cpi	r24, 0x01	; 1
    3e08:	31 f4       	brne	.+12     	; 0x3e16 <getButtonState+0x39c>
	{
		*pbuttonState = BUTTON_PRESSED;
    3e0a:	ee a5       	ldd	r30, Y+46	; 0x2e
    3e0c:	ff a5       	ldd	r31, Y+47	; 0x2f
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	80 83       	st	Z, r24
		retStatus = SUCCESS;
    3e12:	1b a6       	std	Y+43, r1	; 0x2b
    3e14:	0d c0       	rjmp	.+26     	; 0x3e30 <getButtonState+0x3b6>
	}
	else if((SUCCESS == retStatus) && (PIN_IS_LOW == pinState))
    3e16:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e18:	88 23       	and	r24, r24
    3e1a:	41 f4       	brne	.+16     	; 0x3e2c <getButtonState+0x3b2>
    3e1c:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e1e:	88 23       	and	r24, r24
    3e20:	29 f4       	brne	.+10     	; 0x3e2c <getButtonState+0x3b2>
	{
		*pbuttonState = BUTTON_NOT_PRESSED;
    3e22:	ee a5       	ldd	r30, Y+46	; 0x2e
    3e24:	ff a5       	ldd	r31, Y+47	; 0x2f
    3e26:	10 82       	st	Z, r1
		retStatus = SUCCESS;
    3e28:	1b a6       	std	Y+43, r1	; 0x2b
    3e2a:	02 c0       	rjmp	.+4      	; 0x3e30 <getButtonState+0x3b6>
	}
	else
	{
		retStatus = ERROR;
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	8b a7       	std	Y+43, r24	; 0x2b
	}

	return retStatus;
    3e30:	8b a5       	ldd	r24, Y+43	; 0x2b

}
    3e32:	e1 96       	adiw	r28, 0x31	; 49
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	de bf       	out	0x3e, r29	; 62
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	cd bf       	out	0x3d, r28	; 61
    3e3e:	cf 91       	pop	r28
    3e40:	df 91       	pop	r29
    3e42:	08 95       	ret

00003e44 <Timer0_CTC_Square_Wave_Init>:
#include <avr/interrupt.h>



void Timer0_CTC_Square_Wave_Init(void)
{
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	cd b7       	in	r28, 0x3d	; 61
    3e4a:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; // initial value 0
    3e4c:	e2 e5       	ldi	r30, 0x52	; 82
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	10 82       	st	Z, r1
	OCR0 = 250; // compare value
    3e52:	ec e5       	ldi	r30, 0x5C	; 92
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	8a ef       	ldi	r24, 0xFA	; 250
    3e58:	80 83       	st	Z, r24
	DDRD = DDRD| (1<<PD6); // OC0 Pin as output pin
    3e5a:	a1 e3       	ldi	r26, 0x31	; 49
    3e5c:	b0 e0       	ldi	r27, 0x00	; 0
    3e5e:	e1 e3       	ldi	r30, 0x31	; 49
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	80 81       	ld	r24, Z
    3e64:	80 64       	ori	r24, 0x40	; 64
    3e66:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. Toggle OC0 on compare match COM00=1 & COM01=0
	 * 4. clock = CPU clock CS00=1 CS01=0 CS02=0
	 */
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<COM00) | (1<<CS00);
    3e68:	e3 e5       	ldi	r30, 0x53	; 83
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	89 e9       	ldi	r24, 0x99	; 153
    3e6e:	80 83       	st	Z, r24
}
    3e70:	cf 91       	pop	r28
    3e72:	df 91       	pop	r29
    3e74:	08 95       	ret

00003e76 <main>:

int main(void)
{
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_Square_Wave_Init();
    3e7e:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <Timer0_CTC_Square_Wave_Init>
    3e82:	ff cf       	rjmp	.-2      	; 0x3e82 <main+0xc>

00003e84 <__prologue_saves__>:
    3e84:	2f 92       	push	r2
    3e86:	3f 92       	push	r3
    3e88:	4f 92       	push	r4
    3e8a:	5f 92       	push	r5
    3e8c:	6f 92       	push	r6
    3e8e:	7f 92       	push	r7
    3e90:	8f 92       	push	r8
    3e92:	9f 92       	push	r9
    3e94:	af 92       	push	r10
    3e96:	bf 92       	push	r11
    3e98:	cf 92       	push	r12
    3e9a:	df 92       	push	r13
    3e9c:	ef 92       	push	r14
    3e9e:	ff 92       	push	r15
    3ea0:	0f 93       	push	r16
    3ea2:	1f 93       	push	r17
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
    3eac:	ca 1b       	sub	r28, r26
    3eae:	db 0b       	sbc	r29, r27
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	09 94       	ijmp

00003ebc <__epilogue_restores__>:
    3ebc:	2a 88       	ldd	r2, Y+18	; 0x12
    3ebe:	39 88       	ldd	r3, Y+17	; 0x11
    3ec0:	48 88       	ldd	r4, Y+16	; 0x10
    3ec2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ec4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ec6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ec8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eca:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ecc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ece:	b9 84       	ldd	r11, Y+9	; 0x09
    3ed0:	c8 84       	ldd	r12, Y+8	; 0x08
    3ed2:	df 80       	ldd	r13, Y+7	; 0x07
    3ed4:	ee 80       	ldd	r14, Y+6	; 0x06
    3ed6:	fd 80       	ldd	r15, Y+5	; 0x05
    3ed8:	0c 81       	ldd	r16, Y+4	; 0x04
    3eda:	1b 81       	ldd	r17, Y+3	; 0x03
    3edc:	aa 81       	ldd	r26, Y+2	; 0x02
    3ede:	b9 81       	ldd	r27, Y+1	; 0x01
    3ee0:	ce 0f       	add	r28, r30
    3ee2:	d1 1d       	adc	r29, r1
    3ee4:	0f b6       	in	r0, 0x3f	; 63
    3ee6:	f8 94       	cli
    3ee8:	de bf       	out	0x3e, r29	; 62
    3eea:	0f be       	out	0x3f, r0	; 63
    3eec:	cd bf       	out	0x3d, r28	; 61
    3eee:	ed 01       	movw	r28, r26
    3ef0:	08 95       	ret

00003ef2 <itoa>:
    3ef2:	fb 01       	movw	r30, r22
    3ef4:	9f 01       	movw	r18, r30
    3ef6:	e8 94       	clt
    3ef8:	42 30       	cpi	r20, 0x02	; 2
    3efa:	c4 f0       	brlt	.+48     	; 0x3f2c <itoa+0x3a>
    3efc:	45 32       	cpi	r20, 0x25	; 37
    3efe:	b4 f4       	brge	.+44     	; 0x3f2c <itoa+0x3a>
    3f00:	4a 30       	cpi	r20, 0x0A	; 10
    3f02:	29 f4       	brne	.+10     	; 0x3f0e <itoa+0x1c>
    3f04:	97 fb       	bst	r25, 7
    3f06:	1e f4       	brtc	.+6      	; 0x3f0e <itoa+0x1c>
    3f08:	90 95       	com	r25
    3f0a:	81 95       	neg	r24
    3f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0e:	64 2f       	mov	r22, r20
    3f10:	77 27       	eor	r23, r23
    3f12:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodhi4>
    3f16:	80 5d       	subi	r24, 0xD0	; 208
    3f18:	8a 33       	cpi	r24, 0x3A	; 58
    3f1a:	0c f0       	brlt	.+2      	; 0x3f1e <itoa+0x2c>
    3f1c:	89 5d       	subi	r24, 0xD9	; 217
    3f1e:	81 93       	st	Z+, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	a1 f7       	brne	.-24     	; 0x3f0e <itoa+0x1c>
    3f26:	16 f4       	brtc	.+4      	; 0x3f2c <itoa+0x3a>
    3f28:	5d e2       	ldi	r21, 0x2D	; 45
    3f2a:	51 93       	st	Z+, r21
    3f2c:	10 82       	st	Z, r1
    3f2e:	c9 01       	movw	r24, r18
    3f30:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <strrev>

00003f34 <strrev>:
    3f34:	dc 01       	movw	r26, r24
    3f36:	fc 01       	movw	r30, r24
    3f38:	67 2f       	mov	r22, r23
    3f3a:	71 91       	ld	r23, Z+
    3f3c:	77 23       	and	r23, r23
    3f3e:	e1 f7       	brne	.-8      	; 0x3f38 <strrev+0x4>
    3f40:	32 97       	sbiw	r30, 0x02	; 2
    3f42:	04 c0       	rjmp	.+8      	; 0x3f4c <strrev+0x18>
    3f44:	7c 91       	ld	r23, X
    3f46:	6d 93       	st	X+, r22
    3f48:	70 83       	st	Z, r23
    3f4a:	62 91       	ld	r22, -Z
    3f4c:	ae 17       	cp	r26, r30
    3f4e:	bf 07       	cpc	r27, r31
    3f50:	c8 f3       	brcs	.-14     	; 0x3f44 <strrev+0x10>
    3f52:	08 95       	ret

00003f54 <__udivmodhi4>:
    3f54:	aa 1b       	sub	r26, r26
    3f56:	bb 1b       	sub	r27, r27
    3f58:	51 e1       	ldi	r21, 0x11	; 17
    3f5a:	07 c0       	rjmp	.+14     	; 0x3f6a <__udivmodhi4_ep>

00003f5c <__udivmodhi4_loop>:
    3f5c:	aa 1f       	adc	r26, r26
    3f5e:	bb 1f       	adc	r27, r27
    3f60:	a6 17       	cp	r26, r22
    3f62:	b7 07       	cpc	r27, r23
    3f64:	10 f0       	brcs	.+4      	; 0x3f6a <__udivmodhi4_ep>
    3f66:	a6 1b       	sub	r26, r22
    3f68:	b7 0b       	sbc	r27, r23

00003f6a <__udivmodhi4_ep>:
    3f6a:	88 1f       	adc	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	5a 95       	dec	r21
    3f70:	a9 f7       	brne	.-22     	; 0x3f5c <__udivmodhi4_loop>
    3f72:	80 95       	com	r24
    3f74:	90 95       	com	r25
    3f76:	bc 01       	movw	r22, r24
    3f78:	cd 01       	movw	r24, r26
    3f7a:	08 95       	ret

00003f7c <_exit>:
    3f7c:	f8 94       	cli

00003f7e <__stop_program>:
    3f7e:	ff cf       	rjmp	.-2      	; 0x3f7e <__stop_program>
